/*! snek v1.5.0 | (c) 2024 iconix | MIT License | https://github.com/iconix/snek */
const t="left",n="right",e="down",{INPUT:i}={BOARD:{CTRL_PANEL_HEIGHT:50,MARGIN_SIZE:20,NUM_STEPS_ACROSS_CANVAS:30,DEFAULT_BACKGROUND_COLOR:"white",DEFAULT_BORDER_COLOR:"darkgreen",TELEPORT_BORDER_COLOR:"blue",TELEPORT_BACKGROUND_COLOR:"#e2f1fa",FILTERS:{NONE:"none",PAUSE:"contrast(1.4) sepia(1)",ENDGAME:"grayscale(0.8) blur(0.5px)"}},SNAKE:{INITIAL_LENGTH:5,DEFAULT_COLOR:"lightgreen",DEFAULT_BORDER_COLOR:"darkgreen",PHASE_BORDER_COLOR:"violet"},ITEM:{FOOD_COLOR:"red",FOOD_BORDER_COLOR:"darkred",PHASE_COLOR:"orchid",PHASE_BORDER_COLOR:"violet",TELEPORT_COLOR:"blue",TELEPORT_BORDER_COLOR:"darkblue",PHASE_SCORE_THRESHOLD:150,TELEPORT_SCORE_THRESHOLD:50,BASE_PHASE_PROBABILITY:.1,BASE_TELEPORT_PROBABILITY:.1,BASE_VOLATILE_FOOD_PROBABILITY:.01},GAME:{SCORE_INCREMENT:10,SCORE_THRESHOLD_FOR_VOLATILE_FOOD:100,SPEED_MS__ARROW:100,SPEED_MS__MOTION:125},INPUT:{SWIPE_SENSITIVITY:10,MOTION_SENSITIVITY:15,MOTION_THROTTLE_TIME_MS:100},CANVAS:{GAME_TEXT_COLOR:"gray",HIGH_SCORE_TEXT_COLOR:"goldenrod",PAUSE_BTN_COLOR:"darkkhaki",EXCLAMATION_BTN_COLOR:"darkkhaki",GAME_TEXT_FONT_FAMILY:'"Saira", serif',GAME_TEXT_FONT_SIZE:50},STATE:{LOCAL_STORAGE_KEY_HIGH_SCORE:"highScore",LOCAL_STORAGE_KEY_GAME_SPEED:"gameSpeed"},ERROR:{MESSAGE_FONT:"20px Arial",MESSAGE_COLOR:"red",MESSAGE_BACKGROUND:"rgba(0, 0, 0, 0.7)"}};class o{constructor(t,n={}){this.container=t,this.options={showInfo:!0,position:"inline",...n},this._create(),this._initialOrientation=null}update(t,n){if(!this._initialOrientation)return void(this._initialOrientation={beta:t.beta,gamma:t.gamma});const{beta:e,gamma:i}=t,o=30,a=e-this._initialOrientation.beta,r=i-this._initialOrientation.gamma,s=Math.min(Math.max(r,-30),o)/o,l=Math.min(Math.max(a,-30),o)/o,c="corner"===this.options.position?40:60;if(this.dot instanceof HTMLDivElement&&(this.dot.style.transform=`translate(${s*c}px, ${l*c}px)`),this.arrows&&this.arrows.forEach((t=>t.classList.remove("active"))),n){const t=this.container.querySelector(`.arrow.${n.toLowerCase()}`);t instanceof HTMLDivElement&&t.classList.add("active"),this.options.showInfo&&this.directionValue instanceof HTMLSpanElement&&this.directionValue.textContent!==n&&(this.directionValue.classList.add("highlight"),this.directionValue.textContent=n,setTimeout((()=>{this.directionValue instanceof HTMLSpanElement&&this.directionValue.classList.remove("highlight")}),300))}this.options.showInfo&&(this.betaValue instanceof HTMLSpanElement&&(this.betaValue.textContent=e.toFixed(2)),this.gammaValue instanceof HTMLSpanElement&&(this.gammaValue.textContent=i.toFixed(2)))}show(){this.container&&(this.container.style.display="block")}hide(){this.container&&(this.container.style.display="none")}_create(){this.container.innerHTML=`\n            <div class="motion-indicator ${this.options.position}">\n                <div class="tilt-indicator ${this.options.position}">\n                    <div class="dot"></div>\n                    <div class="arrow up ${this.options.position}">▲︎</div>\n                    <div class="arrow down ${this.options.position}">▼︎</div>\n                    <div class="arrow left ${this.options.position}">◀︎</div>\n                    <div class="arrow right ${this.options.position}">▶︎</div>\n                </div>\n                ${this.options.showInfo?'\n                <div class="info">\n                    <p>Direction: <span class="direction-value">None</span></p>\n                    \x3c!-- <p>Sensitivity: <span class="sensitivity-value">1.00</span></p> --\x3e\n                    <p>Beta: <span class="beta-value">0.00</span>°</p>\n                    <p>Gamma: <span class="gamma-value">0.00</span>°</p>\n                </div>\n                ':""}\n            </div>\n        `,this.dot=this.container.querySelector(".dot"),this.arrows=this.container.querySelectorAll(".arrow"),this.directionValue=this.container.querySelector(".direction-value"),this.betaValue=this.container.querySelector(".beta-value"),this.gammaValue=this.container.querySelector(".gamma-value"),this._addStyles()}_addStyles(){const t=document.createElement("style");t.textContent="\n            .motion-indicator {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n            .motion-indicator.corner {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                background: white;\n                padding: 10px;\n                border-radius: 10px;\n                box-shadow: 0 0 10px rgba(0,0,0,0.1);\n            }\n            .tilt-indicator {\n                width: 150px;\n                height: 150px;\n                border: 2px solid #ccc;\n                border-radius: 10px;\n                position: relative;\n                overflow: hidden;\n            }\n            .tilt-indicator.corner {\n                width: 100px;\n                height: 100px;\n            }\n            .dot {\n                width: 20px;\n                height: 20px;\n                background: blue;\n                border-radius: 50%;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                transition: transform 0.1s ease;\n            }\n            .arrow {\n                position: absolute;\n                color: #ccc;\n                font-size: 24px;\n                transition: color 0.3s ease;\n            }\n            .arrow.up { top: 10px; left: 50%; transform: translateX(-50%); }\n            .arrow.down { bottom: 10px; left: 50%; transform: translateX(-50%); }\n            .arrow.left { left: 10px; top: 50%; transform: translateY(-50%); }\n            .arrow.right { right: 10px; top: 50%; transform: translateY(-50%); }\n            .arrow.active { color: green; }\n            .arrow.up.corner { top: 5px; }\n            .arrow.down.corner { bottom: 5px; }\n            .arrow.left.corner { left: 5px; }\n            .arrow.right.corner { right: 5px; }\n            .info {\n                text-align: left;\n                margin-left: 20px;\n            }\n            .info p {\n                margin: 5px 0;\n            }\n            .direction-value {\n                display: inline-block;\n                padding: 2px 8px;\n                border-radius: 4px;\n                transition: background-color 0.3s ease;\n            }\n            .direction-value.highlight {\n                background-color: #ffd700;\n            }\n        ",document.head.appendChild(t)}}function a(o,a,r,s,l){if(!a)return null;if(s-l<i.MOTION_THROTTLE_TIME_MS)return null;const c={beta:o.beta-r.beta,gamma:o.gamma-r.gamma};return function(t){const n=i.MOTION_SENSITIVITY;return Math.abs(t.beta)>n||Math.abs(t.gamma)>n}(c)?function(i){let o=null;o=Math.abs(i.beta)>Math.abs(i.gamma)?i.beta<0?"up":e:i.gamma<0?t:n;return o}(c):null}document.addEventListener("DOMContentLoaded",(function(){const t=document.getElementById("motionIndicator");if(!(t instanceof HTMLDivElement))return void console.error("motion indicator container not found");const n=new o(t,{showInfo:!0,position:"inline"});let e=null,i=null,r=null,s=null;if(window.DeviceOrientationEvent)if("undefined"!=typeof DeviceOrientationEvent&&"function"==typeof DeviceOrientationEvent.requestPermission){const t=document.getElementById("requestPermission");t instanceof HTMLButtonElement&&(t.style.display="block",t.addEventListener("click",(function(){DeviceOrientationEvent.requestPermission().then((t=>{if("granted"===t){window.addEventListener("deviceorientation",l),function(){const t=document.getElementById("errorMessage");t&&(t.textContent="")}();const t=document.getElementById("requestPermission");t instanceof HTMLButtonElement&&(t.style.display="none")}else c("permission to access device orientation was denied.")})).catch(console.error)})))}else window.addEventListener("deviceorientation",l);else c("sorry, your browser doesn't support Device Orientation");function l(t){const o=Date.now(),l={beta:t.beta||0,gamma:t.gamma||0};e||(e={...l},i={...l});const c=a(l,e,i,o,r);c&&(s=c,console.log("direction changed:",s),r=o,i=l),n.update(l,s)}function c(t){const n=document.getElementById("errorMessage");n&&(n.textContent=t)}}));
//# sourceMappingURL=debug__orientation.min.js.map
