{"version":3,"file":"debug__orientation.min.js","sources":["../src/js/config.js","../src/js/direction.js","../src/js/motion.js","../src/js/debug__orientation.js"],"sourcesContent":["export const GAME_CONFIG = {\r\n    BOARD: {\r\n        CTRL_PANEL_HEIGHT: 50,  // pixels\r\n        MARGIN_SIZE: 20,  // pixels\r\n        NUM_STEPS_ACROSS_CANVAS: 30,\r\n        DEFAULT_BACKGROUND_COLOR: 'white',\r\n        DEFAULT_BORDER_COLOR: 'darkgreen',\r\n        TELEPORT_BORDER_COLOR: 'blue',\r\n        TELEPORT_BACKGROUND_COLOR: '#e2f1fa',  // a light blue\r\n        FILTERS: {\r\n            NONE: 'none',\r\n            PAUSE: 'contrast(1.4) sepia(1)',\r\n            ENDGAME: 'grayscale(0.8) blur(0.5px)',\r\n        },\r\n    },\r\n\r\n    SNAKE: {\r\n        INITIAL_LENGTH: 5,\r\n        DEFAULT_COLOR: 'lightgreen',\r\n        DEFAULT_BORDER_COLOR: 'darkgreen',\r\n        PHASE_BORDER_COLOR: 'violet',\r\n    },\r\n\r\n    ITEM: {\r\n        FOOD_COLOR: 'red',\r\n        FOOD_BORDER_COLOR: 'darkred',\r\n        PHASE_COLOR: 'orchid',\r\n        PHASE_BORDER_COLOR: 'violet',\r\n        TELEPORT_COLOR: 'blue',\r\n        TELEPORT_BORDER_COLOR: 'darkblue',\r\n        PHASE_SCORE_THRESHOLD: 150,\r\n        TELEPORT_SCORE_THRESHOLD: 50,\r\n        BASE_PHASE_PROBABILITY: 0.1,\r\n        BASE_TELEPORT_PROBABILITY: 0.1,\r\n        BASE_VOLATILE_FOOD_PROBABILITY: 0.01,\r\n    },\r\n\r\n    GAME: {\r\n        SCORE_INCREMENT: 10,\r\n        SCORE_THRESHOLD_FOR_VOLATILE_FOOD: 100,\r\n        SPEED_MS__ARROW: 100,\r\n        SPEED_MS__MOTION: 125,          // slow down game since harder with motion controls\r\n    },\r\n\r\n    INPUT: {\r\n        SWIPE_SENSITIVITY: 10,          // delta of pixels needed to consider touch mvmt a 'swipe'\r\n        MOTION_SENSITIVITY: 15,         // degree of motion needed to consider a device mvmt as intentional\r\n        MOTION_THROTTLE_TIME_MS: 100,   // min time between motion control updates to prevent over-sensitivity\r\n    },\r\n\r\n    CANVAS: {\r\n        GAME_TEXT_COLOR: 'gray',\r\n        HIGH_SCORE_TEXT_COLOR: 'goldenrod',\r\n        PAUSE_BTN_COLOR: 'darkkhaki',\r\n        EXCLAMATION_BTN_COLOR: 'darkkhaki',\r\n        GAME_TEXT_FONT_FAMILY: '\"Saira\", serif',\r\n        GAME_TEXT_FONT_SIZE: 50,\r\n    },\r\n\r\n    STATE: {\r\n        LOCAL_STORAGE_KEY_HIGH_SCORE: 'highScore',\r\n        LOCAL_STORAGE_KEY_GAME_SPEED: 'gameSpeed',\r\n    },\r\n\r\n    ERROR: {\r\n        // ERROR_MESSAGE_DURATION: 5000,\r\n        MESSAGE_FONT: '20px Arial',\r\n        MESSAGE_COLOR: 'red',\r\n        MESSAGE_BACKGROUND: 'rgba(0, 0, 0, 0.7)',\r\n    },\r\n};\r\n","export const DIRECTION_LEFT = 'left';\r\nexport const DIRECTION_RIGHT = 'right';\r\nexport const DIRECTION_UP = 'up';\r\nexport const DIRECTION_DOWN = 'down';\r\n\r\n/**\r\n * @typedef {Object} Direction\r\n * @property {number} dx - change in x direction\r\n * @property {number} dy - change in y direction\r\n */\r\n\r\n/**\r\n * Object mapping direction strings to their corresponding Direction objects.\r\n * @type {Object.<string, Direction>}\r\n */\r\nexport const DIRECTIONS = {\r\n    [DIRECTION_LEFT]:  { dx: -1, dy: 0 },\r\n    [DIRECTION_RIGHT]: { dx: 1,  dy: 0 },\r\n    [DIRECTION_UP]:    { dx: 0,  dy: -1 },\r\n    [DIRECTION_DOWN]:  { dx: 0,  dy: 1 },\r\n};\r\n\r\n/**\r\n * Gets the Direction object for a given direction string.\r\n * @param {string} direction - direction string\r\n * @returns {Direction | null} Direction object or null if not found\r\n */\r\nexport function getDirection(direction) {\r\n    return DIRECTIONS[direction.toLowerCase()] || null;\r\n}\r\n\r\n/**\r\n * Checks if two directions are opposite to each other.\r\n * @param {Direction} dir1 - first direction\r\n * @param {Direction} dir2 - second direction\r\n * @returns {boolean} true if the directions are opposite; false otherwise\r\n */\r\nexport function isOppositeDirection(dir1, dir2) {\r\n    return dir1.dx === -dir2.dx && dir1.dy === -dir2.dy;\r\n}\r\n\r\n/**\r\n * Normalizes a direction vector to have a magnitude of 1.\r\n * @param {number} dx - x component of the direction\r\n * @param {number} dy - y component of the direction\r\n * @returns {Direction} normalized direction\r\n */\r\nexport function normalizeDirection(dx, dy) {\r\n    const magnitude = Math.max(Math.abs(dx), Math.abs(dy));\r\n    if (magnitude === 0) {\r\n        return { dx: 0, dy: 0 };\r\n    }\r\n    return { dx: dx / magnitude, dy: dy / magnitude };\r\n}\r\n","import { GAME_CONFIG } from './config';\r\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from './direction';\r\n\r\nconst { INPUT } = GAME_CONFIG;\r\n\r\n/**\r\n * Represents a visual indicator for motion controls.\r\n */\r\nexport class MotionControlIndicator {\r\n\r\n    /**\r\n     * @param {HTMLDivElement} container - container element to render the indicator in\r\n     * @param {Object} [options={}] - configuration options for the indicator\r\n     * @param {boolean} [options.showInfo=true] - whether to show additional information\r\n     * @param {string} [options.position='inline'] - position of the indicator ('inline' or 'corner')\r\n     */\r\n    constructor(container, options = {}) {\r\n        this.container = container;\r\n        this.options = {\r\n            showInfo: true,\r\n            position: 'inline',\r\n            ...options\r\n        };\r\n        this._create();\r\n    }\r\n\r\n    /**\r\n     * Updates the motion control indicator based on the current orientation and direction.\r\n     * @param {{ beta: number, gamma: number }} orientation - current device orientation\r\n     * @param {string|null} direction - current direction of movement (UP, DOWN, LEFT, RIGHT, or null)\r\n     */\r\n    update(orientation, direction) {\r\n        const { beta, gamma } = orientation;\r\n        const maxTilt = 30;\r\n        const tiltX = Math.min(Math.max(gamma, -maxTilt), maxTilt) / maxTilt;\r\n        const tiltY = Math.min(Math.max(beta, -maxTilt), maxTilt) / maxTilt;\r\n\r\n        const dotPx = this.options.position === 'corner' ? 40 : 60;\r\n        if (this.dot instanceof HTMLDivElement) {\r\n            this.dot.style.transform = `translate(${tiltX * dotPx}px, ${tiltY * dotPx}px)`;\r\n        }\r\n\r\n        if (this.arrows) {\r\n            this.arrows.forEach(arrow => arrow.classList.remove('active'));\r\n        }\r\n        if (direction) {\r\n            const activeArrow = this.container.querySelector(`.arrow.${direction.toLowerCase()}`);\r\n            if (activeArrow instanceof HTMLDivElement) {\r\n                activeArrow.classList.add('active')\r\n            }\r\n\r\n            if (this.options.showInfo && this.directionValue instanceof HTMLSpanElement) {\r\n                if (this.directionValue.textContent !== direction) {\r\n                    this.directionValue.classList.add('highlight');\r\n                    this.directionValue.textContent = direction;\r\n                    setTimeout(() => {\r\n                        if (this.directionValue instanceof HTMLSpanElement) {\r\n                            this.directionValue.classList.remove('highlight');\r\n                        }\r\n                    }, 300);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.options.showInfo) {\r\n            if (this.betaValue instanceof HTMLSpanElement) {\r\n                this.betaValue.textContent = beta.toFixed(2);\r\n            }\r\n            if (this.gammaValue instanceof HTMLSpanElement) {\r\n                this.gammaValue.textContent = gamma.toFixed(2);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes the motion control indicator visible, if it exists.\r\n     */\r\n    show() {\r\n        if (this.container) {\r\n            this.container.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the motion control indicator, if it exists.\r\n     */\r\n    hide() {\r\n        if (this.container) {\r\n            this.container.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the DOM elements for the motion control indicator.\r\n     * @private\r\n     */\r\n    _create() {\r\n        this.container.innerHTML = `\r\n            <div class=\"motion-indicator ${this.options.position}\">\r\n                <div class=\"tilt-indicator ${this.options.position}\">\r\n                    <div class=\"dot\"></div>\r\n                    <div class=\"arrow up ${this.options.position}\">\\u25B2\\uFE0E</div>\r\n                    <div class=\"arrow down ${this.options.position}\">\\u25BC\\uFE0E</div>\r\n                    <div class=\"arrow left ${this.options.position}\">\\u25C0\\uFE0E</div>\r\n                    <div class=\"arrow right ${this.options.position}\">\\u25B6\\uFE0E</div>\r\n                </div>\r\n                ${this.options.showInfo ? `\r\n                <div class=\"info\">\r\n                    <p>Direction: <span class=\"direction-value\">None</span></p>\r\n                    <p>Beta: <span class=\"beta-value\">0.00</span>°</p>\r\n                    <p>Gamma: <span class=\"gamma-value\">0.00</span>°</p>\r\n                </div>\r\n                ` : ''}\r\n            </div>\r\n        `;\r\n\r\n        this.dot = this.container.querySelector('.dot');\r\n        this.arrows = this.container.querySelectorAll('.arrow');\r\n        this.directionValue = this.container.querySelector('.direction-value');\r\n        this.betaValue = this.container.querySelector('.beta-value');\r\n        this.gammaValue = this.container.querySelector('.gamma-value');\r\n\r\n        this._addStyles();\r\n    }\r\n\r\n    /**\r\n     * Adds the necessary styles for the motion control indicator.\r\n     * @private\r\n     */\r\n    _addStyles() {\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            .motion-indicator {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n            }\r\n            .motion-indicator.corner {\r\n                position: fixed;\r\n                bottom: 20px;\r\n                right: 20px;\r\n                background: white;\r\n                padding: 10px;\r\n                border-radius: 10px;\r\n                box-shadow: 0 0 10px rgba(0,0,0,0.1);\r\n            }\r\n            .tilt-indicator {\r\n                width: 150px;\r\n                height: 150px;\r\n                border: 2px solid #ccc;\r\n                border-radius: 10px;\r\n                position: relative;\r\n                overflow: hidden;\r\n            }\r\n            .tilt-indicator.corner {\r\n                width: 100px;\r\n                height: 100px;\r\n            }\r\n            .dot {\r\n                width: 20px;\r\n                height: 20px;\r\n                background: blue;\r\n                border-radius: 50%;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n                transition: transform 0.1s ease;\r\n            }\r\n            .arrow {\r\n                position: absolute;\r\n                color: #ccc;\r\n                font-size: 24px;\r\n                transition: color 0.3s ease;\r\n            }\r\n            .arrow.up { top: 10px; left: 50%; transform: translateX(-50%); }\r\n            .arrow.down { bottom: 10px; left: 50%; transform: translateX(-50%); }\r\n            .arrow.left { left: 10px; top: 50%; transform: translateY(-50%); }\r\n            .arrow.right { right: 10px; top: 50%; transform: translateY(-50%); }\r\n            .arrow.active { color: green; }\r\n            .arrow.up.corner { top: 5px; }\r\n            .arrow.down.corner { bottom: 5px; }\r\n            .arrow.left.corner { left: 5px; }\r\n            .arrow.right.corner { right: 5px; }\r\n            .info {\r\n                text-align: left;\r\n                margin-left: 20px;\r\n            }\r\n            .info p {\r\n                margin: 5px 0;\r\n            }\r\n            .direction-value {\r\n                display: inline-block;\r\n                padding: 2px 8px;\r\n                border-radius: 4px;\r\n                transition: background-color 0.3s ease;\r\n            }\r\n            .direction-value.highlight {\r\n                background-color: #ffd700;\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the motion control based on the current and last device orientation,\r\n * as well as the time between updates to prevent overly frequent updates.\r\n *\r\n * @param {{ beta: number, gamma: number }} currentOrientation - current device orientation\r\n * @param {{ beta: number, gamma: number }} lastOrientation - last device orientation\r\n * @param {number} currentUpdateTime - timestamp of the current update\r\n * @param {number} lastUpdateTime - timestamp of the last update\r\n *\r\n * @returns {string|null} direction - calculated direction (UP, DOWN, LEFT, RIGHT),\r\n *                        or null if no significant motion or if the update is too soon\r\n */\r\nexport function calculateMotionControl(currentOrientation, lastOrientation, currentUpdateTime, lastUpdateTime) {\r\n    // ensure we are not updating too frequently\r\n    if (currentUpdateTime - lastUpdateTime < INPUT.MOTION_THROTTLE_TIME_MS) {\r\n        return null;\r\n    }\r\n\r\n    // calculate change since last update\r\n    const recentChange = {\r\n        beta: currentOrientation.beta - lastOrientation.beta,\r\n        gamma: currentOrientation.gamma - lastOrientation.gamma\r\n    };\r\n\r\n    return isSignificantMotion(recentChange) ? getDirectionFromOrientation(recentChange) : null;\r\n}\r\n\r\n/**\r\n * Determines if a change in device orientation is significant enough to trigger a direction change.\r\n * Filters out small, unintentional device movements so we respond only to deliberate motions.\r\n * @param {Object} orientationChange - change in device orientation\r\n * @param {number} orientationChange.beta - change in beta (x-axis rotation) in degrees\r\n * @param {number} orientationChange.gamma - change in gamma (y-axis rotation) in degrees\r\n    * @returns {boolean} true if the motion is considered significant; false otherwise\r\n * @private\r\n */\r\nfunction isSignificantMotion(orientationChange) {\r\n    const threshold = INPUT.MOTION_SENSITIVITY;\r\n    return Math.abs(orientationChange.beta) > threshold || Math.abs(orientationChange.gamma) > threshold;\r\n}\r\n\r\n/**\r\n* Determine direction based on orientation change.\r\n* @param {{ beta: number, gamma: number }} orientationChange - the change in device orientation\r\n* @returns {string | null} determined direction or null\r\n* @private\r\n*/\r\nfunction getDirectionFromOrientation(orientationChange) {\r\n    let direction = null;\r\n    if (Math.abs(orientationChange.beta) > Math.abs(orientationChange.gamma)) {\r\n        direction = orientationChange.beta < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n    } else {\r\n        direction = orientationChange.gamma < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return direction;\r\n}\r\n","import { MotionControlIndicator, calculateMotionControl } from './motion';\r\n\r\nfunction initDebugPage() {\r\n    const container = document.getElementById('motionIndicator');\r\n    if (!(container instanceof HTMLDivElement)) {\r\n        console.error('motion indicator container not found');\r\n        return;\r\n    }\r\n\r\n    const indicator = new MotionControlIndicator(container, {\r\n        showInfo: true,\r\n        position: 'inline'\r\n    });\r\n\r\n    let lastOrientation = null;\r\n    let lastOrientationUpdateTime = null;\r\n    let snakeDirection = null;\r\n\r\n    if (window.DeviceOrientationEvent) {\r\n        if (typeof DeviceOrientationEvent !== 'undefined' && typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            const button = document.getElementById('requestPermission');\r\n            if (button instanceof HTMLButtonElement) {\r\n                button.style.display = 'block';\r\n                button.addEventListener('click', requestOrientationPermission);\r\n            }\r\n        } else {\r\n            window.addEventListener('deviceorientation', handleOrientation);\r\n        }\r\n    } else {\r\n        showError(\"sorry, your browser doesn't support Device Orientation\");\r\n    }\r\n\r\n    function requestOrientationPermission() {\r\n        DeviceOrientationEvent.requestPermission()\r\n            .then(permissionState => {\r\n                if (permissionState === 'granted') {\r\n                    window.addEventListener('deviceorientation', handleOrientation);\r\n                    hideError();\r\n\r\n                    const button = document.getElementById('requestPermission');\r\n                    if (button instanceof HTMLButtonElement) {\r\n                        button.style.display = 'none';\r\n                    }\r\n                } else {\r\n                    showError('permission to access device orientation was denied.');\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }\r\n\r\n    function handleOrientation(event) {\r\n        const currentUpdateTime = Date.now();\r\n        const currentOrientation = {\r\n            beta: event.beta || 0,\r\n            gamma: event.gamma || 0\r\n        };\r\n\r\n        if (!lastOrientation) {\r\n            lastOrientation = { ...currentOrientation };\r\n        }\r\n\r\n        const direction = calculateMotionControl(\r\n            currentOrientation,\r\n            lastOrientation,\r\n            currentUpdateTime,\r\n            lastOrientationUpdateTime\r\n        );\r\n\r\n        if (direction) {\r\n            snakeDirection = direction;\r\n            console.log('direction changed:', snakeDirection);\r\n\r\n            lastOrientationUpdateTime = currentUpdateTime;\r\n            lastOrientation = currentOrientation;\r\n        }\r\n\r\n        indicator.update(currentOrientation, snakeDirection);\r\n    }\r\n\r\n    function showError(message) {\r\n        const errorElement = document.getElementById('errorMessage');\r\n        if (errorElement) {\r\n            errorElement.textContent = message;\r\n        }\r\n    }\r\n\r\n    function hideError() {\r\n        const errorElement = document.getElementById('errorMessage');\r\n        if (errorElement) {\r\n            errorElement.textContent = '';\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', initDebugPage);\r\n"],"names":["DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_DOWN","INPUT","BOARD","CTRL_PANEL_HEIGHT","MARGIN_SIZE","NUM_STEPS_ACROSS_CANVAS","DEFAULT_BACKGROUND_COLOR","DEFAULT_BORDER_COLOR","TELEPORT_BORDER_COLOR","TELEPORT_BACKGROUND_COLOR","FILTERS","NONE","PAUSE","ENDGAME","SNAKE","INITIAL_LENGTH","DEFAULT_COLOR","PHASE_BORDER_COLOR","ITEM","FOOD_COLOR","FOOD_BORDER_COLOR","PHASE_COLOR","TELEPORT_COLOR","PHASE_SCORE_THRESHOLD","TELEPORT_SCORE_THRESHOLD","BASE_PHASE_PROBABILITY","BASE_TELEPORT_PROBABILITY","BASE_VOLATILE_FOOD_PROBABILITY","GAME","SCORE_INCREMENT","SCORE_THRESHOLD_FOR_VOLATILE_FOOD","SPEED_MS__ARROW","SPEED_MS__MOTION","SWIPE_SENSITIVITY","MOTION_SENSITIVITY","MOTION_THROTTLE_TIME_MS","CANVAS","GAME_TEXT_COLOR","HIGH_SCORE_TEXT_COLOR","PAUSE_BTN_COLOR","EXCLAMATION_BTN_COLOR","GAME_TEXT_FONT_FAMILY","GAME_TEXT_FONT_SIZE","STATE","LOCAL_STORAGE_KEY_HIGH_SCORE","LOCAL_STORAGE_KEY_GAME_SPEED","ERROR","MESSAGE_FONT","MESSAGE_COLOR","MESSAGE_BACKGROUND","MotionControlIndicator","constructor","container","options","this","showInfo","position","_create","update","orientation","direction","beta","gamma","maxTilt","tiltX","Math","min","max","tiltY","dotPx","dot","HTMLDivElement","style","transform","arrows","forEach","arrow","classList","remove","activeArrow","querySelector","toLowerCase","add","directionValue","HTMLSpanElement","textContent","setTimeout","betaValue","toFixed","gammaValue","show","display","hide","innerHTML","querySelectorAll","_addStyles","document","createElement","head","appendChild","calculateMotionControl","currentOrientation","lastOrientation","currentUpdateTime","lastUpdateTime","recentChange","orientationChange","threshold","abs","isSignificantMotion","getDirectionFromOrientation","addEventListener","getElementById","console","error","indicator","lastOrientationUpdateTime","snakeDirection","window","DeviceOrientationEvent","requestPermission","button","HTMLButtonElement","then","permissionState","handleOrientation","errorElement","hideError","showError","catch","event","Date","now","log","message"],"mappings":";AAAO,MCAMA,EAAiB,OACjBC,EAAkB,QAElBC,EAAiB,QCAxBC,MAAEA,GFHmB,CACvBC,MAAO,CACHC,kBAAmB,GACnBC,YAAa,GACbC,wBAAyB,GACzBC,yBAA0B,QAC1BC,qBAAsB,YACtBC,sBAAuB,OACvBC,0BAA2B,UAC3BC,QAAS,CACLC,KAAM,OACNC,MAAO,yBACPC,QAAS,+BAIjBC,MAAO,CACHC,eAAgB,EAChBC,cAAe,aACfT,qBAAsB,YACtBU,mBAAoB,UAGxBC,KAAM,CACFC,WAAY,MACZC,kBAAmB,UACnBC,YAAa,SACbJ,mBAAoB,SACpBK,eAAgB,OAChBd,sBAAuB,WACvBe,sBAAuB,IACvBC,yBAA0B,GAC1BC,uBAAwB,GACxBC,0BAA2B,GAC3BC,+BAAgC,KAGpCC,KAAM,CACFC,gBAAiB,GACjBC,kCAAmC,IACnCC,gBAAiB,IACjBC,iBAAkB,KAGtB/B,MAAO,CACHgC,kBAAmB,GACnBC,mBAAoB,GACpBC,wBAAyB,KAG7BC,OAAQ,CACJC,gBAAiB,OACjBC,sBAAuB,YACvBC,gBAAiB,YACjBC,sBAAuB,YACvBC,sBAAuB,iBACvBC,oBAAqB,IAGzBC,MAAO,CACHC,6BAA8B,YAC9BC,6BAA8B,aAGlCC,MAAO,CAEHC,aAAc,aACdC,cAAe,MACfC,mBAAoB,uBE5DrB,MAAMC,EAQT,WAAAC,CAAYC,EAAWC,EAAU,IAC7BC,KAAKF,UAAYA,EACjBE,KAAKD,QAAU,CACXE,UAAU,EACVC,SAAU,YACPH,GAEPC,KAAKG,SACR,CAOD,MAAAC,CAAOC,EAAaC,GAChB,MAAMC,KAAEA,EAAIC,MAAEA,GAAUH,EAClBI,EAAU,GACVC,EAAQC,KAAKC,IAAID,KAAKE,IAAIL,GAAO,IAAWC,GAAWA,EACvDK,EAAQH,KAAKC,IAAID,KAAKE,IAAIN,GAAM,IAAWE,GAAWA,EAEtDM,EAAkC,WAA1Bf,KAAKD,QAAQG,SAAwB,GAAK,GAQxD,GAPIF,KAAKgB,eAAeC,iBACpBjB,KAAKgB,IAAIE,MAAMC,UAAY,aAAaT,EAAQK,QAAYD,EAAQC,QAGpEf,KAAKoB,QACLpB,KAAKoB,OAAOC,SAAQC,GAASA,EAAMC,UAAUC,OAAO,YAEpDlB,EAAW,CACX,MAAMmB,EAAczB,KAAKF,UAAU4B,cAAc,UAAUpB,EAAUqB,iBACjEF,aAAuBR,gBACvBQ,EAAYF,UAAUK,IAAI,UAG1B5B,KAAKD,QAAQE,UAAYD,KAAK6B,0BAA0BC,iBACpD9B,KAAK6B,eAAeE,cAAgBzB,IACpCN,KAAK6B,eAAeN,UAAUK,IAAI,aAClC5B,KAAK6B,eAAeE,YAAczB,EAClC0B,YAAW,KACHhC,KAAK6B,0BAA0BC,iBAC/B9B,KAAK6B,eAAeN,UAAUC,OAAO,YACxC,GACF,KAGd,CAEGxB,KAAKD,QAAQE,WACTD,KAAKiC,qBAAqBH,kBAC1B9B,KAAKiC,UAAUF,YAAcxB,EAAK2B,QAAQ,IAE1ClC,KAAKmC,sBAAsBL,kBAC3B9B,KAAKmC,WAAWJ,YAAcvB,EAAM0B,QAAQ,IAGvD,CAKD,IAAAE,GACQpC,KAAKF,YACLE,KAAKF,UAAUoB,MAAMmB,QAAU,QAEtC,CAKD,IAAAC,GACQtC,KAAKF,YACLE,KAAKF,UAAUoB,MAAMmB,QAAU,OAEtC,CAMD,OAAAlC,GACIH,KAAKF,UAAUyC,UAAY,8CACQvC,KAAKD,QAAQG,0DACXF,KAAKD,QAAQG,qGAEfF,KAAKD,QAAQG,kEACXF,KAAKD,QAAQG,kEACbF,KAAKD,QAAQG,mEACZF,KAAKD,QAAQG,+DAEzCF,KAAKD,QAAQE,SAAW,oTAMtB,mCAIZD,KAAKgB,IAAMhB,KAAKF,UAAU4B,cAAc,QACxC1B,KAAKoB,OAASpB,KAAKF,UAAU0C,iBAAiB,UAC9CxC,KAAK6B,eAAiB7B,KAAKF,UAAU4B,cAAc,oBACnD1B,KAAKiC,UAAYjC,KAAKF,UAAU4B,cAAc,eAC9C1B,KAAKmC,WAAanC,KAAKF,UAAU4B,cAAc,gBAE/C1B,KAAKyC,YACR,CAMD,UAAAA,GACI,MAAMvB,EAAQwB,SAASC,cAAc,SACrCzB,EAAMa,YAAc,+5EAsEpBW,SAASE,KAAKC,YAAY3B,EAC7B,EAeE,SAAS4B,EAAuBC,EAAoBC,EAAiBC,EAAmBC,GAE3F,GAAID,EAAoBC,EAAiBvG,EAAMkC,wBAC3C,OAAO,KAIX,MAAMsE,EAAe,CACjB5C,KAAMwC,EAAmBxC,KAAOyC,EAAgBzC,KAChDC,MAAOuC,EAAmBvC,MAAQwC,EAAgBxC,OAGtD,OAYJ,SAA6B4C,GACzB,MAAMC,EAAY1G,EAAMiC,mBACxB,OAAO+B,KAAK2C,IAAIF,EAAkB7C,MAAQ8C,GAAa1C,KAAK2C,IAAIF,EAAkB5C,OAAS6C,CAC/F,CAfWE,CAAoBJ,GAuB/B,SAAqCC,GACjC,IAAI9C,EAAY,KAEZA,EADAK,KAAK2C,IAAIF,EAAkB7C,MAAQI,KAAK2C,IAAIF,EAAkB5C,OAClD4C,EAAkB7C,KAAO,ED7PjB,KC6PoC7D,EAE5C0G,EAAkB5C,MAAQ,EAAIhE,EAAiBC,EAE/D,OAAO6D,CACX,CA/B+CkD,CAA4BL,GAAgB,IAC3F,CCxIAT,SAASe,iBAAiB,oBA5F1B,WACI,MAAM3D,EAAY4C,SAASgB,eAAe,mBAC1C,KAAM5D,aAAqBmB,gBAEvB,YADA0C,QAAQC,MAAM,wCAIlB,MAAMC,EAAY,IAAIjE,EAAuBE,EAAW,CACpDG,UAAU,EACVC,SAAU,WAGd,IAAI8C,EAAkB,KAClBc,EAA4B,KAC5BC,EAAiB,KAErB,GAAIC,OAAOC,uBACP,GAAsC,oBAA3BA,wBAA8F,mBAA7CA,uBAAuBC,kBAAkC,CACjH,MAAMC,EAASzB,SAASgB,eAAe,qBACnCS,aAAkBC,oBAClBD,EAAOjD,MAAMmB,QAAU,QACvB8B,EAAOV,iBAAiB,SASpC,WACIQ,uBAAuBC,oBAClBG,MAAKC,IACF,GAAwB,YAApBA,EAA+B,CAC/BN,OAAOP,iBAAiB,oBAAqBc,GAkD7D,WACI,MAAMC,EAAe9B,SAASgB,eAAe,gBACzCc,IACAA,EAAazC,YAAc,GAElC,CAtDe0C,GAEA,MAAMN,EAASzB,SAASgB,eAAe,qBACnCS,aAAkBC,oBAClBD,EAAOjD,MAAMmB,QAAU,OAE/C,MACoBqC,EAAU,sDACb,IAEJC,MAAMhB,QAAQC,MACtB,IAvBL,MACYI,OAAOP,iBAAiB,oBAAqBc,QAGjDG,EAAU,0DAqBd,SAASH,EAAkBK,GACvB,MAAM3B,EAAoB4B,KAAKC,MACzB/B,EAAqB,CACvBxC,KAAMqE,EAAMrE,MAAQ,EACpBC,MAAOoE,EAAMpE,OAAS,GAGrBwC,IACDA,EAAkB,IAAKD,IAG3B,MAAMzC,EAAYwC,EACdC,EACAC,EACAC,EACAa,GAGAxD,IACAyD,EAAiBzD,EACjBqD,QAAQoB,IAAI,qBAAsBhB,GAElCD,EAA4Bb,EAC5BD,EAAkBD,GAGtBc,EAAUzD,OAAO2C,EAAoBgB,EACxC,CAED,SAASW,EAAUM,GACf,MAAMR,EAAe9B,SAASgB,eAAe,gBACzCc,IACAA,EAAazC,YAAciD,EAElC,CAQL"}