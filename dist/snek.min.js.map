{"version":3,"file":"snek.min.js","sources":["../src/js/config.js","../src/js/board.js","../src/js/error.js","../src/js/item.js","../src/js/game/direction.js","../src/js/snake.js","../src/js/game/input.js","../src/js/canvas.js","../src/js/game/render.js","../src/js/game/state.js","../src/js/game/game.js","../src/js/main.js"],"sourcesContent":["export const GAME_CONFIG = {\n    BOARD: {\n        CTRL_PANEL_HEIGHT: 50,  // pixels\n        MARGIN_SIZE: 20,  // pixels\n        NUM_STEPS_ACROSS_CANVAS: 30,\n        DEFAULT_BACKGROUND_COLOR: 'white',\n        DEFAULT_BORDER_COLOR: 'darkgreen',\n        TELEPORT_BORDER_COLOR: 'blue',\n        TELEPORT_BACKGROUND_COLOR: '#e2f1fa',  // a light blue\n        FILTERS: {\n            NONE: 'none',\n            PAUSE: 'contrast(1.4) sepia(1)',\n            ENDGAME: 'grayscale(0.8) blur(0.5px)',\n        },\n    },\n\n    SNAKE: {\n        INITIAL_LENGTH: 5,\n        DEFAULT_COLOR: 'lightgreen',\n        DEFAULT_BORDER_COLOR: 'darkgreen',\n        PHASE_BORDER_COLOR: 'violet',\n    },\n\n    ITEM: {\n        FOOD_COLOR: 'red',\n        FOOD_BORDER_COLOR: 'darkred',\n        PHASE_COLOR: 'orchid',\n        PHASE_BORDER_COLOR: 'violet',\n        TELEPORT_COLOR: 'blue',\n        TELEPORT_BORDER_COLOR: 'darkblue',\n        PHASE_SCORE_THRESHOLD: 150,\n        TELEPORT_SCORE_THRESHOLD: 50,\n        BASE_PHASE_PROBABILITY: 0.1,\n        BASE_TELEPORT_PROBABILITY: 0.1,\n        BASE_VOLATILE_FOOD_PROBABILITY: 0.01,\n    },\n\n    GAME: {\n        SCORE_INCREMENT: 10,\n        SCORE_THRESHOLD_FOR_VOLATILE_FOOD: 100,\n    },\n\n    INPUT: {\n        GAME_SPEED__ARROW: 100,     // milliseconds\n        GAME_SPEED__MOTION: 125,    // milliseconds, slow down game since harder with motion controls\n        SWIPE_SENSITIVITY: 10,      // delta of pixels needed to consider touch mvmt a 'swipe'\n        MOTION_SENSITIVITY: 15,     // degree of motion needed to consider a device mvmt as intentional\n    },\n\n    CANVAS: {\n        GAME_TEXT_COLOR: 'gray',\n        HIGH_SCORE_TEXT_COLOR: 'goldenrod',\n        PAUSE_BTN_COLOR: 'darkkhaki',\n        EXCLAMATION_BTN_COLOR: 'darkkhaki',\n        GAME_TEXT_FONT_FAMILY: '\"Saira\", serif',\n        GAME_TEXT_FONT_SIZE: 50,\n    },\n\n    STATE: {\n        LOCAL_STORAGE_KEY_HIGH_SCORE: 'highScore',\n        LOCAL_STORAGE_KEY_GAME_SPEED: 'gameSpeed',\n    },\n\n    ERROR: {\n        // ERROR_MESSAGE_DURATION: 5000,\n        MESSAGE_FONT: '20px Arial',\n        MESSAGE_COLOR: 'red',\n        MESSAGE_BACKGROUND: 'rgba(0, 0, 0, 0.7)',\n    },\n};\n","import { GAME_CONFIG } from './config';\n\nconst { BOARD } = GAME_CONFIG;\n\nconst MOTION_REQUEST_BUTTON_ID = 'motionRequest';\n\n/**\n * Represents the game board.\n */\nexport class Board {\n    /**\n     * @param {HTMLCanvasElement} canvas - canvas element for the game\n     * @param {HTMLElement | null} ctrlPanel - control panel element\n     */\n    constructor(canvas, ctrlPanel) {\n        this._canvas = canvas;\n        this._ctrlPanel = ctrlPanel;\n\n        // 2d drawing context\n        if (!(this.ctx = this._canvas.getContext('2d'))) {\n            throw new Error('2d context not supported or canvas already initialized');\n        }\n\n        this._boardSize = this._calculateBoardSize();\n\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\n        this._ratio = window.devicePixelRatio || 1;\n\n        this._sizeCanvas();\n        this._sizeControlPanel();\n\n        this._width = canvas.width;\n        this._height = canvas.height;\n        this._blockSize = canvas.width / BOARD.NUM_STEPS_ACROSS_CANVAS;\n\n        this._activeFilter = BOARD.FILTERS.NONE;\n        this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\n        this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\n        this._isGlowing = false;\n\n        this.resetFilter();\n\n        // console.log({\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\n        //     'canvas.height': canvas.height, block_size: this._blockSize\n        // })\n    }\n\n    /**\n     * @returns {HTMLCanvasElement}\n     */\n    get canvas() {\n        return this._canvas;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get borderColor() {\n        return this._borderColor;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get isGlowing() {\n        return this._isGlowing;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get activeFilter() {\n        return this._activeFilter;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get width() {\n        return this._width;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get height() {\n        return this._height;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get blockSize() {\n        return this._blockSize;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get ratio() {\n        return this._ratio;\n    }\n\n    /**\n     * Resets the board filter to default.\n     */\n    resetFilter() {\n        this._activeFilter = BOARD.FILTERS.NONE;\n    }\n\n    /**\n     * Sets the board filter for the end game state.\n     */\n    setEndGameFilter() {\n        this._activeFilter = BOARD.FILTERS.ENDGAME;\n    }\n\n    /**\n     * Sets the board filter for the paused game state.\n     */\n    setPauseGameFilter() {\n        this._activeFilter = BOARD.FILTERS.PAUSE;\n    }\n\n    /**\n     * Enters fullscreen mode.\n     */\n    enterFullScreen() {\n        // switch to full screen\n        this._canvas.requestFullscreen().then(function () {\n            try {\n                // lock portrait orientation when going full screen\n                // @ts-ignore\n                screen.lockOrientationUniversal = screen.lockOrientation ||\n                    // @ts-ignore\n                    screen.mozLockOrientation ||\n                    // @ts-ignore\n                    screen.msLockOrientation;\n                // @ts-ignore\n                screen.lockOrientationUniversal('portrait-primary');\n            } catch (e) {\n                // console.log(e);\n            }\n        });\n    }\n\n    /**\n     * Exits fullscreen mode.\n     */\n    exitFullScreen() {\n        document.exitFullscreen();\n    }\n\n    /**\n     * Creates a button in control panel to request motion control permission.\n     * @returns {HTMLButtonElement | null} created button, or null if control panel does not exist\n     */\n    createMotionRequestBtn() {\n        if (!this._ctrlPanel) return null;\n\n        let btn = document.createElement('button');\n        btn.innerHTML = 'Allow Motion Control';\n        btn.setAttribute('id', MOTION_REQUEST_BUTTON_ID);\n        btn.type = 'button';\n        this._ctrlPanel.appendChild(btn);\n        return btn;\n    }\n\n    /**\n     * Gets the motion control request button.\n     */\n    getMotionRequestBtn() {\n        return document.getElementById(MOTION_REQUEST_BUTTON_ID);\n    }\n\n    /**\n     * Removes the motion control request button.\n     */\n    removeMotionRequestBtn() {\n        let btn = this.getMotionRequestBtn();\n        btn?.parentNode?.removeChild(btn);\n    }\n\n    /**\n     * Sets the glow effect on the board.\n     * @param {boolean} shouldGlow - whether the board should glow\n     */\n    setGlow(shouldGlow) {\n        if (shouldGlow === this.isGlowing) return;\n\n        this._isGlowing = shouldGlow;\n\n        if (shouldGlow) {\n            // note: since canvas border doesn't show in fullscreen mode, we tint the background too\n            this._color = BOARD.TELEPORT_BACKGROUND_COLOR;\n            this._borderColor = BOARD.TELEPORT_BORDER_COLOR;\n        } else {\n            this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\n            this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\n        }\n\n        // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\n    }\n\n    /**\n     * Checks if the game needs permission for motion control.\n     * @returns {boolean} true if permission is needed; false otherwise\n     */\n    needsPermission() {\n        return document.getElementById(MOTION_REQUEST_BUTTON_ID) !== null;\n    }\n\n    /**\n     * Calculates the size of the game board.\n     * @returns {number} The calculated board size.\n     * @private\n     */\n    _calculateBoardSize() {\n        // calculate a square board size based on window dimensions and total # of steps across the canvas\n        const availableSpace = Math.min(window.innerWidth, window.innerHeight) - BOARD.CTRL_PANEL_HEIGHT;\n        const gridBlockSize = availableSpace / BOARD.NUM_STEPS_ACROSS_CANVAS;  // find closest number divisible by steps\n        const boardSize = Math.floor(gridBlockSize) * BOARD.NUM_STEPS_ACROSS_CANVAS - BOARD.MARGIN_SIZE;\n\n        // TODO: could implement like below instead - if willing to implement resizing\n        // const maxWidth = window.innerWidth - MARGIN_SIZE;\n        // const maxHeight = window.innerHeight - CTRL_PANEL_HEIGHT - MARGIN_SIZE;\n        // const boardSize = Math.min(maxWidth, maxHeight);\n\n        return boardSize;\n    }\n\n    /**\n     * Sets the size of the canvas.\n     * @private\n     */\n    _sizeCanvas() {\n        this._canvas.style.width = this._boardSize + 'px';\n        this._canvas.style.height = this._boardSize + 'px';\n        this._canvas.width = this._boardSize * this._ratio;\n        this._canvas.height = this._canvas.width;\n    }\n\n    /**\n     * Sets the size of the control panel.\n     * @private\n     */\n    _sizeControlPanel() {\n        if (!this._ctrlPanel) return;\n        this._ctrlPanel.style.width = this._boardSize + 'px';\n        this._ctrlPanel.style.height = BOARD.CTRL_PANEL_HEIGHT + 'px';\n    }\n}\n","import { GAME_CONFIG } from './config';\n\nconst { ERROR } = GAME_CONFIG;\n\n/**\n * Displays an error message on the screen.\n * @param {string} message - error message to display\n * @param {HTMLCanvasElement | HTMLElement | null} canvas - game canvas (if available)\n */\nexport function displayErrorMessage(message, canvas = null) {\n    if (canvas && canvas instanceof HTMLCanvasElement) {\n        displayErrorOnCanvas(message, canvas);\n    } else {\n        displayErrorInDOM(message);\n    }\n}\n\n/**\n * Displays an error message on the canvas.\n * @param {string} message - error message to display\n * @param {HTMLCanvasElement} canvas - game canvas\n * @private\n */\nfunction displayErrorOnCanvas(message, canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        console.error('unable to get 2D context from canvas');\n        displayErrorInDOM(message);\n        return;\n    }\n\n    // save the current canvas state\n    ctx.save();\n\n    // set up the error message style\n    ctx.font = ERROR.MESSAGE_FONT;\n    ctx.fillStyle = ERROR.MESSAGE_BACKGROUND;\n\n    // calculate message width and position\n    const messageWidth = ctx.measureText(message).width + 20; // Add some padding\n    const messageHeight = 30;\n    const messageX = (canvas.width - messageWidth) / 2;\n    const messageY = canvas.height / 2 - messageHeight / 2;\n\n    // draw the background\n    ctx.fillRect(messageX, messageY, messageWidth, messageHeight);\n\n    // draw the error message\n    ctx.fillStyle = ERROR.MESSAGE_COLOR;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(message, canvas.width / 2, canvas.height / 2);\n\n    // restore the canvas state\n    ctx.restore();\n\n    // remove the error message after a set duration\n    // setTimeout(() => {\n    //     ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //     // note: not redrawing the game here as we might not have a valid game state\n    // }, ERROR_MESSAGE_DURATION);\n}\n\n/**\n * Displays an error message in the DOM.\n * @param {string} message - error message to display\n * @private\n */\nfunction displayErrorInDOM(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.position = 'fixed';\n    errorDiv.style.top = '50%';\n    errorDiv.style.left = '50%';\n    errorDiv.style.transform = 'translate(-50%, -50%)';\n    errorDiv.style.backgroundColor = ERROR.MESSAGE_BACKGROUND;\n    errorDiv.style.color = ERROR.MESSAGE_COLOR;\n    errorDiv.style.padding = '15px';\n    errorDiv.style.borderRadius = '5px';\n    errorDiv.style.zIndex = '1000';\n    errorDiv.textContent = message;\n\n    document.body.appendChild(errorDiv);\n\n    // setTimeout(() => {\n    //     document.body.removeChild(errorDiv);\n    // }, ERROR_MESSAGE_DURATION);\n}\n","import { GAME_CONFIG } from './config';\n\nconst { ITEM } = GAME_CONFIG;\n\nexport const PHASE_CLASSNAME = 'Phase';\nexport const TELEPORT_CLASSNAME = 'Teleport';\n\n/**\n * Represents an item that can be consumed by snek in the game.\n */\nexport class Item {\n    /**\n     * @param {import('./board').Board} board - game board\n     * @param {import('./snake').Snake} snake - snek object\n     */\n    constructor(board, snake) {\n        this._x = Number.MIN_SAFE_INTEGER, this._y = Number.MIN_SAFE_INTEGER;\n        this._generate(board, snake);\n    }\n\n    /**\n     * Gets the x-coordinate of the item.\n     * @returns {number} x-coordinate\n     */\n    get x() {\n        return this._x;\n    }\n\n    /**\n     * Gets the y-coordinate of the item.\n     * @returns {number} y-coordinate\n     */\n    get y() {\n        return this._y;\n    }\n\n    /**\n     * Gets the type of the item.\n     * @returns {string} item type\n     */\n    get type() { return 'UNKNOWN_ITEM' }\n\n    /**\n     * Gets the fill color of the item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return '' }\n\n    /**\n     * Gets the border color of the item.\n     * @returns {string} border color\n     */\n    get borderColor() { return '' }\n\n    /**\n     * Generates a new position for the item.\n     * @param {import('./board').Board} board - game board\n     * @param {import('./snake').Snake} snake - snek object\n     * @private\n     */\n    _generate(board, snake) {\n        this._x = this._randomBlock(0, board.width - board.blockSize, board.blockSize);\n        this._y = this._randomBlock(0, board.height - board.blockSize, board.blockSize);\n\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} @returns {void} */ snakeSegment) => {\n            const itemIsOnSnake = snakeSegment.x == this.x && snakeSegment.y == this.y\n            if (itemIsOnSnake) this._generate(board, snake);\n        });\n    }\n\n    /**\n     * Generates a random block position.\n     * @param {number} min - minimum value\n     * @param {number} max - maximum value\n     * @param {number} blockSize - size of each block\n     * @returns {number} random block position\n     * @private\n     */\n    _randomBlock(min, max, blockSize) {\n        // note: round to snap item placement to grid, as defined by blockSize\n        return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\n    }\n}\n\n/**\n * Represents a food item in the game.\n * Food is the basic item that snek consumes to grow and increase the player's score.\n * @extends Item\n */\nexport class Food extends Item {\n\n    /**\n     * Gets the food type.\n     * @returns {string} food type\n     */\n    get type() { return 'FOOD' }\n\n    /**\n     * Gets the fill color of the food.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.FOOD_COLOR }\n\n    /**\n     * Gets the border color of the food.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.FOOD_BORDER_COLOR }\n}\n\n/**\n * Represents a teleport item in the game.\n * Teleport is a power-up that allows snek to pass through the walls of the game board.\n * When consumed, it gives snek the ability to \"wrap around\" the game board once.\n * @extends Item\n */\nexport class Teleport extends Item {\n\n    /**\n     * Gets the teleport type.\n     * @returns {string} teleport type\n     */\n    get type() { return 'TELEPORT' }\n\n    /**\n     * Gets the fill color of the teleport item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.TELEPORT_COLOR }\n\n    /**\n     * Gets the border color of the teleport item.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.TELEPORT_BORDER_COLOR }\n}\n\n/**\n * Represents a phase item in the game.\n * Phase is a power-up that allows snek the ability to pass through its own body once.\n * @extends Item\n */\nexport class Phase extends Item {\n\n    /**\n     * Gets the phase type.\n     * @returns {string} phase type\n     */\n    get type() { return 'PHASE' }\n\n    /**\n     * Gets the fill color of the phase item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.PHASE_COLOR }\n\n    /**\n     * Gets the border color of the phase item.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.PHASE_BORDER_COLOR }\n}\n\nconst ITEM_TYPES = {\n    none: null,\n    food: Food,\n    teleport: Teleport,\n    phase: Phase\n};\n\n/**\n * Options for item selection.\n * @typedef {Object} ItemSelectionOptions\n * @property {boolean} [alwaysReturnItem=false] - If true, always returns an item (never null)\n * @property {boolean} [reducePowerUpProbability=false] - If true, reduces the probability of power-ups\n */\n\n/**\n * Randomizes the selection of an item type based on game conditions.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean; }} powerUps - available power-ups and whether eqipped\n * @param {ItemSelectionOptions} [options={}] - options for item selection\n * @returns {(new (board: import('./board').Board, item: import('./snake').Snake) => Item)} selected item class or null\n */\nexport function selectRandomItem(score, powerUps, options = {}) {\n    const { alwaysReturnItem = false, reducePowerUpProbability = false } = options;\n\n    const itemChances = calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n\n    // console.log(itemChances);\n\n    const selectedItemType = pickItem(itemChances);\n    return ITEM_TYPES[selectedItemType];\n}\n\n/**\n * Picks an item based on a weighted random selection algorithm.\n * @param {{ [x: string]: any; }} chances - chances for each item\n * @returns {string} selected item key\n */\nfunction pickItem(chances) {\n    const random = Math.random();  // random value to use for selection\n    let cumulativeProbability = 0;\n\n    for (const [item, probability] of Object.entries(chances)) {\n        cumulativeProbability += probability;\n        if (random <= cumulativeProbability) {\n            return item;\n        }\n    }\n\n    // this should never happen if probabilities sum to 1\n    throw new Error('item selection failed');\n}\n\n/**\n * Calculates probability of generation for each item type.\n * Provides ability to balance the game by making power-ups less frequent in certain situations.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {{ [x: string]: number }} probabilities for each item type\n */\nfunction calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    // note: a power-up always drops AT its score threshold; afterwards drops get random\n    const teleportProb = calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n    const phaseProb = calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n\n    let foodProb, noItemProb;\n    if (alwaysReturnItem) {\n        foodProb = 1 - teleportProb - phaseProb;\n        noItemProb = 0;\n    } else {\n        foodProb = ITEM.BASE_VOLATILE_FOOD_PROBABILITY;\n        noItemProb = 1 - teleportProb - phaseProb - foodProb;\n    }\n\n    const probabilities = {\n        none: noItemProb,\n        food: foodProb,\n        teleport: teleportProb,\n        phase: phaseProb,\n    };\n\n    const totalProb = Object.values(probabilities).reduce((sum, prob) => sum + prob, 0);\n    if (Math.abs(totalProb - 1) > 1e-10) {  // allow for small floating-point errors\n        throw new Error(`Item probabilities must sum to 1. Current sum: ${totalProb}`);\n    }\n\n    return probabilities;\n}\n\n/**\n * Calculates the probability of generating a Teleport item.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {number} probability of generating a Teleport item\n */\nfunction calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    if (score === ITEM.TELEPORT_SCORE_THRESHOLD && alwaysReturnItem) return 1;\n    if (score > ITEM.TELEPORT_SCORE_THRESHOLD && !powerUps[TELEPORT_CLASSNAME]) {\n        return reducePowerUpProbability ? ITEM.BASE_TELEPORT_PROBABILITY / 10 : ITEM.BASE_TELEPORT_PROBABILITY;\n    }\n    return 0;\n}\n\n/**\n * Calculates the probability of generating a Phase item.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {number} probability of generating a Phase item\n */\nfunction calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    if (score === ITEM.PHASE_SCORE_THRESHOLD && alwaysReturnItem) return 1;\n    if (score > ITEM.PHASE_SCORE_THRESHOLD && !powerUps[PHASE_CLASSNAME]) {\n        return reducePowerUpProbability ? ITEM.BASE_PHASE_PROBABILITY / 10 : ITEM.BASE_PHASE_PROBABILITY;\n    }\n    return 0;\n}\n","export const DIRECTION_LEFT = 'left';\nexport const DIRECTION_RIGHT = 'right';\nexport const DIRECTION_UP = 'up';\nexport const DIRECTION_DOWN = 'down';\n\n/**\n * @typedef {Object} Direction\n * @property {number} dx - change in x direction\n * @property {number} dy - change in y direction\n */\n\n/**\n * Object mapping direction strings to their corresponding Direction objects.\n * @type {Object.<string, Direction>}\n */\nexport const DIRECTIONS = {\n    [DIRECTION_LEFT]:  { dx: -1, dy: 0 },\n    [DIRECTION_RIGHT]: { dx: 1,  dy: 0 },\n    [DIRECTION_UP]:    { dx: 0,  dy: -1 },\n    [DIRECTION_DOWN]:  { dx: 0,  dy: 1 },\n};\n\n/**\n * Gets the Direction object for a given direction string.\n * @param {string} direction - direction string\n * @returns {Direction | null} Direction object or null if not found\n */\nexport function getDirection(direction) {\n    return DIRECTIONS[direction.toLowerCase()] || null;\n}\n\n/**\n * Checks if two directions are opposite to each other.\n * @param {Direction} dir1 - first direction\n * @param {Direction} dir2 - second direction\n * @returns {boolean} true if the directions are opposite; false otherwise\n */\nexport function isOppositeDirection(dir1, dir2) {\n    return dir1.dx === -dir2.dx && dir1.dy === -dir2.dy;\n}\n\n/**\n * Normalizes a direction vector to have a magnitude of 1.\n * @param {number} dx - x component of the direction\n * @param {number} dy - y component of the direction\n * @returns {Direction} normalized direction\n */\nexport function normalizeDirection(dx, dy) {\n    const magnitude = Math.max(Math.abs(dx), Math.abs(dy));\n    if (magnitude === 0) {\n        return { dx: 0, dy: 0 };\n    }\n    return { dx: dx / magnitude, dy: dy / magnitude };\n}\n","import { GAME_CONFIG } from './config';\nimport { getDirection, isOppositeDirection, normalizeDirection } from './game/direction';\nimport { PHASE_CLASSNAME, Phase, TELEPORT_CLASSNAME, Teleport } from './item';\n\nconst { SNAKE } = GAME_CONFIG;\n\n/**\n * Represents snek in the game.\n */\nexport class Snake {\n\n    /**\n     * @param {number} boardWidth - width of the game board\n     * @param {number} boardHeight - height of the game board\n     * @param {number} blockSize - size of each block on the board\n     */\n    constructor(boardWidth, boardHeight, blockSize) {\n        this._blockSize = blockSize;\n\n        // calculate initial position (center of the board)\n        const centerX = Math.floor(boardWidth / (2 * blockSize)) * blockSize;\n        const centerY = Math.floor(boardHeight / (2 * blockSize)) * blockSize;\n\n        this._body = this._createBody(centerX, centerY, SNAKE.INITIAL_LENGTH);\n\n        // set initial velocity\n        this._dx = this._dxAtPause = blockSize;\n        this._dy = this._dyAtPause = 0;\n        this._isChangingDirection = false;\n\n        // set initial appearance\n        this._color = SNAKE.DEFAULT_COLOR;\n        this._borderColor = SNAKE.DEFAULT_BORDER_COLOR;\n        this._isGlowing = false;\n\n        this.powerUps = {[TELEPORT_CLASSNAME]: false, [PHASE_CLASSNAME]: false};\n    }\n\n    /**\n     * Creates the body of snek.\n     * @param {number} centerX - x-coordinate of the center of the board\n     * @param {number} centerY - y-coordinate of the center of the board\n     * @param {number} length - number of parts composing snek body\n     * @returns {{ x: number; y: number; }[]} created snek body\n     * @private\n     */\n    _createBody(centerX, centerY, length) {\n        const body = [];\n        for (let i = 0; i < length; i++) {\n            body.push({\n                x: centerX - i * this._blockSize,\n                y: centerY\n            });\n        }\n        return body;\n    }\n\n    /**\n     * Gets snek's fill color.\n     * @returns {string} fill color\n     */\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * Gets snek's border color.\n     * @returns {string} border color\n     */\n    get borderColor() {\n        return this._borderColor;\n    }\n\n    /**\n     * Gets whether snek is glowing.\n     * @returns {boolean} true if snek is glowing; false otherwise\n     */\n    get isGlowing() {\n        return this._isGlowing;\n    }\n\n    /**\n     * Gets the position of snek's head.\n     * @returns {{ x: number; y: number }} head position\n     */\n    getHeadPosition() {\n        return { ...this._body[0] };\n    }\n\n    /**\n     * Moves snek in its current direction.\n     * @param {boolean} growing whether snek should grow\n     */\n    move(growing = false) {\n        this._advanceHead();\n        if (!growing) {\n            this._advanceTail();\n        }\n    }\n\n    /**\n     * Advances snek's head.\n     */\n    _advanceHead() {\n        // note: round to snap snek movement to grid, as defined by blockSize\n        const head = {\n            x: Math.round((this.getHeadPosition().x + this._dx) / this._blockSize) * this._blockSize,\n            y: Math.round((this.getHeadPosition().y + this._dy) / this._blockSize) * this._blockSize\n        };\n        this._body.unshift(head);\n\n        this._isChangingDirection = false;\n\n        // TODO: add to control panel\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\n    }\n\n    /**\n     * Advances snek's tail (removes the last segment).\n     */\n    _advanceTail() {\n        this._body.pop();\n    }\n\n    /**\n     * Teleports snek's head to a new position.\n     * Useful for unit testing.\n     * @param {{ x: number; y: number }} newPosition new position for the head\n     */\n    teleportHead(newPosition) {\n        this._body[0] = { ...newPosition };\n    }\n\n    /**\n     * Executes a callback for each segment of snek's body.\n     * @param {(segment: { x: number; y: number }, index: number) => void} callback\n     */\n    forEachSegment(callback) {\n        this._body.forEach((segment, index) => callback({ ...segment }, index));\n    }\n\n    /**\n     * Pauses snek's movement.\n     */\n    pause() {\n        // save velocity at pause\n        this._dxAtPause = this._dx;\n        this._dyAtPause = this._dy;\n        // set velocity to 0\n        this._dx = this._dy = 0;\n    }\n\n    /**\n     * Resumes snek's movement after a pause.\n     */\n    unpause() {\n        // set velocity to state before pause\n        this._dx = this._dxAtPause;\n        this._dy = this._dyAtPause;\n    }\n\n    /**\n     * Checks if snek has eaten an item.\n     * @param {import('./item').Item} item - item to check\n     * @returns {boolean} true if snek has eaten the item; false otherwise\n     */\n    didEat(item) {\n        let head = this.getHeadPosition();\n        return head.x === item.x && head.y === item.y;\n    }\n\n    /**\n     * Equips snek with a power-up\n     * @param {import('./item').Item} item - power-up item to equip\n     */\n    equip(item) {\n        if (item instanceof Teleport) this.powerUps[TELEPORT_CLASSNAME] = true;\n        if (item instanceof Phase) {\n            this.powerUps[PHASE_CLASSNAME] = true;\n            this.setGlow(true);\n        }\n    }\n\n    /**\n     * Sets the glow effect on snek.\n     * @param {boolean} shouldGlow - whether snek should glow\n     */\n    setGlow(shouldGlow) {\n        if (shouldGlow === this.isGlowing) return;\n\n        this._isGlowing = shouldGlow;\n\n        this._borderColor = shouldGlow ? SNAKE.PHASE_BORDER_COLOR : SNAKE.DEFAULT_BORDER_COLOR;\n\n        // console.log(`[snek] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\n    }\n\n    /**\n     * Checks if snek has collided with itself or the board boundaries.\n     * @param {number} boardWidth - width of the game board\n     * @param {number} boardHeight - height of the game board.\n     * @param {number} blockSize - size of each block on the board\n     * @returns {boolean} true if snek has collided; false otherwise\n     */\n    didCollide(boardWidth, boardHeight, blockSize) {\n        let head = this.getHeadPosition();\n\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\n        const collidesWithSelf = this._body.slice(4).some(segment => segment.x === head.x && segment.y === head.y);\n        if (collidesWithSelf) {\n            if (this.powerUps[PHASE_CLASSNAME]) {\n                // if phase powerup is equipped, decrement, ignore collision, and continue game\n                this.powerUps[PHASE_CLASSNAME] = false;\n                this.setGlow(false);\n\n                console.log('snek phased!');\n                return false;\n            }\n            return true;\n        }\n\n        // check for collisions with walls\n        const hitLeftWall = head.x < 0;\n        const hitRightWall = head.x + blockSize > boardWidth;\n        const hitTopWall = head.y < 0;\n        const hitBottomWall = head.y + blockSize > boardHeight;\n\n        const hitWall = hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\n\n        if (!hitWall) { return false; }\n\n        // if teleport power is equipped, decrement, teleport, and continue game\n        if (this.powerUps[TELEPORT_CLASSNAME]) {\n            this.powerUps[TELEPORT_CLASSNAME] = false;\n\n            // teleport to opposite side of the board\n            if (hitLeftWall) {\n                this.teleportHead({x: boardWidth - blockSize, y: head.y});\n            } else if (hitRightWall) {\n                this.teleportHead({x: 0, y: head.y});\n            } else if (hitTopWall) {\n                this.teleportHead({x: head.x, y: boardHeight - blockSize});\n            } else if (hitBottomWall) {\n                this.teleportHead({x: head.x, y: 0});\n            }\n\n            console.log('snek teleported!');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Changes the direction of snek.\n     * @param {string} direction - new direction\n     * @returns {boolean} true if snek direction was changed; false otherwise\n     */\n    changeDirection(direction) {\n        // prevent changing direction multiple times before the next move\n        if (this._isChangingDirection) return false;\n\n        const newDirection = getDirection(direction);\n        if (!newDirection) return false;\n\n        const currentDirection = this._getCurrentDirection();\n        // prevent snek from moving back on itself\n        if (isOppositeDirection(currentDirection, newDirection)) return false;\n\n        this._setNewDirection(newDirection);\n        return true;\n    }\n\n    /**\n     * Gets the current direction of snek.\n     * @returns {import('./game/direction').Direction} current direction\n     * @private\n     */\n    _getCurrentDirection() {\n        // normalize the current velocity to get direction\n        return normalizeDirection(this._dx, this._dy);\n    }\n\n    /**\n     * Sets a new direction for snek.\n     * @param {import('./game/direction').Direction} direction - new direction\n     * @private\n     */\n    _setNewDirection(direction) {\n        this._isChangingDirection = true;\n        this._dx = direction.dx * this._blockSize;\n        this._dy = direction.dy * this._blockSize;\n    }\n}\n","import { GAME_CONFIG } from '../config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from './direction';\n\nconst { INPUT } = GAME_CONFIG;\n\nconst SPACE_KEY = 'Space';\nconst LEFT_KEY = 'ArrowLeft';\nconst RIGHT_KEY = 'ArrowRight';\nconst UP_KEY = 'ArrowUp';\nconst DOWN_KEY = 'ArrowDown';\n\n/**\n * Handles user input for the game.\n */\nexport class InputHandler {\n    /**\n     * @param {import('./game').Game} game - game instance\n     */\n    constructor(game) {\n        this._game = game;\n        this._motionAvailable = null;\n        this._deviceOrientation = {\n            beta: 0,  // rotation around x-axis (-180 to 180)\n            gamma: 0  // rotation around y-axis (-90 to 90)\n        };\n        this._touchStart = { x: 0, y: 0 };\n        this._touchEnd = { x: 0, y: 0 };\n        this._boundMethods = this._bindMethods();\n    }\n\n    /**\n     * Manages all control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     */\n    manageGameControls(shouldAdd) {\n        this._manageKeyboardControls(shouldAdd);\n        this._manageTouchControls(shouldAdd);\n        this._manageVisibilityControl(shouldAdd);\n        this._managePauseControl(shouldAdd);\n        this._manageFullscreenControl(shouldAdd);\n        this._manageDeviceOrientationControl(shouldAdd);\n    }\n\n    /**\n     * Manages controls for restarting the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     */\n    manageRestartControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        if (shouldAdd && !this._motionAvailable) {\n            // remove existing keyboard listener to avoid conflicts with new restart controls\n            document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\n        }\n        document[action]('keydown', this._boundMethods.handleRestart);\n        document[action]('click', this._boundMethods.handleRestart);\n        document[action]('touchend', this._boundMethods.handleRestart);\n    }\n\n    /**\n     * Creates and returns an object containing all event handler methods bound to the current instance of InputHandler.\n     * Ensures they always have the correct `this` context when called, regardless of how they are invoked.\n     * @returns {Object} object containing bound method references\n     * @private\n     */\n    _bindMethods() {\n        return {\n            handleKeyInput: this._handleKeyInput.bind(this),\n            handleDeviceMovement: this._handleDeviceMovement.bind(this),\n            handleVisibilityChange: this._handleVisibilityChange.bind(this),\n            requestDeviceOrientation: this._requestDeviceOrientation.bind(this),\n            togglePause: this._game.togglePause.bind(this._game),\n            enterFullScreen: this._game.board.enterFullScreen.bind(this._game.board),\n            handleTouchStart: this._handleTouchStart.bind(this),\n            handleTouchEnd: this._handleTouchEnd.bind(this),\n            handleRestart: this._handleRestart.bind(this)\n        };\n    }\n\n    /**\n     * Manages keyboard control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageKeyboardControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('keydown', this._boundMethods.handleKeyInput);\n    }\n\n    /**\n     * Manages touch control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageTouchControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        this._game.board.canvas[action]('touchstart', this._boundMethods.handleTouchStart);\n        this._game.board.canvas[action]('touchend', this._boundMethods.handleTouchEnd);\n    }\n\n    /**\n     * Set up visibility change control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageVisibilityControl(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('visibilitychange', this._boundMethods.handleVisibilityChange, false);\n    }\n\n    /**\n     * Set up pause control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _managePauseControl(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('click', this._boundMethods.togglePause);\n    }\n\n    /**\n     * Set up fullscreen control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageFullscreenControl(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('dblclick', this._boundMethods.enterFullScreen);\n        // this._manageTouchControls(shouldAdd); TODO: needed?\n    }\n\n    /**\n     * Set up device orientation event listeners for the game, if available.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageDeviceOrientationControl(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n\n        if (typeof DeviceOrientationEvent !== 'undefined') {\n            if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n                if (shouldAdd) {\n                    let btn = this._game.board.createMotionRequestBtn();\n                    if (btn) {\n                        btn.addEventListener('click', this._boundMethods.requestDeviceOrientation);\n\n                        // give user time to grant permission\n                        this._game.togglePause();\n                    }\n                } else {\n                    let btn = this._game.board.getMotionRequestBtn();\n                    if (btn) {\n                        btn.removeEventListener('click', this._boundMethods.requestDeviceOrientation);\n                    }\n                }\n            } else {\n                window[action]('deviceorientation', this._boundMethods.handleDeviceMovement);\n            }\n        }\n    }\n\n    /**\n     * Handles keyboard input.\n     * @param {KeyboardEvent} event - keyboard event\n     * @private\n     */\n    _handleKeyInput(event) {\n        const keyCommands = {\n            [LEFT_KEY]: new MoveCommand(DIRECTION_LEFT),\n            [RIGHT_KEY]: new MoveCommand(DIRECTION_RIGHT),\n            [UP_KEY]: new MoveCommand(DIRECTION_UP),\n            [DOWN_KEY]: new MoveCommand(DIRECTION_DOWN),\n            [SPACE_KEY]: new PauseCommand()\n        };\n\n        const command = keyCommands[event.code];\n        if (command) {\n            if (this._motionAvailable === null && !this._game.state._ended) {\n                console.log('key controls activated');\n            }\n\n            // disable motion control when keyboard is used\n            // (having both keyboard and motion event listeners makes the game less responsive)\n            this._disableMotionControl();\n\n            command.execute(this._game);\n        }\n    }\n\n    /**\n     * Handles restart events triggered by key press, click, or touch.\n     * @param {KeyboardEvent | MouseEvent | TouchEvent} ev - event object\n     */\n    _handleRestart(ev) {\n        if ((ev instanceof KeyboardEvent && ev.code === SPACE_KEY) ||\n            ev.type === 'click' ||\n            ev.type === 'touchend') {\n            this._game.restart();\n        }\n    }\n\n    /**\n     * Handles device motion input.\n     * @param {DeviceOrientationEvent} event - device orientation event\n     * @private\n     */\n    _handleDeviceMovement(event) {\n        const currentOrientation = {\n            beta: event.beta || 0,\n            gamma: event.gamma || 0\n        }\n\n        const orientationChange = {\n            beta: this._deviceOrientation.beta - currentOrientation.beta,\n            gamma: this._deviceOrientation.gamma - currentOrientation.gamma\n        }\n\n        // check if this is the first significant movement detected\n        // used to determine when to switch from keyboard to motion controls\n        if (this._motionAvailable === null && this._isSignificantMotion(orientationChange)) {\n            this._enableMotionControl();\n\n            const direction = this._getDirectionFromOrientation(orientationChange);\n            if (direction) {\n                let command = new MoveCommand(direction);\n                command.execute(this._game);\n                this._deviceOrientation = currentOrientation;\n            }\n        }\n    }\n\n    /**\n     * Determines if a change in device orientation is significant enough to trigger a direction change.\n     * Filters out small, unintentional device movements so we respond only to deliberate motions.\n     * @param {Object} orientationChange - change in device orientation\n     * @param {number} orientationChange.beta - change in beta (x-axis rotation) in degrees\n     * @param {number} orientationChange.gamma - change in gamma (y-axis rotation) in degrees\n     * @returns {boolean} true if the motion is considered significant; false otherwise\n     * @private\n     */\n    _isSignificantMotion(orientationChange) {\n        return Math.abs(orientationChange.beta) > INPUT.MOTION_SENSITIVITY ||\n               Math.abs(orientationChange.gamma) > INPUT.MOTION_SENSITIVITY;\n    }\n\n    /**\n     * Determine direction based on orientation change.\n     * @param {{ beta: number, gamma: number }} orientationChange - the change in device orientation\n     * @returns {string | null} determined direction or null\n     * @private\n     */\n    _getDirectionFromOrientation(orientationChange) {\n        if (Math.abs(orientationChange.beta) > Math.abs(orientationChange.gamma)) {\n            if (orientationChange.beta < -INPUT.MOTION_SENSITIVITY) {\n                return DIRECTION_DOWN;\n            } else if (orientationChange.beta > INPUT.MOTION_SENSITIVITY) {\n                return DIRECTION_UP;\n            }\n        } else {\n            if (orientationChange.gamma < -INPUT.MOTION_SENSITIVITY) {\n                return DIRECTION_RIGHT;\n            } else if (orientationChange.gamma > INPUT.MOTION_SENSITIVITY) {\n                return DIRECTION_LEFT;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Handles visibility change of the document.\n     * @private\n     */\n    _handleVisibilityChange() {\n        if (document.hidden && !this._game.state.paused) {\n            this._game.togglePause();\n        }\n    }\n\n    /**\n     * Request device orientation permission.\n     * @private\n     */\n    _requestDeviceOrientation() {\n        // iOS 13+ requires permission\n        DeviceOrientationEvent.requestPermission()\n            .then(response => {\n                if (response === 'granted') {\n                    this._enableMotionControl();\n                }\n            })\n            .catch(console.error);\n    }\n\n    /**\n     * Enables motion control for the game.\n     * @private\n     */\n    _enableMotionControl() {\n        document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\n        window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n\n        this._game.board.removeMotionRequestBtn();\n        this._game.state.setSpeed(INPUT.GAME_SPEED__MOTION);\n        this._motionAvailable = true;\n\n        console.log('motion controls activated');\n    }\n\n    /**\n     * Disables motion control for the game.\n     * @private\n     */\n    _disableMotionControl() {\n        this._game.board.removeMotionRequestBtn();\n        window.removeEventListener('deviceorientation', this._handleDeviceMovement);\n        this._game.state.setSpeed(INPUT.GAME_SPEED__ARROW);\n        this._motionAvailable = false;\n    }\n\n    /**\n     * Handles the touch start event.\n     * Records the initial Y position of the touch.\n     * @param {TouchEvent} ev - touch start event\n     * @private\n     */\n    _handleTouchStart(ev) {\n        ev.preventDefault();\n\n        const firstTouch = ev.changedTouches[0];\n        // console.log({\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\n        // });\n\n        this._touchStart = { x: firstTouch.screenX, y: firstTouch.screenY };\n    }\n\n    /**\n     * Handles the touch end event.\n     * Records the final Y position of the touch and calls handleSwipeGesture.\n     * @param {TouchEvent} ev - touch end event\n     * @private\n     */\n    _handleTouchEnd(ev) {\n        ev.preventDefault();\n\n        const firstTouch = ev.changedTouches[0];\n        // console.log({\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\n        // });\n\n        this._touchEnd = { x: firstTouch.screenX, y: firstTouch.screenY };\n\n        this._handleSwipeGesture();\n    }\n\n    /**\n     * Handles the gesture based on the swipe direction.\n     * Enters fullscreen on upward swipe, exits fullscreen on downward swipe,\n     * restarts the game if it has ended, or toggles pause otherwise.\n     * @private\n     */\n    _handleSwipeGesture() {\n        if (this._touchStart.y - this._touchEnd.y > INPUT.SWIPE_SENSITIVITY) {\n            // console.log(`swiped UP ${downY-upY}px`);\n            this._game.board.enterFullScreen();\n        } else if (this._touchEnd.y - this._touchStart.y > INPUT.SWIPE_SENSITIVITY) {\n            // console.log(`swiped DOWN ${upY-downY}px`);\n            this._game.board.exitFullScreen();\n        } else if (this._game.state.ended) {\n            this._game.restart();\n        } else {\n            // console.log(`togglePause from handleGesture`);\n            this._game.togglePause();\n        }\n    }\n}\n\n/**\n * Represents a command to pause the game.\n */\nclass PauseCommand {\n\n    /**\n     * Executes the pause command.\n     * @param {import('./game').Game} game - game instance\n     */\n    execute(game) {\n        game.togglePause();\n    }\n}\n\n/**\n * Represents a command to move snek.\n */\nclass MoveCommand {\n\n    /**\n     * @param {string} direction - direction to move\n     */\n    constructor(direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * Executes the move command.\n     * @param {import('./game').Game} game - game instance\n     */\n    execute(game) {\n        game.snake.changeDirection(this.direction);\n    }\n}\n","import { GAME_CONFIG } from './config';\n\nconst { CANVAS } = GAME_CONFIG;\n\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\n\n/**\n * A fake \"context manager\" for pixel sharpness.\n * https://stackoverflow.com/a/8696641\n * @param {CanvasRenderingContext2D} ctx - canvas rendering context\n * @param {() => void} cb - callback function to execute within the context\n */\nfunction withStraddle(ctx, cb) {\n    const offset = 0.5;\n\n    try {\n        // turn on 'straddle' trick to avoid blurriness\n        ctx.translate(offset, offset);\n        cb();\n    } finally {\n        // turn off 'straddle' trick to avoid blurriness\n        ctx.translate(-offset, -offset);\n    }\n}\n\n/**\n * Draws the game board and background.\n * @param {import('./game/game').Game} game - game object\n */\nexport function drawGame(game) {\n    let board = game.board;\n    let ctx = board.ctx;\n\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        ctx.filter = board.activeFilter;\n\n        // set border and background colors\n        ctx.fillStyle = board.color;\n        if (board.isGlowing) {\n            // note: strokeRect doesn't do a good job of bordering the canvas,\n            // so we fall back to CSS styling\n\n            // https://stackoverflow.com/a/5670984\n            board.canvas.style.border = 'none'\n            board.canvas.style.outline = `${board.borderColor} dashed thin`;\n            board.canvas.style.boxShadow = `0 0 10px ${board.color}`;\n            board.canvas.style.transition = 'box-shadow linear 1s';\n        } else {\n            board.canvas.style.border = `2px solid ${board.borderColor}`;\n            board.canvas.style.outline = 'none';\n            board.canvas.style.boxShadow = 'none';\n            board.canvas.style.transition = 'box-shadow linear 0.5s';\n        }\n\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\n\n        if (game.state.paused) {\n            let useExclamation = board.needsPermission();\n\n            // since filters don't work on iOS safari, we need another visual aid\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\n            // or exclamation triangle icon if we still need permissions\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\n            ctx.font = (CANVAS.GAME_TEXT_FONT_SIZE * board.ratio) + 'px \"bootstrap-icons\"';\n            ctx.fillStyle = useExclamation ? CANVAS.EXCLAMATION_BTN_COLOR : CANVAS.PAUSE_BTN_COLOR;\n            ctx.fillText(String.fromCharCode(\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\n            ), 30 * board.ratio, 50 * board.ratio, board.canvas.width);\n        }\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws snek on the game board.\n * @param {import('./snake').Snake} snake - snek object\n * @param {import('./board').Board} board - game board\n */\nexport function drawSnake(snake, board) {\n    const ctx = board.ctx;\n\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        if (snake.isGlowing) {\n            // https://stackoverflow.com/a/43676108\n            ctx.lineCap = 'round';\n            ctx.shadowBlur = 18;\n            ctx.shadowColor = snake.color;\n        }\n\n        ctx.fillStyle = snake.color;\n        ctx.strokeStyle = snake.borderColor;\n\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} */ segment) => {\n            ctx.fillRect(segment.x, segment.y, board.blockSize, board.blockSize);\n            ctx.strokeRect(segment.x, segment.y, board.blockSize, board.blockSize);\n        });\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws an item on the game board.\n * @param {import('./item').Item} item - item object\n * @param {import('./board').Board} board - game board\n */\nexport function drawItem(item, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        ctx.fillStyle = item.fillColor;\n        ctx.strokeStyle = item.borderColor;\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws the current score on the game board.\n * @param {number} score - current score\n * @param {import('./board').Board} board - game board\n */\nexport function drawScore(score, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\n    ctx.fillText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) - ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\n\n    ctx.restore();\n}\n\n/**\n * Draws the high score on the game board.\n * @param {number} score - high score\n * @param {import('./board').Board} board - game board\n */\nexport function drawHighScore(score, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.strokeStyle = CANVAS.HIGH_SCORE_TEXT_COLOR;\n    ctx.strokeText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) + ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\n\n    ctx.restore();\n}\n\n/**\n * Draws the game over message on the game board.\n * @param {import('./board').Board} board - game board\n */\nexport function drawGameOver(board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\n\n    ctx.restore();\n}\n","import * as defaultCanvas from '../canvas';\n\n// fn to create render functions with canvas as injected dependency\nexport function createRenderFunctions(canvas = defaultCanvas) {\n    /**\n     * Renders the current game state.\n     * @param {import('./game').Game} game - game object to render\n     */\n    function renderGame(game) {\n        canvas.drawGame(game);\n        canvas.drawScore(game.state.score, game.board);\n        canvas.drawHighScore(game.state.highScore, game.board);\n        canvas.drawItem(game.item, game.board);\n        canvas.drawSnake(game.snake, game.board);\n    }\n\n    /**\n     * Renders the game over state.\n     * @param {import('./game').Game} game - game object to render\n     */\n    function renderGameOver(game) {\n        game.board.setEndGameFilter();\n        canvas.drawGame(game);\n        canvas.drawItem(game.item, game.board);\n        canvas.drawSnake(game.snake, game.board);\n        canvas.drawGameOver(game.board);\n    }\n\n    return { renderGame, renderGameOver };\n}\n\n// export the default render functions\nconst { renderGame, renderGameOver } = createRenderFunctions();\nexport { renderGame, renderGameOver };\n","import { GAME_CONFIG } from '../config';\n\nconst { INPUT, STATE } = GAME_CONFIG;\n\n/**\n * Represents the state of the game.\n */\nexport class GameState {\n\n    constructor() {\n        // states\n        this._paused = false;\n        this._ended = false;\n\n        // values\n        this._score = 0;\n        this._highScore = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, 0);\n        this._speed = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, INPUT.GAME_SPEED__ARROW);\n    }\n\n    /**\n     * Gets the speed of the game, aka time between frame updates, in milliseconds.\n     * @returns {number} game speed\n     */\n    get speed() {\n        return this._speed;\n    }\n\n    /**\n     * Gets the current score of the game.\n     * @returns {number} current score\n     */\n    get score() {\n        return this._score;\n    }\n\n    /**\n     * Gets the high score of all games.\n     * @returns {number} high score\n     */\n    get highScore() {\n        return this._highScore;\n    }\n\n    /**\n     * Gets whether or not the game is paused.\n     * @returns {boolean} true if game is paused; false otherwise\n     */\n    get paused() {\n        return this._paused;\n    }\n\n    /**\n     * Gets whether or not the game has ended.\n     * @returns {boolean} true if game has ended; false otherwise\n     */\n    get ended() {\n        return this._ended;\n    }\n\n    /**\n     * Updates the current score.\n     * @param {number} increment - amount to increase the score by\n     */\n    updateScore(increment) {\n        this._score += increment;\n    }\n\n    /**\n     * Updates the high score if the current score is higher.\n     */\n    updateHighScore() {\n        if (this.score > this.highScore) {\n            this._highScore = this.score;\n            this._setItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, this.score);\n            // TODO: add clearing the high score to control panel\n        }\n    }\n\n    /**\n     * Sets the game speed.\n     * @param {number} speed - new game speed to use\n     */\n    setSpeed(speed) {\n        if (typeof speed !== 'number' || isNaN(speed)) {\n            return;\n        }\n        this._speed = Math.max(0, Math.round(speed));\n    }\n\n    /**\n     * Toggles the pause state of the game.\n     */\n    togglePause() {\n        this._paused = !this.paused;\n    }\n\n    /**\n     * Ends the game and saves the current game speed.\n     */\n    endGame() {\n        this._ended = true;\n        this._setItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, this.speed);\n    }\n\n    /**\n     * Safely gets an item from localStorage.\n     * @param {string} key - The key to retrieve from localStorage\n     * @param {*} defaultValue - The default value to return if retrieval fails\n     * @returns {*} The value from localStorage or the default value\n     * @private\n     */\n    _getItemSafely(key, defaultValue) {\n        try {\n            const value = localStorage.getItem(key);\n            return value !== null ? JSON.parse(value) : defaultValue;\n        } catch (error) {\n            console.warn(`Error reading from localStorage: ${error.message}`);\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Safely sets an item in localStorage.\n     * @param {string} key - The key to set in localStorage\n     * @param {*} value - The value to set\n     * @private\n     */\n    _setItemSafely(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n        } catch (error) {\n            console.warn(`Error writing to localStorage: ${error.message}`);\n        }\n    }\n}\n","import { Board } from '../board';\nimport { GAME_CONFIG } from '../config';\nimport { displayErrorMessage } from '../error';\nimport { Food, Item, Phase, TELEPORT_CLASSNAME, Teleport, selectRandomItem } from '../item';\nimport { Snake } from '../snake';\nimport { InputHandler } from './input';\nimport { renderGame, renderGameOver } from './render';\nimport { GameState } from './state';\n\nconst { GAME } = GAME_CONFIG;\n\nconst CANVAS_ID = 'gameCanvas';\nconst CONTROL_PANEL_ID = 'controlPanel';\n\n/**\n * Represents the main game logic and state.\n */\nexport class Game {\n\n    /**\n     * @param {Board} board - game board\n     * @param {Snake} snake - snek\n     * @param {Item} item - current game item\n     */\n    constructor(board, snake, item) {\n        this.board = board;\n        this.snake = snake;\n        this.item = item;\n\n        this.state = new GameState();\n        this.input = new InputHandler(this);\n\n        this._lastUpdateTimestamp = 0;\n    }\n\n    /**\n     * Runs the game loop.\n     * @param {DOMHighResTimeStamp} now - current timestamp\n     */\n    run(now) {\n        if (this._shouldUpdateFrame(now)) {\n            this._updateFrame();\n            if (this.state._ended) {\n                renderGameOver(this);\n                return;\n            } else {\n                renderGame(this);\n            }\n        }\n\n        // run game loop again\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    /**\n     * Toggles pause state of the game.\n     */\n    togglePause() {\n        this.state.togglePause();\n\n        if (this.state.paused) {\n            this.snake.pause();\n            this.board.setPauseGameFilter();\n        } else {\n            this.snake.unpause();\n            this.board.resetFilter();\n        }\n\n        // TODO: pause/unpause any game sounds\n        // this.audio.togglePause();\n\n        console.log(`game ${this.state.paused ? 'paused' : 'resumed'}`);\n    }\n\n    /**\n     * Restarts the game.\n     */\n    restart() {\n        this.input.manageRestartControls(false);\n        console.log('game restarted');\n        runGame();\n    }\n\n    /**\n     * Determines if the current frame of the game loop should be updated.\n     * @param {DOMHighResTimeStamp} now - current timestamp\n     * @returns {boolean} true if the frame should update; false otherwise\n     * @private\n     */\n    _shouldUpdateFrame(now) {\n        if (now - this._lastUpdateTimestamp >= this.state.speed) {\n            this._lastUpdateTimestamp = now;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the current frame based on game logic.\n     * This method checks the game state and advances snek as necessary.\n     * @private\n     */\n    _updateFrame() {\n        if (this.state.ended) return;\n        if (!this.state.paused) {\n            this._advanceSnake();\n        }\n    }\n\n    /**\n     * Snek movement, collision, and item consumption logic.\n     * @private\n     */\n    _advanceSnake() {\n        let didEatBeforeMove = this.snake.didEat(this.item);\n\n        // move snek, growing if it ate an item\n        this.snake.move(didEatBeforeMove);\n\n        if (didEatBeforeMove) {\n            console.log(`snek ate item: ${this.item.type.toUpperCase()}`);\n\n            this.state.updateScore(GAME.SCORE_INCREMENT);\n\n            // apply item effects\n            this.snake.equip(this.item);\n\n            // update board effects if necessary\n            this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\n\n            // generate a new item\n            this._generateNewItem();\n        } else {\n            // optionally regenerate item based on game conditions\n            this._maybeRegenerateItem();\n        }\n\n        // TODO: add to control panel\n        // console.log(`${this.item.type}: ${this.item.x}, ${this.item.y}`);\n\n        if (this._checkCollision()) {\n            this._end();\n        }\n    }\n\n    /**\n     * Generates a new item on the board.\n     * @private\n     */\n    _generateNewItem() {\n        let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\n            { alwaysReturnItem: true, reducePowerUpProbability: false }\n        );\n        if (itemClass !== null) {\n            this.item = new itemClass(this.board, this.snake);\n            console.log(`new item generated: ${this.item.type.toUpperCase()}`);\n        }\n    }\n\n    /**\n     * Possibly regenerates the current item based on game conditions:\n     * (1) when the player is already performing well (high score),\n     * we make the food volatile, or able to change or disappear, like power-ups are.\n     * (2) when there's already a power-up on the board, we reduce the chance of chain-spawning power-ups.\n     * @private\n     */\n    _maybeRegenerateItem() {\n        const foodIsVolatile = this.state.score >= GAME.SCORE_THRESHOLD_FOR_VOLATILE_FOOD;\n        if (foodIsVolatile || this.item instanceof Teleport || this.item instanceof Phase) {\n            let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\n                {alwaysReturnItem: false, reducePowerUpProbability: true}\n            );\n            if (itemClass !== null) {\n                this.item = new itemClass(this.board, this.snake);\n                console.log(`item regenerated: ${this.item.type.toUpperCase()}`);\n            }\n        }\n    }\n\n    /**\n     * Checks if snek has collided with the board boundaries or itself.\n     * @returns {boolean} true if a collision occurred; false otherwise\n     * @private\n     */\n    _checkCollision() {\n        // always set game board glow based on whether or not teleport powerup is equipped\n        this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\n        return this.snake.didCollide(this.board.width, this.board.height, this.board.blockSize);\n    }\n\n    /**\n     * Ends the game and updates final state.\n     * @private\n     */\n    _end() {\n        this.state.endGame();\n        this.state.updateHighScore();\n\n        this.input.manageGameControls(false);\n        // always allow restart with space bar\n        this.input.manageRestartControls(true);\n\n        console.log(`game over - final score: ${this.state.score}`);\n    }\n}\n\n// <!-- GAME EXECUTION HELPERS BELOW -->\n\n/**\n * Initializes and runs the game.\n */\nexport function runGame() {\n    try {\n        let board = _initBoard();\n        let snake = new Snake(board.height, board.height, board.blockSize);\n        let food = new Food(board, snake);\n        let game = new Game(board, snake, food);\n\n        game.input.manageGameControls(true);\n\n        requestAnimationFrame((t) => game.run(t));\n    } catch (error) {\n        console.error('failed to initialize game:', error);\n        // display an error message to the user\n        displayErrorMessage('Failed to start the game. Please refresh the page and try again.', document.getElementById(CANVAS_ID));\n    }\n}\n\n/**\n * Initializes the game board.\n * @returns {Board} initialized game board\n * @throws {Error} ff the canvas element is not found or is not an HTMLCanvasElement\n * @private\n */\nfunction _initBoard() {\n    let canvas, ctrl_panel;\n    if (!(canvas = document.getElementById(CANVAS_ID))) {\n        throw new Error(`HTML canvas with id '${CANVAS_ID}' not found`);\n    }\n    if (!(canvas instanceof HTMLCanvasElement)) {\n        throw new Error(`#${CANVAS_ID} element is not an HTML canvas`);\n    }\n    if (!(ctrl_panel = document.getElementById(CONTROL_PANEL_ID))) {\n        console.warn(`control panel element with id '${CONTROL_PANEL_ID}' not found. proceeding without control panel.`);\n    }\n\n    let board = new Board(canvas, ctrl_panel);\n\n    return board;\n}\n","import { runGame } from './game/game';\n\nrunGame();\n"],"names":["GAME_CONFIG","BOARD","CTRL_PANEL_HEIGHT","MARGIN_SIZE","NUM_STEPS_ACROSS_CANVAS","DEFAULT_BACKGROUND_COLOR","DEFAULT_BORDER_COLOR","TELEPORT_BORDER_COLOR","TELEPORT_BACKGROUND_COLOR","FILTERS","NONE","PAUSE","ENDGAME","SNAKE","INITIAL_LENGTH","DEFAULT_COLOR","PHASE_BORDER_COLOR","ITEM","FOOD_COLOR","FOOD_BORDER_COLOR","PHASE_COLOR","TELEPORT_COLOR","PHASE_SCORE_THRESHOLD","TELEPORT_SCORE_THRESHOLD","BASE_PHASE_PROBABILITY","BASE_TELEPORT_PROBABILITY","BASE_VOLATILE_FOOD_PROBABILITY","GAME","SCORE_INCREMENT","SCORE_THRESHOLD_FOR_VOLATILE_FOOD","INPUT","GAME_SPEED__ARROW","GAME_SPEED__MOTION","SWIPE_SENSITIVITY","MOTION_SENSITIVITY","CANVAS","GAME_TEXT_COLOR","HIGH_SCORE_TEXT_COLOR","PAUSE_BTN_COLOR","EXCLAMATION_BTN_COLOR","GAME_TEXT_FONT_FAMILY","GAME_TEXT_FONT_SIZE","STATE","LOCAL_STORAGE_KEY_HIGH_SCORE","LOCAL_STORAGE_KEY_GAME_SPEED","ERROR","MESSAGE_FONT","MESSAGE_COLOR","MESSAGE_BACKGROUND","MOTION_REQUEST_BUTTON_ID","Board","constructor","canvas","ctrlPanel","this","_canvas","_ctrlPanel","ctx","getContext","Error","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","width","_height","height","_blockSize","_activeFilter","_color","_borderColor","_isGlowing","resetFilter","color","borderColor","isGlowing","activeFilter","blockSize","ratio","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestBtn","btn","createElement","innerHTML","setAttribute","type","appendChild","getMotionRequestBtn","getElementById","removeMotionRequestBtn","parentNode","removeChild","setGlow","shouldGlow","needsPermission","gridBlockSize","Math","min","innerWidth","innerHeight","floor","style","displayErrorMessage","message","HTMLCanvasElement","console","error","displayErrorInDOM","save","font","fillStyle","messageWidth","measureText","messageHeight","messageX","messageY","fillRect","textAlign","textBaseline","fillText","restore","displayErrorOnCanvas","errorDiv","position","top","left","transform","backgroundColor","padding","borderRadius","zIndex","textContent","body","PHASE_CLASSNAME","TELEPORT_CLASSNAME","Item","board","snake","_x","Number","MIN_SAFE_INTEGER","_y","_generate","x","y","fillColor","_randomBlock","forEachSegment","snakeSegment","max","round","random","Food","Teleport","Phase","ITEM_TYPES","none","food","teleport","phase","selectRandomItem","score","powerUps","options","alwaysReturnItem","reducePowerUpProbability","itemChances","teleportProb","calculateTeleportProbability","phaseProb","calculatePhaseProbability","foodProb","noItemProb","probabilities","totalProb","Object","values","reduce","sum","prob","abs","calculateItemProbabilities","selectedItemType","chances","cumulativeProbability","item","probability","entries","pickItem","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTIONS","dx","dy","Snake","boardWidth","boardHeight","centerX","centerY","_body","_createBody","_dx","_dxAtPause","_dy","_dyAtPause","_isChangingDirection","length","i","push","getHeadPosition","move","growing","_advanceHead","_advanceTail","head","unshift","pop","teleportHead","newPosition","callback","forEach","segment","index","pause","unpause","didEat","equip","didCollide","slice","some","log","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirection","direction","newDirection","toLowerCase","getDirection","currentDirection","_getCurrentDirection","dir2","dir1","_setNewDirection","magnitude","normalizeDirection","SPACE_KEY","LEFT_KEY","RIGHT_KEY","UP_KEY","DOWN_KEY","InputHandler","game","_game","_motionAvailable","_deviceOrientation","beta","gamma","_touchStart","_touchEnd","_boundMethods","_bindMethods","manageGameControls","shouldAdd","_manageKeyboardControls","_manageTouchControls","_manageVisibilityControl","_managePauseControl","_manageFullscreenControl","_manageDeviceOrientationControl","manageRestartControls","action","removeEventListener","handleKeyInput","handleRestart","_handleKeyInput","bind","handleDeviceMovement","_handleDeviceMovement","handleVisibilityChange","_handleVisibilityChange","requestDeviceOrientation","_requestDeviceOrientation","togglePause","handleTouchStart","_handleTouchStart","handleTouchEnd","_handleTouchEnd","_handleRestart","DeviceOrientationEvent","requestPermission","addEventListener","event","command","MoveCommand","PauseCommand","code","state","_ended","_disableMotionControl","execute","ev","KeyboardEvent","restart","currentOrientation","orientationChange","_isSignificantMotion","_enableMotionControl","_getDirectionFromOrientation","hidden","paused","response","catch","setSpeed","preventDefault","firstTouch","changedTouches","screenX","screenY","_handleSwipeGesture","ended","withStraddle","cb","offset","translate","filter","border","outline","boxShadow","transition","useExclamation","String","fromCharCode","lineCap","shadowBlur","shadowColor","strokeStyle","strokeRect","toString","strokeText","renderGame","renderGameOver","defaultCanvas","drawGame","drawScore","drawHighScore","highScore","drawItem","drawSnake","drawGameOver","createRenderFunctions","GameState","_paused","_score","_highScore","_getItemSafely","_speed","speed","updateScore","increment","updateHighScore","_setItemSafely","isNaN","endGame","key","defaultValue","value","localStorage","getItem","JSON","parse","warn","setItem","stringify","CANVAS_ID","CONTROL_PANEL_ID","Game","input","_lastUpdateTimestamp","run","now","_shouldUpdateFrame","_updateFrame","requestAnimationFrame","t","runGame","_advanceSnake","didEatBeforeMove","toUpperCase","_generateNewItem","_maybeRegenerateItem","_checkCollision","_end","itemClass","ctrl_panel","_initBoard"],"mappings":"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"}