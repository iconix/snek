{"version":3,"file":"snek.min.js","sources":["../src/js/config.js","../src/js/board.js","../src/js/error.js","../src/js/item.js","../src/js/direction.js","../src/js/motion.js","../src/js/snake.js","../src/js/game/input.js","../src/js/canvas.js","../src/js/game/render.js","../src/js/game/state.js","../src/js/game/game.js","../src/js/main.js"],"sourcesContent":["export const GAME_CONFIG = {\r\n    BOARD: {\r\n        CTRL_PANEL_HEIGHT: 50,  // pixels\r\n        MARGIN_SIZE: 20,  // pixels\r\n        NUM_STEPS_ACROSS_CANVAS: 30,\r\n        DEFAULT_BACKGROUND_COLOR: 'white',\r\n        DEFAULT_BORDER_COLOR: 'darkgreen',\r\n        TELEPORT_BORDER_COLOR: 'blue',\r\n        TELEPORT_BACKGROUND_COLOR: '#e2f1fa',  // a light blue\r\n        FILTERS: {\r\n            NONE: 'none',\r\n            PAUSE: 'contrast(1.4) sepia(1)',\r\n            ENDGAME: 'grayscale(0.8) blur(0.5px)',\r\n        },\r\n    },\r\n\r\n    SNAKE: {\r\n        INITIAL_LENGTH: 5,\r\n        DEFAULT_COLOR: 'lightgreen',\r\n        DEFAULT_BORDER_COLOR: 'darkgreen',\r\n        PHASE_BORDER_COLOR: 'violet',\r\n    },\r\n\r\n    ITEM: {\r\n        FOOD_COLOR: 'red',\r\n        FOOD_BORDER_COLOR: 'darkred',\r\n        PHASE_COLOR: 'orchid',\r\n        PHASE_BORDER_COLOR: 'violet',\r\n        TELEPORT_COLOR: 'blue',\r\n        TELEPORT_BORDER_COLOR: 'darkblue',\r\n        PHASE_SCORE_THRESHOLD: 150,\r\n        TELEPORT_SCORE_THRESHOLD: 50,\r\n        BASE_PHASE_PROBABILITY: 0.1,\r\n        BASE_TELEPORT_PROBABILITY: 0.1,\r\n        BASE_VOLATILE_FOOD_PROBABILITY: 0.01,\r\n    },\r\n\r\n    GAME: {\r\n        SCORE_INCREMENT: 10,\r\n        SCORE_THRESHOLD_FOR_VOLATILE_FOOD: 100,\r\n        SPEED_MS__ARROW: 100,\r\n        SPEED_MS__MOTION: 125,          // slow down game since harder with motion controls\r\n    },\r\n\r\n    INPUT: {\r\n        SWIPE_SENSITIVITY: 10,          // delta of pixels needed to consider touch mvmt a 'swipe'\r\n        MOTION_SENSITIVITY: 15,         // degree of motion needed to consider a device mvmt as intentional\r\n        MOTION_THROTTLE_TIME_MS: 100,   // min time between motion control updates to prevent over-sensitivity\r\n    },\r\n\r\n    CANVAS: {\r\n        GAME_TEXT_COLOR: 'gray',\r\n        HIGH_SCORE_TEXT_COLOR: 'goldenrod',\r\n        PAUSE_BTN_COLOR: 'darkkhaki',\r\n        EXCLAMATION_BTN_COLOR: 'darkkhaki',\r\n        GAME_TEXT_FONT_FAMILY: '\"Saira\", serif',\r\n        GAME_TEXT_FONT_SIZE: 50,\r\n    },\r\n\r\n    STATE: {\r\n        LOCAL_STORAGE_KEY_HIGH_SCORE: 'highScore',\r\n        LOCAL_STORAGE_KEY_GAME_SPEED: 'gameSpeed',\r\n    },\r\n\r\n    ERROR: {\r\n        // ERROR_MESSAGE_DURATION: 5000,\r\n        MESSAGE_FONT: '20px Arial',\r\n        MESSAGE_COLOR: 'red',\r\n        MESSAGE_BACKGROUND: 'rgba(0, 0, 0, 0.7)',\r\n    },\r\n};\r\n","import { GAME_CONFIG } from './config';\r\n\r\nconst { BOARD } = GAME_CONFIG;\r\n\r\nconst BUTTON_IDS = {\r\n    MOTION_REQUEST: 'motionRequest',\r\n    MOTION_INDICATOR_TOGGLE: 'motionIndicatorToggle',\r\n    CLEAR_HIGH_SCORE: 'clearHighScore'\r\n};\r\n\r\n/**\r\n * Represents the game board.\r\n */\r\nexport class Board {\r\n    /**\r\n     * @param {HTMLCanvasElement} canvas - canvas element for the game\r\n     * @param {HTMLDivElement | null} ctrlPanel - control panel element\r\n     */\r\n    constructor(canvas, ctrlPanel) {\r\n        this._canvas = canvas;\r\n        this._ctrlPanel = ctrlPanel;\r\n\r\n        // 2d drawing context\r\n        if (!(this.ctx = this._canvas.getContext('2d'))) {\r\n            throw new Error('2d context not supported or canvas already initialized');\r\n        }\r\n\r\n        this._boardSize = this._calculateBoardSize();\r\n\r\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\r\n        this._ratio = window.devicePixelRatio || 1;\r\n\r\n        this._sizeCanvas();\r\n        this._sizeControlPanel();\r\n\r\n        this._width = canvas.width;\r\n        this._height = canvas.height;\r\n        this._blockSize = canvas.width / BOARD.NUM_STEPS_ACROSS_CANVAS;\r\n\r\n        this._activeFilter = BOARD.FILTERS.NONE;\r\n        this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\r\n        this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\r\n        this._isGlowing = false;\r\n\r\n        this.resetFilter();\r\n\r\n        // console.log({\r\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\r\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\r\n        //     'canvas.height': canvas.height, block_size: this._blockSize\r\n        // })\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLCanvasElement}\r\n     */\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get isGlowing() {\r\n        return this._isGlowing;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get activeFilter() {\r\n        return this._activeFilter;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get blockSize() {\r\n        return this._blockSize;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get ratio() {\r\n        return this._ratio;\r\n    }\r\n\r\n    /**\r\n     * Resets the board filter to default.\r\n     */\r\n    resetFilter() {\r\n        this._activeFilter = BOARD.FILTERS.NONE;\r\n    }\r\n\r\n    /**\r\n     * Sets the board filter for the end game state.\r\n     */\r\n    setEndGameFilter() {\r\n        this._activeFilter = BOARD.FILTERS.ENDGAME;\r\n    }\r\n\r\n    /**\r\n     * Sets the board filter for the paused game state.\r\n     */\r\n    setPauseGameFilter() {\r\n        this._activeFilter = BOARD.FILTERS.PAUSE;\r\n    }\r\n\r\n    /**\r\n     * Enters fullscreen mode.\r\n     */\r\n    enterFullScreen() {\r\n        // switch to full screen\r\n        this._canvas.requestFullscreen().then(function () {\r\n            try {\r\n                // lock portrait orientation when going full screen\r\n                // @ts-ignore\r\n                screen.lockOrientationUniversal = screen.lockOrientation ||\r\n                    // @ts-ignore\r\n                    screen.mozLockOrientation ||\r\n                    // @ts-ignore\r\n                    screen.msLockOrientation;\r\n                // @ts-ignore\r\n                screen.lockOrientationUniversal('portrait-primary');\r\n            } catch (e) {\r\n                // console.log(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exits fullscreen mode.\r\n     */\r\n    exitFullScreen() {\r\n        document.exitFullscreen();\r\n    }\r\n\r\n    /**\r\n     * Creates or retrieves button in control panel that requests motion control permission.\r\n     * @returns {HTMLButtonElement|null} motion request button, or null if the control panel does not exist\r\n     */\r\n    createMotionRequestButton() {\r\n        return this._createOrGetButton(BUTTON_IDS.MOTION_REQUEST, 'Allow Motion');\r\n    }\r\n\r\n    /**\r\n     * Retrieves the motion request button.\r\n     * @returns {HTMLButtonElement|null} motion request button if it exists; otherwise null\r\n     */\r\n    getMotionRequestButton() {\r\n        return this._getButton(BUTTON_IDS.MOTION_REQUEST);\r\n    }\r\n\r\n    /**\r\n     * Removes the motion request button from the DOM.\r\n     */\r\n    removeMotionRequestButton() {\r\n        const btn = this.getMotionRequestButton();\r\n        btn?.parentNode?.removeChild(btn);\r\n    }\r\n\r\n    /**\r\n     * Creates or retrieves button in control panel that toggles the motion indicator UI.\r\n     * @returns {HTMLButtonElement|null} motion indicator toggle button, or null if the control panel does not exist\r\n     */\r\n    createMotionIndicatorToggleButton() {\r\n        return this._createOrGetButton(BUTTON_IDS.MOTION_INDICATOR_TOGGLE, 'Motion Guide', {\r\n            style: 'display: none;'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the motion indicator toggle button.\r\n     * @returns {HTMLButtonElement|null} motion indicator toggle button if it exists; otherwise null\r\n     */\r\n    getMotionIndicatorToggleButton() {\r\n        return this._getButton(BUTTON_IDS.MOTION_INDICATOR_TOGGLE);\r\n    }\r\n\r\n    /**\r\n     * Shows the motion indicator toggle button.\r\n     * If the button does not exist, this method does nothing.\r\n     */\r\n    showMotionIndicatorToggleButton() {\r\n        const toggleButton = this.getMotionIndicatorToggleButton();\r\n        if (toggleButton) {\r\n            toggleButton.classList.remove('hide');\r\n            toggleButton.classList.add('show');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the motion indicator toggle button.\r\n     * If the button does not exist, this method does nothing.\r\n     */\r\n    hideMotionIndicatorToggleButton() {\r\n        const toggleButton = this.getMotionIndicatorToggleButton();\r\n        if (toggleButton) {\r\n            toggleButton.classList.remove('show');\r\n            toggleButton.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the text of the motion indicator toggle button based on the indicator's visibility.\r\n     * @param {boolean} isIndicatorVisible - Whether the motion indicator is currently visible.\r\n     */\r\n    updateMotionIndicatorToggleButtonTitle(isIndicatorVisible) {\r\n        const toggleButton = this.getMotionIndicatorToggleButton();\r\n        if (toggleButton) {\r\n            toggleButton.title = isIndicatorVisible ? 'Hide Motion Guide' : 'Show Motion Guide';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates or retrieves button in control panel that clears the high score.\r\n     * @returns {HTMLButtonElement|null} clear high score button, or null if the control panel does not exist\r\n     */\r\n    createClearHighScoreButton() {\r\n        return this._createOrGetButton(BUTTON_IDS.CLEAR_HIGH_SCORE, 'Clear High Score');\r\n    }\r\n\r\n    /**\r\n     * Retrieves the clear high score button.\r\n     * @returns {HTMLButtonElement|null} clear high score button if it exists; otherwise null\r\n     */\r\n    getClearHighScoreButton() {\r\n        return this._getButton(BUTTON_IDS.CLEAR_HIGH_SCORE);\r\n    }\r\n\r\n    /**\r\n     * Sets the glow effect on the board.\r\n     * @param {boolean} shouldGlow - whether the board should glow\r\n     */\r\n    setGlow(shouldGlow) {\r\n        if (shouldGlow === this.isGlowing) return;\r\n\r\n        this._isGlowing = shouldGlow;\r\n\r\n        if (shouldGlow) {\r\n            // note: since canvas border doesn't show in fullscreen mode, we tint the background too\r\n            this._color = BOARD.TELEPORT_BACKGROUND_COLOR;\r\n            this._borderColor = BOARD.TELEPORT_BORDER_COLOR;\r\n        } else {\r\n            this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\r\n            this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\r\n        }\r\n\r\n        // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if the game needs permission for motion control.\r\n     * @returns {boolean} true if permission is needed; false otherwise\r\n     */\r\n    needsPermission() {\r\n        const requestButton = this.getMotionRequestButton();\r\n        if (!requestButton) return false;\r\n\r\n        // try modern Element.checkVisibility() first\r\n        if (typeof requestButton.checkVisibility === 'function') {\r\n            return requestButton.checkVisibility();\r\n        }\r\n\r\n        // fallback to checking computed style\r\n        const computedStyle = window.getComputedStyle(requestButton);\r\n        return computedStyle.display !== 'none' && computedStyle.visibility !== 'hidden';\r\n    }\r\n\r\n    /**\r\n     * Calculates the size of the game board.\r\n     * @returns {number} calculated board size\r\n     * @private\r\n     */\r\n    _calculateBoardSize() {\r\n        // calculate a square board size based on window dimensions and total # of steps across the canvas\r\n        const availableSpace = Math.min(window.innerWidth, window.innerHeight) - BOARD.CTRL_PANEL_HEIGHT;\r\n        const gridBlockSize = availableSpace / BOARD.NUM_STEPS_ACROSS_CANVAS;  // find closest number divisible by steps\r\n        const boardSize = Math.floor(gridBlockSize) * BOARD.NUM_STEPS_ACROSS_CANVAS - BOARD.MARGIN_SIZE;\r\n\r\n        // TODO: could implement like below instead - if willing to implement resizing\r\n        // const maxWidth = window.innerWidth - MARGIN_SIZE;\r\n        // const maxHeight = window.innerHeight - CTRL_PANEL_HEIGHT - MARGIN_SIZE;\r\n        // const boardSize = Math.min(maxWidth, maxHeight);\r\n\r\n        return boardSize;\r\n    }\r\n\r\n    /**\r\n     * Sets the size of the canvas.\r\n     * @private\r\n     */\r\n    _sizeCanvas() {\r\n        this._canvas.style.width = this._boardSize + 'px';\r\n        this._canvas.style.height = this._boardSize + 'px';\r\n        this._canvas.width = this._boardSize * this._ratio;\r\n        this._canvas.height = this._canvas.width;\r\n    }\r\n\r\n    /**\r\n     * Sets the size of the control panel.\r\n     * @private\r\n     */\r\n    _sizeControlPanel() {\r\n        if (!this._ctrlPanel) return;\r\n        this._ctrlPanel.style.width = this._boardSize + 'px';\r\n        this._ctrlPanel.style.height = BOARD.CTRL_PANEL_HEIGHT + 'px';\r\n    }\r\n\r\n    /**\r\n     * Creates or retrieves a button in the control panel.\r\n     * @param {string} id - ID of the button\r\n     * @param {string} text - text content of the button\r\n     * @param {Object} [options={}] - additional options for the button\r\n     * @param {string} [options.style] - inline CSS styles for the button\r\n     * @returns {HTMLButtonElement|null} created or existing button, or null if the control panel doesn't exist\r\n     * @private\r\n     */\r\n    _createOrGetButton(id, text, options = {}) {\r\n        if (!this._ctrlPanel) return null;\r\n\r\n        let existingBtn = this._getButton(id);\r\n        if (existingBtn) return existingBtn;\r\n\r\n        let btn = document.createElement('button');\r\n        btn.type = 'button';\r\n        btn.id = id;\r\n        btn.textContent = text;\r\n        if (options.style) btn.style.cssText = options.style;\r\n        this._ctrlPanel.appendChild(btn);\r\n        return btn;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a button from the DOM by its ID.\r\n     * @param {string} id - ID of the button to retrieve\r\n     * @returns {HTMLButtonElement|null} button if it exists and is a button element; otherwise null\r\n     * @private\r\n     */\r\n    _getButton(id) {\r\n        const element = document.getElementById(id);\r\n        return element instanceof HTMLButtonElement ? element : null;\r\n    }\r\n}\r\n","import { GAME_CONFIG } from './config';\r\n\r\nconst { ERROR } = GAME_CONFIG;\r\n\r\n/**\r\n * Displays an error message on the screen.\r\n * @param {string} message - error message to display\r\n * @param {HTMLCanvasElement | HTMLElement | null} canvas - game canvas (if available)\r\n */\r\nexport function displayErrorMessage(message, canvas = null) {\r\n    if (canvas && canvas instanceof HTMLCanvasElement) {\r\n        displayErrorOnCanvas(message, canvas);\r\n    } else {\r\n        displayErrorInDOM(message);\r\n    }\r\n}\r\n\r\n/**\r\n * Displays an error message on the canvas.\r\n * @param {string} message - error message to display\r\n * @param {HTMLCanvasElement} canvas - game canvas\r\n * @private\r\n */\r\nfunction displayErrorOnCanvas(message, canvas) {\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        console.error('unable to get 2D context from canvas');\r\n        displayErrorInDOM(message);\r\n        return;\r\n    }\r\n\r\n    // save the current canvas state\r\n    ctx.save();\r\n\r\n    // set up the error message style\r\n    ctx.font = ERROR.MESSAGE_FONT;\r\n    ctx.fillStyle = ERROR.MESSAGE_BACKGROUND;\r\n\r\n    // calculate message width and position\r\n    const messageWidth = ctx.measureText(message).width + 20; // Add some padding\r\n    const messageHeight = 30;\r\n    const messageX = (canvas.width - messageWidth) / 2;\r\n    const messageY = canvas.height / 2 - messageHeight / 2;\r\n\r\n    // draw the background\r\n    ctx.fillRect(messageX, messageY, messageWidth, messageHeight);\r\n\r\n    // draw the error message\r\n    ctx.fillStyle = ERROR.MESSAGE_COLOR;\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText(message, canvas.width / 2, canvas.height / 2);\r\n\r\n    // restore the canvas state\r\n    ctx.restore();\r\n\r\n    // remove the error message after a set duration\r\n    // setTimeout(() => {\r\n    //     ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    //     // note: not redrawing the game here as we might not have a valid game state\r\n    // }, ERROR_MESSAGE_DURATION);\r\n}\r\n\r\n/**\r\n * Displays an error message in the DOM.\r\n * @param {string} message - error message to display\r\n * @private\r\n */\r\nfunction displayErrorInDOM(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.position = 'fixed';\r\n    errorDiv.style.top = '50%';\r\n    errorDiv.style.left = '50%';\r\n    errorDiv.style.transform = 'translate(-50%, -50%)';\r\n    errorDiv.style.backgroundColor = ERROR.MESSAGE_BACKGROUND;\r\n    errorDiv.style.color = ERROR.MESSAGE_COLOR;\r\n    errorDiv.style.padding = '15px';\r\n    errorDiv.style.borderRadius = '5px';\r\n    errorDiv.style.zIndex = '1000';\r\n\r\n    // preserve line breaks in multi-line messages\r\n    errorDiv.style.whiteSpace = 'pre-wrap';\r\n\r\n    // for long messages, add a max-width and use word-wrapping\r\n    errorDiv.style.maxWidth = '80%';\r\n    errorDiv.style.overflowWrap = 'break-word';\r\n\r\n    errorDiv.textContent = message;\r\n\r\n    document.body.appendChild(errorDiv);\r\n\r\n    // setTimeout(() => {\r\n    //     document.body.removeChild(errorDiv);\r\n    // }, ERROR_MESSAGE_DURATION);\r\n}\r\n","import { GAME_CONFIG } from './config';\r\n\r\nconst { ITEM } = GAME_CONFIG;\r\n\r\nexport const PHASE_CLASSNAME = 'Phase';\r\nexport const TELEPORT_CLASSNAME = 'Teleport';\r\n\r\n/**\r\n * Represents an item that can be consumed by snek in the game.\r\n */\r\nexport class Item {\r\n    /**\r\n     * @param {import('./board').Board} board - game board\r\n     * @param {import('./snake').Snake} snake - snek object\r\n     */\r\n    constructor(board, snake) {\r\n        this._x = Number.MIN_SAFE_INTEGER, this._y = Number.MIN_SAFE_INTEGER;\r\n        this._generate(board, snake);\r\n    }\r\n\r\n    /**\r\n     * Gets the x-coordinate of the item.\r\n     * @returns {number} x-coordinate\r\n     */\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    /**\r\n     * Gets the y-coordinate of the item.\r\n     * @returns {number} y-coordinate\r\n     */\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of the item.\r\n     * @returns {string} item type\r\n     */\r\n    get type() { return 'UNKNOWN_ITEM' }\r\n\r\n    /**\r\n     * Gets the fill color of the item.\r\n     * @returns {string} fill color\r\n     */\r\n    get fillColor() { return '' }\r\n\r\n    /**\r\n     * Gets the border color of the item.\r\n     * @returns {string} border color\r\n     */\r\n    get borderColor() { return '' }\r\n\r\n    /**\r\n     * Generates a new position for the item.\r\n     * @param {import('./board').Board} board - game board\r\n     * @param {import('./snake').Snake} snake - snek object\r\n     * @private\r\n     */\r\n    _generate(board, snake) {\r\n        this._x = this._randomBlock(0, board.width - board.blockSize, board.blockSize);\r\n        this._y = this._randomBlock(0, board.height - board.blockSize, board.blockSize);\r\n\r\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} @returns {void} */ snakeSegment) => {\r\n            const itemIsOnSnake = snakeSegment.x == this.x && snakeSegment.y == this.y\r\n            if (itemIsOnSnake) this._generate(board, snake);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates a random block position.\r\n     * @param {number} min - minimum value\r\n     * @param {number} max - maximum value\r\n     * @param {number} blockSize - size of each block\r\n     * @returns {number} random block position\r\n     * @private\r\n     */\r\n    _randomBlock(min, max, blockSize) {\r\n        // note: round to snap item placement to grid, as defined by blockSize\r\n        return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a food item in the game.\r\n * Food is the basic item that snek consumes to grow and increase the player's score.\r\n * @extends Item\r\n */\r\nexport class Food extends Item {\r\n\r\n    /**\r\n     * Gets the food type.\r\n     * @returns {string} food type\r\n     */\r\n    get type() { return 'FOOD' }\r\n\r\n    /**\r\n     * Gets the fill color of the food.\r\n     * @returns {string} fill color\r\n     */\r\n    get fillColor() { return ITEM.FOOD_COLOR }\r\n\r\n    /**\r\n     * Gets the border color of the food.\r\n     * @returns {string} border color\r\n     */\r\n    get borderColor() { return ITEM.FOOD_BORDER_COLOR }\r\n}\r\n\r\n/**\r\n * Represents a teleport item in the game.\r\n * Teleport is a power-up that allows snek to pass through the walls of the game board.\r\n * When consumed, it gives snek the ability to \"wrap around\" the game board once.\r\n * @extends Item\r\n */\r\nexport class Teleport extends Item {\r\n\r\n    /**\r\n     * Gets the teleport type.\r\n     * @returns {string} teleport type\r\n     */\r\n    get type() { return 'TELEPORT' }\r\n\r\n    /**\r\n     * Gets the fill color of the teleport item.\r\n     * @returns {string} fill color\r\n     */\r\n    get fillColor() { return ITEM.TELEPORT_COLOR }\r\n\r\n    /**\r\n     * Gets the border color of the teleport item.\r\n     * @returns {string} border color\r\n     */\r\n    get borderColor() { return ITEM.TELEPORT_BORDER_COLOR }\r\n}\r\n\r\n/**\r\n * Represents a phase item in the game.\r\n * Phase is a power-up that allows snek the ability to pass through its own body once.\r\n * @extends Item\r\n */\r\nexport class Phase extends Item {\r\n\r\n    /**\r\n     * Gets the phase type.\r\n     * @returns {string} phase type\r\n     */\r\n    get type() { return 'PHASE' }\r\n\r\n    /**\r\n     * Gets the fill color of the phase item.\r\n     * @returns {string} fill color\r\n     */\r\n    get fillColor() { return ITEM.PHASE_COLOR }\r\n\r\n    /**\r\n     * Gets the border color of the phase item.\r\n     * @returns {string} border color\r\n     */\r\n    get borderColor() { return ITEM.PHASE_BORDER_COLOR }\r\n}\r\n\r\nconst ITEM_TYPES = {\r\n    none: null,\r\n    food: Food,\r\n    teleport: Teleport,\r\n    phase: Phase\r\n};\r\n\r\n/**\r\n * Options for item selection.\r\n * @typedef {Object} ItemSelectionOptions\r\n * @property {boolean} [alwaysReturnItem=false] - If true, always returns an item (never null)\r\n * @property {boolean} [reducePowerUpProbability=false] - If true, reduces the probability of power-ups\r\n */\r\n\r\n/**\r\n * Randomizes the selection of an item type based on game conditions.\r\n * @param {number} score - current game score\r\n * @param {{ [x: string]: boolean; }} powerUps - available power-ups and whether eqipped\r\n * @param {ItemSelectionOptions} [options={}] - options for item selection\r\n * @returns {(new (board: import('./board').Board, item: import('./snake').Snake) => Item)} selected item class or null\r\n */\r\nexport function selectRandomItem(score, powerUps, options = {}) {\r\n    const { alwaysReturnItem = false, reducePowerUpProbability = false } = options;\r\n\r\n    const itemChances = calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\r\n\r\n    // console.log(itemChances);\r\n\r\n    const selectedItemType = pickItem(itemChances);\r\n    return ITEM_TYPES[selectedItemType];\r\n}\r\n\r\n/**\r\n * Picks an item based on a weighted random selection algorithm.\r\n * @param {{ [x: string]: any; }} chances - chances for each item\r\n * @returns {string} selected item key\r\n */\r\nfunction pickItem(chances) {\r\n    const random = Math.random();  // random value to use for selection\r\n    let cumulativeProbability = 0;\r\n\r\n    for (const [item, probability] of Object.entries(chances)) {\r\n        cumulativeProbability += probability;\r\n        if (random <= cumulativeProbability) {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    // this should never happen if probabilities sum to 1\r\n    throw new Error('item selection failed');\r\n}\r\n\r\n/**\r\n * Calculates probability of generation for each item type.\r\n * Provides ability to balance the game by making power-ups less frequent in certain situations.\r\n * @param {number} score - current game score\r\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\r\n * @param {boolean} alwaysReturnItem - whether to always return an item\r\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\r\n * @returns {{ [x: string]: number }} probabilities for each item type\r\n */\r\nfunction calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\r\n    // note: a power-up always drops AT its score threshold; afterwards drops get random\r\n    const teleportProb = calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\r\n    const phaseProb = calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\r\n\r\n    let foodProb, noItemProb;\r\n    if (alwaysReturnItem) {\r\n        foodProb = 1 - teleportProb - phaseProb;\r\n        noItemProb = 0;\r\n    } else {\r\n        foodProb = ITEM.BASE_VOLATILE_FOOD_PROBABILITY;\r\n        noItemProb = 1 - teleportProb - phaseProb - foodProb;\r\n    }\r\n\r\n    const probabilities = {\r\n        none: noItemProb,\r\n        food: foodProb,\r\n        teleport: teleportProb,\r\n        phase: phaseProb,\r\n    };\r\n\r\n    const totalProb = Object.values(probabilities).reduce((sum, prob) => sum + prob, 0);\r\n    if (Math.abs(totalProb - 1) > 1e-10) {  // allow for small floating-point errors\r\n        throw new Error(`Item probabilities must sum to 1. Current sum: ${totalProb}`);\r\n    }\r\n\r\n    return probabilities;\r\n}\r\n\r\n/**\r\n * Calculates the probability of generating a Teleport item.\r\n * @param {number} score - current game score\r\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\r\n * @param {boolean} alwaysReturnItem - whether to always return an item\r\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\r\n * @returns {number} probability of generating a Teleport item\r\n */\r\nfunction calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\r\n    if (score === ITEM.TELEPORT_SCORE_THRESHOLD && alwaysReturnItem) return 1;\r\n    if (score > ITEM.TELEPORT_SCORE_THRESHOLD && !powerUps[TELEPORT_CLASSNAME]) {\r\n        return reducePowerUpProbability ? ITEM.BASE_TELEPORT_PROBABILITY / 10 : ITEM.BASE_TELEPORT_PROBABILITY;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Calculates the probability of generating a Phase item.\r\n * @param {number} score - current game score\r\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\r\n * @param {boolean} alwaysReturnItem - whether to always return an item\r\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\r\n * @returns {number} probability of generating a Phase item\r\n */\r\nfunction calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\r\n    if (score === ITEM.PHASE_SCORE_THRESHOLD && alwaysReturnItem) return 1;\r\n    if (score > ITEM.PHASE_SCORE_THRESHOLD && !powerUps[PHASE_CLASSNAME]) {\r\n        return reducePowerUpProbability ? ITEM.BASE_PHASE_PROBABILITY / 10 : ITEM.BASE_PHASE_PROBABILITY;\r\n    }\r\n    return 0;\r\n}\r\n","export const DIRECTION_LEFT = 'left';\r\nexport const DIRECTION_RIGHT = 'right';\r\nexport const DIRECTION_UP = 'up';\r\nexport const DIRECTION_DOWN = 'down';\r\n\r\n/**\r\n * @typedef {Object} Direction\r\n * @property {number} dx - change in x direction\r\n * @property {number} dy - change in y direction\r\n */\r\n\r\n/**\r\n * Object mapping direction strings to their corresponding Direction objects.\r\n * @type {Object.<string, Direction>}\r\n */\r\nexport const DIRECTIONS = {\r\n    [DIRECTION_LEFT]:  { dx: -1, dy: 0 },\r\n    [DIRECTION_RIGHT]: { dx: 1,  dy: 0 },\r\n    [DIRECTION_UP]:    { dx: 0,  dy: -1 },\r\n    [DIRECTION_DOWN]:  { dx: 0,  dy: 1 },\r\n};\r\n\r\n/**\r\n * Gets the Direction object for a given direction string.\r\n * @param {string} direction - direction string\r\n * @returns {Direction | null} Direction object or null if not found\r\n */\r\nexport function getDirection(direction) {\r\n    return DIRECTIONS[direction.toLowerCase()] || null;\r\n}\r\n\r\n/**\r\n * Checks if two directions are opposite to each other.\r\n * @param {Direction} dir1 - first direction\r\n * @param {Direction} dir2 - second direction\r\n * @returns {boolean} true if the directions are opposite; false otherwise\r\n */\r\nexport function isOppositeDirection(dir1, dir2) {\r\n    return dir1.dx === -dir2.dx && dir1.dy === -dir2.dy;\r\n}\r\n\r\n/**\r\n * Normalizes a direction vector to have a magnitude of 1.\r\n * @param {number} dx - x component of the direction\r\n * @param {number} dy - y component of the direction\r\n * @returns {Direction} normalized direction\r\n */\r\nexport function normalizeDirection(dx, dy) {\r\n    const magnitude = Math.max(Math.abs(dx), Math.abs(dy));\r\n    if (magnitude === 0) {\r\n        return { dx: 0, dy: 0 };\r\n    }\r\n    return { dx: dx / magnitude, dy: dy / magnitude };\r\n}\r\n","import { GAME_CONFIG } from './config';\r\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from './direction';\r\n\r\nconst { INPUT } = GAME_CONFIG;\r\n\r\n/**\r\n * Represents a visual indicator for motion controls.\r\n */\r\nexport class MotionControlIndicator {\r\n\r\n    /**\r\n     * @param {HTMLDivElement} container - container element to render the indicator in\r\n     * @param {Object} [options={}] - configuration options for the indicator\r\n     * @param {boolean} [options.showInfo=true] - whether to show additional information\r\n     * @param {string} [options.position='inline'] - position of the indicator ('inline' or 'corner')\r\n     */\r\n    constructor(container, options = {}) {\r\n        this.container = container;\r\n        this.options = {\r\n            showInfo: true,\r\n            position: 'inline',\r\n            ...options\r\n        };\r\n        this._create();\r\n    }\r\n\r\n    /**\r\n     * Updates the motion control indicator based on the current orientation and direction.\r\n     * @param {{ beta: number, gamma: number }} orientation - current device orientation\r\n     * @param {string|null} direction - current direction of movement (UP, DOWN, LEFT, RIGHT, or null)\r\n     */\r\n    update(orientation, direction) {\r\n        const { beta, gamma } = orientation;\r\n        const maxTilt = 30;\r\n        const tiltX = Math.min(Math.max(gamma, -maxTilt), maxTilt) / maxTilt;\r\n        const tiltY = Math.min(Math.max(beta, -maxTilt), maxTilt) / maxTilt;\r\n\r\n        const dotPx = this.options.position === 'corner' ? 40 : 60;\r\n        if (this.dot instanceof HTMLDivElement) {\r\n            this.dot.style.transform = `translate(${tiltX * dotPx}px, ${tiltY * dotPx}px)`;\r\n        }\r\n\r\n        if (this.arrows) {\r\n            this.arrows.forEach(arrow => arrow.classList.remove('active'));\r\n        }\r\n        if (direction) {\r\n            const activeArrow = this.container.querySelector(`.arrow.${direction.toLowerCase()}`);\r\n            if (activeArrow instanceof HTMLDivElement) {\r\n                activeArrow.classList.add('active')\r\n            }\r\n\r\n            if (this.options.showInfo && this.directionValue instanceof HTMLSpanElement) {\r\n                if (this.directionValue.textContent !== direction) {\r\n                    this.directionValue.classList.add('highlight');\r\n                    this.directionValue.textContent = direction;\r\n                    setTimeout(() => {\r\n                        if (this.directionValue instanceof HTMLSpanElement) {\r\n                            this.directionValue.classList.remove('highlight');\r\n                        }\r\n                    }, 300);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.options.showInfo) {\r\n            if (this.betaValue instanceof HTMLSpanElement) {\r\n                this.betaValue.textContent = beta.toFixed(2);\r\n            }\r\n            if (this.gammaValue instanceof HTMLSpanElement) {\r\n                this.gammaValue.textContent = gamma.toFixed(2);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes the motion control indicator visible, if it exists.\r\n     */\r\n    show() {\r\n        if (this.container) {\r\n            this.container.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the motion control indicator, if it exists.\r\n     */\r\n    hide() {\r\n        if (this.container) {\r\n            this.container.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the DOM elements for the motion control indicator.\r\n     * @private\r\n     */\r\n    _create() {\r\n        this.container.innerHTML = `\r\n            <div class=\"motion-indicator ${this.options.position}\">\r\n                <div class=\"tilt-indicator ${this.options.position}\">\r\n                    <div class=\"dot\"></div>\r\n                    <div class=\"arrow up ${this.options.position}\">\\u25B2\\uFE0E</div>\r\n                    <div class=\"arrow down ${this.options.position}\">\\u25BC\\uFE0E</div>\r\n                    <div class=\"arrow left ${this.options.position}\">\\u25C0\\uFE0E</div>\r\n                    <div class=\"arrow right ${this.options.position}\">\\u25B6\\uFE0E</div>\r\n                </div>\r\n                ${this.options.showInfo ? `\r\n                <div class=\"info\">\r\n                    <p>Direction: <span class=\"direction-value\">None</span></p>\r\n                    <p>Beta: <span class=\"beta-value\">0.00</span>°</p>\r\n                    <p>Gamma: <span class=\"gamma-value\">0.00</span>°</p>\r\n                </div>\r\n                ` : ''}\r\n            </div>\r\n        `;\r\n\r\n        this.dot = this.container.querySelector('.dot');\r\n        this.arrows = this.container.querySelectorAll('.arrow');\r\n        this.directionValue = this.container.querySelector('.direction-value');\r\n        this.betaValue = this.container.querySelector('.beta-value');\r\n        this.gammaValue = this.container.querySelector('.gamma-value');\r\n\r\n        this._addStyles();\r\n    }\r\n\r\n    /**\r\n     * Adds the necessary styles for the motion control indicator.\r\n     * @private\r\n     */\r\n    _addStyles() {\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            .motion-indicator {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n            }\r\n            .motion-indicator.corner {\r\n                position: fixed;\r\n                bottom: 20px;\r\n                right: 20px;\r\n                background: white;\r\n                padding: 10px;\r\n                border-radius: 10px;\r\n                box-shadow: 0 0 10px rgba(0,0,0,0.1);\r\n            }\r\n            .tilt-indicator {\r\n                width: 150px;\r\n                height: 150px;\r\n                border: 2px solid #ccc;\r\n                border-radius: 10px;\r\n                position: relative;\r\n                overflow: hidden;\r\n            }\r\n            .tilt-indicator.corner {\r\n                width: 100px;\r\n                height: 100px;\r\n            }\r\n            .dot {\r\n                width: 20px;\r\n                height: 20px;\r\n                background: blue;\r\n                border-radius: 50%;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n                transition: transform 0.1s ease;\r\n            }\r\n            .arrow {\r\n                position: absolute;\r\n                color: #ccc;\r\n                font-size: 24px;\r\n                transition: color 0.3s ease;\r\n            }\r\n            .arrow.up { top: 10px; left: 50%; transform: translateX(-50%); }\r\n            .arrow.down { bottom: 10px; left: 50%; transform: translateX(-50%); }\r\n            .arrow.left { left: 10px; top: 50%; transform: translateY(-50%); }\r\n            .arrow.right { right: 10px; top: 50%; transform: translateY(-50%); }\r\n            .arrow.active { color: green; }\r\n            .arrow.up.corner { top: 5px; }\r\n            .arrow.down.corner { bottom: 5px; }\r\n            .arrow.left.corner { left: 5px; }\r\n            .arrow.right.corner { right: 5px; }\r\n            .info {\r\n                text-align: left;\r\n                margin-left: 20px;\r\n            }\r\n            .info p {\r\n                margin: 5px 0;\r\n            }\r\n            .direction-value {\r\n                display: inline-block;\r\n                padding: 2px 8px;\r\n                border-radius: 4px;\r\n                transition: background-color 0.3s ease;\r\n            }\r\n            .direction-value.highlight {\r\n                background-color: #ffd700;\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the motion control based on the current and last device orientation,\r\n * as well as the time between updates to prevent overly frequent updates.\r\n *\r\n * @param {{ beta: number, gamma: number }} currentOrientation - current device orientation\r\n * @param {{ beta: number, gamma: number }} lastOrientation - last device orientation\r\n * @param {number} currentUpdateTime - timestamp of the current update\r\n * @param {number} lastUpdateTime - timestamp of the last update\r\n *\r\n * @returns {string|null} direction - calculated direction (UP, DOWN, LEFT, RIGHT),\r\n *                        or null if no significant motion or if the update is too soon\r\n */\r\nexport function calculateMotionControl(currentOrientation, lastOrientation, currentUpdateTime, lastUpdateTime) {\r\n    // ensure we are not updating too frequently\r\n    if (currentUpdateTime - lastUpdateTime < INPUT.MOTION_THROTTLE_TIME_MS) {\r\n        return null;\r\n    }\r\n\r\n    // calculate change since last update\r\n    const recentChange = {\r\n        beta: currentOrientation.beta - lastOrientation.beta,\r\n        gamma: currentOrientation.gamma - lastOrientation.gamma\r\n    };\r\n\r\n    return isSignificantMotion(recentChange) ? getDirectionFromOrientation(recentChange) : null;\r\n}\r\n\r\n/**\r\n * Determines if a change in device orientation is significant enough to trigger a direction change.\r\n * Filters out small, unintentional device movements so we respond only to deliberate motions.\r\n * @param {Object} orientationChange - change in device orientation\r\n * @param {number} orientationChange.beta - change in beta (x-axis rotation) in degrees\r\n * @param {number} orientationChange.gamma - change in gamma (y-axis rotation) in degrees\r\n    * @returns {boolean} true if the motion is considered significant; false otherwise\r\n * @private\r\n */\r\nfunction isSignificantMotion(orientationChange) {\r\n    const threshold = INPUT.MOTION_SENSITIVITY;\r\n    return Math.abs(orientationChange.beta) > threshold || Math.abs(orientationChange.gamma) > threshold;\r\n}\r\n\r\n/**\r\n* Determine direction based on orientation change.\r\n* @param {{ beta: number, gamma: number }} orientationChange - the change in device orientation\r\n* @returns {string | null} determined direction or null\r\n* @private\r\n*/\r\nfunction getDirectionFromOrientation(orientationChange) {\r\n    let direction = null;\r\n    if (Math.abs(orientationChange.beta) > Math.abs(orientationChange.gamma)) {\r\n        direction = orientationChange.beta < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n    } else {\r\n        direction = orientationChange.gamma < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return direction;\r\n}\r\n","import { GAME_CONFIG } from './config';\r\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, getDirection, isOppositeDirection, normalizeDirection } from './direction';\r\nimport { PHASE_CLASSNAME, Phase, TELEPORT_CLASSNAME, Teleport } from './item';\r\n\r\nconst { SNAKE } = GAME_CONFIG;\r\n\r\n/**\r\n * Represents snek in the game.\r\n */\r\nexport class Snake {\r\n\r\n    /**\r\n     * @param {number} boardWidth - width of the game board\r\n     * @param {number} boardHeight - height of the game board\r\n     * @param {number} blockSize - size of each block on the board\r\n     */\r\n    constructor(boardWidth, boardHeight, blockSize) {\r\n        this._blockSize = blockSize;\r\n\r\n        // calculate initial position (center of the board)\r\n        const centerX = Math.floor(boardWidth / (2 * blockSize)) * blockSize;\r\n        const centerY = Math.floor(boardHeight / (2 * blockSize)) * blockSize;\r\n\r\n        this._body = this._createBody(centerX, centerY, SNAKE.INITIAL_LENGTH);\r\n\r\n        // set initial velocity\r\n        this._dx = this._dxAtPause = blockSize;\r\n        this._dy = this._dyAtPause = 0;\r\n        this._isChangingDirection = false;\r\n\r\n        // set initial appearance\r\n        this._color = SNAKE.DEFAULT_COLOR;\r\n        this._borderColor = SNAKE.DEFAULT_BORDER_COLOR;\r\n        this._isGlowing = false;\r\n\r\n        this.powerUps = { [TELEPORT_CLASSNAME]: false, [PHASE_CLASSNAME]: false };\r\n\r\n        this._directionMap = new Map([\r\n            [`${blockSize},0`, DIRECTION_RIGHT],\r\n            [`${-blockSize},0`, DIRECTION_LEFT],\r\n            [`0,${-blockSize}`, DIRECTION_UP],\r\n            [`0,${blockSize}`, DIRECTION_DOWN]\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Creates the body of snek.\r\n     * @param {number} centerX - x-coordinate of the center of the board\r\n     * @param {number} centerY - y-coordinate of the center of the board\r\n     * @param {number} length - number of parts composing snek body\r\n     * @returns {{ x: number; y: number; }[]} created snek body\r\n     * @private\r\n     */\r\n    _createBody(centerX, centerY, length) {\r\n        const body = [];\r\n        for (let i = 0; i < length; i++) {\r\n            body.push({\r\n                x: centerX - i * this._blockSize,\r\n                y: centerY\r\n            });\r\n        }\r\n        return body;\r\n    }\r\n\r\n    /**\r\n     * Gets snek's fill color.\r\n     * @returns {string} fill color\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    /**\r\n     * Gets snek's border color.\r\n     * @returns {string} border color\r\n     */\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n\r\n    /**\r\n     * Gets whether snek is glowing.\r\n     * @returns {boolean} true if snek is glowing; false otherwise\r\n     */\r\n    get isGlowing() {\r\n        return this._isGlowing;\r\n    }\r\n\r\n    /**\r\n     * Gets the position of snek's head.\r\n     * @returns {{ x: number; y: number }} head position\r\n     */\r\n    getHeadPosition() {\r\n        return { ...this._body[0] };\r\n    }\r\n\r\n    /**\r\n     * Gets the current direction of snek.\r\n     * @returns {string} current direction ('left', 'right', 'up', or 'down')\r\n     */\r\n    getCurrentDirection() {\r\n        const key = `${this._dx},${this._dy}`;\r\n        return this._directionMap.get(key) || 'unknown';\r\n    }\r\n\r\n    /**\r\n     * Moves snek in its current direction.\r\n     * @param {boolean} growing whether snek should grow\r\n     */\r\n    move(growing = false) {\r\n        this._advanceHead();\r\n        if (!growing) {\r\n            this._advanceTail();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Advances snek's head.\r\n     */\r\n    _advanceHead() {\r\n        // note: round to snap snek movement to grid, as defined by blockSize\r\n        const head = {\r\n            x: Math.round((this.getHeadPosition().x + this._dx) / this._blockSize) * this._blockSize,\r\n            y: Math.round((this.getHeadPosition().y + this._dy) / this._blockSize) * this._blockSize\r\n        };\r\n        this._body.unshift(head);\r\n\r\n        this._isChangingDirection = false;\r\n\r\n        // TODO: add to control panel\r\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\r\n    }\r\n\r\n    /**\r\n     * Advances snek's tail (removes the last segment).\r\n     */\r\n    _advanceTail() {\r\n        this._body.pop();\r\n    }\r\n\r\n    /**\r\n     * Teleports snek's head to a new position.\r\n     * Useful for unit testing.\r\n     * @param {{ x: number; y: number }} newPosition new position for the head\r\n     */\r\n    teleportHead(newPosition) {\r\n        this._body[0] = { ...newPosition };\r\n    }\r\n\r\n    /**\r\n     * Executes a callback for each segment of snek's body.\r\n     * @param {(segment: { x: number; y: number }, index: number) => void} callback\r\n     */\r\n    forEachSegment(callback) {\r\n        this._body.forEach((segment, index) => callback({ ...segment }, index));\r\n    }\r\n\r\n    /**\r\n     * Pauses snek's movement.\r\n     */\r\n    pause() {\r\n        // save velocity at pause\r\n        this._dxAtPause = this._dx;\r\n        this._dyAtPause = this._dy;\r\n        // set velocity to 0\r\n        this._dx = this._dy = 0;\r\n    }\r\n\r\n    /**\r\n     * Resumes snek's movement after a pause.\r\n     */\r\n    unpause() {\r\n        // set velocity to state before pause\r\n        this._dx = this._dxAtPause;\r\n        this._dy = this._dyAtPause;\r\n    }\r\n\r\n    /**\r\n     * Checks if snek has eaten an item.\r\n     * @param {import('./item').Item} item - item to check\r\n     * @returns {boolean} true if snek has eaten the item; false otherwise\r\n     */\r\n    didEat(item) {\r\n        let head = this.getHeadPosition();\r\n        return head.x === item.x && head.y === item.y;\r\n    }\r\n\r\n    /**\r\n     * Equips snek with a power-up\r\n     * @param {import('./item').Item} item - power-up item to equip\r\n     */\r\n    equip(item) {\r\n        if (item instanceof Teleport) this.powerUps[TELEPORT_CLASSNAME] = true;\r\n        if (item instanceof Phase) {\r\n            this.powerUps[PHASE_CLASSNAME] = true;\r\n            this.setGlow(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the glow effect on snek.\r\n     * @param {boolean} shouldGlow - whether snek should glow\r\n     */\r\n    setGlow(shouldGlow) {\r\n        if (shouldGlow === this.isGlowing) return;\r\n\r\n        this._isGlowing = shouldGlow;\r\n\r\n        this._borderColor = shouldGlow ? SNAKE.PHASE_BORDER_COLOR : SNAKE.DEFAULT_BORDER_COLOR;\r\n\r\n        // console.log(`[snek] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if snek has collided with itself or the board boundaries.\r\n     * @param {number} boardWidth - width of the game board\r\n     * @param {number} boardHeight - height of the game board.\r\n     * @param {number} blockSize - size of each block on the board\r\n     * @returns {boolean} true if snek has collided; false otherwise\r\n     */\r\n    didCollide(boardWidth, boardHeight, blockSize) {\r\n        let head = this.getHeadPosition();\r\n\r\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\r\n        const collidesWithSelf = this._body.slice(4).some(segment => segment.x === head.x && segment.y === head.y);\r\n        if (collidesWithSelf) {\r\n            if (this.powerUps[PHASE_CLASSNAME]) {\r\n                // if phase powerup is equipped, decrement, ignore collision, and continue game\r\n                this.powerUps[PHASE_CLASSNAME] = false;\r\n                this.setGlow(false);\r\n\r\n                console.log('snek phased!');\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // check for collisions with walls\r\n        const hitLeftWall = head.x < 0;\r\n        const hitRightWall = head.x + blockSize > boardWidth;\r\n        const hitTopWall = head.y < 0;\r\n        const hitBottomWall = head.y + blockSize > boardHeight;\r\n\r\n        const hitWall = hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\r\n\r\n        if (!hitWall) { return false; }\r\n\r\n        // if teleport power is equipped, decrement, teleport, and continue game\r\n        if (this.powerUps[TELEPORT_CLASSNAME]) {\r\n            this.powerUps[TELEPORT_CLASSNAME] = false;\r\n\r\n            // teleport to opposite side of the board\r\n            if (hitLeftWall) {\r\n                this.teleportHead({x: boardWidth - blockSize, y: head.y});\r\n            } else if (hitRightWall) {\r\n                this.teleportHead({x: 0, y: head.y});\r\n            } else if (hitTopWall) {\r\n                this.teleportHead({x: head.x, y: boardHeight - blockSize});\r\n            } else if (hitBottomWall) {\r\n                this.teleportHead({x: head.x, y: 0});\r\n            }\r\n\r\n            console.log('snek teleported!');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Changes the direction of snek.\r\n     * @param {string} direction - new direction\r\n     * @returns {boolean} true if snek direction was changed; false otherwise\r\n     */\r\n    changeDirection(direction) {\r\n        // prevent changing direction multiple times before the next move\r\n        if (this._isChangingDirection) return false;\r\n\r\n        const newDirection = getDirection(direction);\r\n        if (!newDirection) return false;\r\n\r\n        const currentDirection = this._getCurrentDirection();\r\n        // prevent snek from moving back on itself\r\n        if (isOppositeDirection(currentDirection, newDirection)) return false;\r\n\r\n        this._setNewDirection(newDirection);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the current direction of snek.\r\n     * @returns {import('./direction').Direction} current direction\r\n     * @private\r\n     */\r\n    _getCurrentDirection() {\r\n        // normalize the current velocity to get direction\r\n        return normalizeDirection(this._dx, this._dy);\r\n    }\r\n\r\n    /**\r\n     * Sets a new direction for snek.\r\n     * @param {import('./direction').Direction} direction - new direction\r\n     * @private\r\n     */\r\n    _setNewDirection(direction) {\r\n        this._isChangingDirection = true;\r\n        this._dx = direction.dx * this._blockSize;\r\n        this._dy = direction.dy * this._blockSize;\r\n    }\r\n}\r\n","import { GAME_CONFIG } from '../config';\r\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from '../direction';\r\nimport { calculateMotionControl } from '../motion';\r\n\r\nconst { INPUT } = GAME_CONFIG;\r\n\r\nconst SPACE_KEY = 'Space';\r\nconst LEFT_KEY = 'ArrowLeft';\r\nconst RIGHT_KEY = 'ArrowRight';\r\nconst UP_KEY = 'ArrowUp';\r\nconst DOWN_KEY = 'ArrowDown';\r\n\r\n/**\r\n * global var to persist permission state across game sessions.\r\n * possible values: 'unknown', 'requesting', 'granted', 'denied'\r\n * */\r\nlet motionPermissionState = 'unknown';\r\n\r\n/**\r\n * Handles user input for the game.\r\n */\r\nexport class InputHandler {\r\n    /**\r\n     * @param {import('./game').Game} game - game instance\r\n     */\r\n    constructor(game) {\r\n        this._game = game;\r\n        this._lastOrientation = {\r\n            beta: 0,  // rotation around x-axis (-180 to 180)\r\n            gamma: 0  // rotation around y-axis (-90 to 90)\r\n        };\r\n        this._lastOrientationUpdateTime = 0;\r\n        this._touchStart = { x: 0, y: 0 };\r\n        this._touchEnd = { x: 0, y: 0 };\r\n        this._boundMethods = this._bindMethods();\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an object containing all event handler methods bound to the current instance of InputHandler.\r\n     * Ensures they always have the correct `this` context when called, regardless of how they are invoked.\r\n     * @returns {Object} object containing bound method references\r\n     * @private\r\n     */\r\n    _bindMethods() {\r\n        return {\r\n            handleKeyInput: this._handleKeyInput.bind(this),\r\n            handleDeviceMovement: this._handleDeviceMovement.bind(this),\r\n            handleVisibilityChange: this._handleVisibilityChange.bind(this),\r\n            handlePauseClick: this._handlePauseClick.bind(this),\r\n            requestDeviceOrientation: this._requestDeviceOrientation.bind(this),\r\n            enterFullScreen: this._game.board.enterFullScreen.bind(this._game.board),\r\n            handleTouchStart: this._handleTouchStart.bind(this),\r\n            handleTouchEnd: this._handleTouchEnd.bind(this),\r\n            handleRestart: this._handleRestart.bind(this)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Manages all control event listeners for the game.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     */\r\n    manageGameControls(shouldAdd) {\r\n        this._manageKeyboardControls(shouldAdd);\r\n        this._manageMotionControls(shouldAdd);\r\n        this._manageTouchControls(shouldAdd);\r\n        this._manageClickControls(shouldAdd);\r\n        this._manageVisibilityControl(shouldAdd);\r\n    }\r\n\r\n    /**\r\n     * Manages controls for restarting the game.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     */\r\n    manageRestartControls(shouldAdd) {\r\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\r\n        if (shouldAdd && !this._game.motionControl.active) {\r\n            // remove existing keyboard listener to avoid conflicts with new restart controls\r\n            document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\r\n        }\r\n        document[action]('keydown', this._boundMethods.handleRestart);\r\n        document[action]('click', this._boundMethods.handleRestart);\r\n    }\r\n\r\n    /**\r\n     * Manages keyboard control event listeners for the game.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     * @private\r\n     */\r\n    _manageKeyboardControls(shouldAdd) {\r\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\r\n        document[action]('keydown', this._boundMethods.handleKeyInput);\r\n    }\r\n\r\n    /**\r\n     * Manages touch control event listeners for the game.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     * @private\r\n     */\r\n    _manageTouchControls(shouldAdd) {\r\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\r\n        this._game.board.canvas[action]('touchstart', this._boundMethods.handleTouchStart);\r\n        this._game.board.canvas[action]('touchend', this._boundMethods.handleTouchEnd);\r\n    }\r\n\r\n    /**\r\n     * Manages click control event listeners for the game.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     * @private\r\n     */\r\n    _manageClickControls(shouldAdd) {\r\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\r\n        document[action]('click', this._boundMethods.handlePauseClick);\r\n        document[action]('dblclick', this._boundMethods.enterFullScreen);\r\n    }\r\n\r\n    /**\r\n     * Set up visibility change control event listeners for the game.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     * @private\r\n     */\r\n    _manageVisibilityControl(shouldAdd) {\r\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\r\n        document[action]('visibilitychange', this._boundMethods.handleVisibilityChange, false);\r\n    }\r\n\r\n    /**\r\n     * Set up motion control event listeners for the game, if available.\r\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\r\n     * @private\r\n     */\r\n    _manageMotionControls(shouldAdd) {\r\n        if (typeof DeviceOrientationEvent === 'undefined') return;\r\n        shouldAdd ? this._listenToDeviceOrientation() : window.removeEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\r\n    }\r\n\r\n    /**\r\n     * Checks if device orientation events are supported and sets up the appropriate listeners or permission requests.\r\n     * If permission is required (e.g., on iOS 13+), it creates a button for the user to request permission.\r\n     * If permission is already granted or not required, it activates motion control immediately.\r\n     * @private\r\n     */\r\n    _listenToDeviceOrientation() {\r\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\r\n            if (motionPermissionState === 'granted') {\r\n                this._activateMotionControl();\r\n            } else {\r\n                this._createMotionRequestButton();\r\n            }\r\n        } else {\r\n            window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\r\n        }\r\n    }\r\n\r\n    _createMotionRequestButton() {\r\n        let btn = this._game.board.createMotionRequestButton();\r\n        if (btn) {\r\n            btn.classList.add('show');\r\n            btn.addEventListener('click', this._boundMethods.requestDeviceOrientation);\r\n\r\n            // give user time to grant permission\r\n            if (!this._game.state.paused) {\r\n                this._game.togglePause();\r\n            }\r\n\r\n            motionPermissionState = 'requesting';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles keyboard input.\r\n     * @param {KeyboardEvent} event - keyboard event\r\n     * @private\r\n     */\r\n    _handleKeyInput(event) {\r\n        const keyCommands = {\r\n            [LEFT_KEY]: () => this._game.snake.changeDirection(DIRECTION_LEFT),\r\n            [RIGHT_KEY]: () => this._game.snake.changeDirection(DIRECTION_RIGHT),\r\n            [UP_KEY]: () => this._game.snake.changeDirection(DIRECTION_UP),\r\n            [DOWN_KEY]: () => this._game.snake.changeDirection(DIRECTION_DOWN),\r\n            [SPACE_KEY]: () => this._game.togglePause(),\r\n        };\r\n\r\n        const commandFn = keyCommands[event.code];\r\n        if (commandFn) {\r\n            if (this._game.motionControl.active === null) {\r\n                console.log('key controls activated');\r\n            }\r\n\r\n            // disable motion control when keyboard is used\r\n            // (having both keyboard and motion event listeners makes the game less responsive)\r\n            this._deactivateMotionControl();\r\n\r\n            commandFn();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles click events for pausing the game.\r\n     * Disallows pause clicks while the game is requesting motion permission.\r\n     * @param {MouseEvent} event - The click event object\r\n     * @private\r\n     */\r\n    _handlePauseClick(event) {\r\n        if (motionPermissionState !== 'requesting') {\r\n            this._game.togglePause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles restart events triggered by key press, click, or touch.\r\n     * @param {KeyboardEvent | MouseEvent | TouchEvent} event - event object\r\n     */\r\n    _handleRestart(event) {\r\n        if ((event instanceof KeyboardEvent && event.code === SPACE_KEY) ||\r\n            event.type === 'click' ||\r\n            event.type === 'touchend') {\r\n            this._game.restart();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles device motion input.\r\n     * @param {DeviceOrientationEvent} event - device orientation event\r\n     * @private\r\n     */\r\n    _handleDeviceMovement(event) {\r\n        const currentUpdateTime = Date.now();\r\n        const currentOrientation = {\r\n            beta: event.beta || 0,\r\n            gamma: event.gamma || 0\r\n        }\r\n\r\n        const direction = calculateMotionControl(\r\n            currentOrientation,\r\n            this._lastOrientation,\r\n            currentUpdateTime,\r\n            this._lastOrientationUpdateTime\r\n        );\r\n\r\n        if (direction) {\r\n            // used to determine when to switch from keyboard to motion controls\r\n            if (this._game.motionControl.active === null) {\r\n                this._activateMotionControl();\r\n            }\r\n\r\n            this._game.snake.changeDirection(direction);\r\n            this._lastOrientationUpdateTime = currentUpdateTime;\r\n            this._lastOrientation = currentOrientation;\r\n        }\r\n\r\n        this._game.updateMotionControl(\r\n            currentOrientation,\r\n            this._game.snake.getCurrentDirection()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles visibility change of the document.\r\n     * @private\r\n     */\r\n    _handleVisibilityChange() {\r\n        if (document.hidden && !this._game.state.paused) {\r\n            this._game.togglePause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the touch start event.\r\n     * Records the initial Y position of the touch.\r\n     * @param {TouchEvent} event - touch start event\r\n     * @private\r\n     */\r\n    _handleTouchStart(event) {\r\n        event.preventDefault();\r\n\r\n        const firstTouch = event.changedTouches[0];\r\n        // console.log({\r\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n        // });\r\n\r\n        this._touchStart = { x: firstTouch.screenX, y: firstTouch.screenY };\r\n    }\r\n\r\n    /**\r\n     * Handles the touch end event.\r\n     * Records the final Y position of the touch and calls handleSwipeGesture.\r\n     * @param {TouchEvent} event - touch end event\r\n     * @private\r\n     */\r\n    _handleTouchEnd(event) {\r\n        event.preventDefault();\r\n\r\n        const firstTouch = event.changedTouches[0];\r\n        // console.log({\r\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n        // });\r\n\r\n        this._touchEnd = { x: firstTouch.screenX, y: firstTouch.screenY };\r\n\r\n        this._handleSwipeGesture();\r\n    }\r\n\r\n    /**\r\n     * Handles the gesture based on the swipe direction.\r\n     * Enters fullscreen on upward swipe, exits fullscreen on downward swipe,\r\n     * restarts the game if it has ended, or toggles pause otherwise.\r\n     * @private\r\n     */\r\n    _handleSwipeGesture() {\r\n        const verticalSwipe = this._touchStart.y - this._touchEnd.y;\r\n        if (verticalSwipe > INPUT.SWIPE_SENSITIVITY) {\r\n            // console.log(`swiped UP ${downY-upY}px`);\r\n            this._game.board.enterFullScreen();\r\n        } else if (verticalSwipe < -INPUT.SWIPE_SENSITIVITY) {\r\n            // console.log(`swiped DOWN ${upY-downY}px`);\r\n            this._game.board.exitFullScreen();\r\n        } else if (this._game.state.ended) {\r\n            this._game.restart();\r\n        } else if (motionPermissionState !== 'requesting') {\r\n            // console.log(`togglePause from handleGesture`);\r\n            this._game.togglePause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request device orientation permission.\r\n     * @private\r\n     */\r\n    _requestDeviceOrientation() {\r\n        // iOS 13+ requires permission\r\n        DeviceOrientationEvent.requestPermission()\r\n            .then(state => {\r\n                motionPermissionState = state;\r\n                if (state === 'granted') {\r\n                    this._activateMotionControl();\r\n                    if (this._game.state.paused) {\r\n                        this._game.togglePause();\r\n                    }\r\n                } else {\r\n                    console.log('motion permission denied');\r\n                }\r\n            })\r\n            .catch(console.error)\r\n            .finally(() => {\r\n                this._game.board.removeMotionRequestButton();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Enables motion control for the game.\r\n     * @private\r\n     */\r\n    _activateMotionControl() {\r\n        document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\r\n        window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\r\n\r\n        this._game.board.removeMotionRequestButton();\r\n        this._game.activateMotionControl();\r\n\r\n        console.log('motion controls activated');\r\n    }\r\n\r\n    /**\r\n     * Disables motion control for the game.\r\n     * @private\r\n     */\r\n    _deactivateMotionControl() {\r\n        this._game.board.removeMotionRequestButton();\r\n        window.removeEventListener('deviceorientation', this._handleDeviceMovement);\r\n        this._game.deactivateMotionControl();\r\n    }\r\n\r\n    /**\r\n     * Logs debug information about the current state of motion controls.\r\n     * This method is intended to be called periodically (e.g., in the game loop)\r\n     * to provide ongoing insight into the motion control system's state.\r\n     * @private\r\n     */\r\n    _debugMotionControl() {\r\n        console.log('motion control debug info', {\r\n            motionControlActive: this._game.motionControl.active,\r\n            motionPermissionState: motionPermissionState,\r\n            deviceOrientation: this._lastOrientation,\r\n            isChangingDirection: this._game.snake._isChangingDirection,\r\n            snakeDirection: this._game.snake.getCurrentDirection()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Simulates the presence of the DeviceOrientationEvent.requestPermission API.\r\n     * This method is useful for testing or development environments where the actual API might not be available.\r\n     * It creates a mock DeviceOrientationEvent object with a requestPermission method that always resolves to 'granted'.\r\n     * @static\r\n     * @private\r\n     */\r\n    static _simulateDeviceOrientationRequestPermission() {\r\n        // create DeviceOrientationEvent if it doesn't exist\r\n        if (typeof DeviceOrientationEvent === 'undefined') {\r\n            window.DeviceOrientationEvent = {};\r\n        }\r\n\r\n        // add requestPermission method\r\n        window.DeviceOrientationEvent.requestPermission = () => {\r\n            return new Promise((resolve) => {\r\n                resolve('granted');\r\n            });\r\n        };\r\n\r\n        // modify typeof operator for requestPermission\r\n        Object.defineProperty(Object.prototype, 'requestPermission', {\r\n            value: function() {}\r\n        });\r\n    }\r\n}\r\n\r\n// TODO: consider refactoring to use Command interface again if\r\n// key controls AND mouse/touch/motion controls can all use it\r\n\r\n/**\r\n * Represents a command to pause the game.\r\n */\r\nclass PauseCommand {\r\n\r\n    /**\r\n     * Executes the pause command.\r\n     * @param {import('./game').Game} game - game instance\r\n     */\r\n    execute(game) {\r\n        game.togglePause();\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a command to move snek.\r\n */\r\nclass MoveCommand {\r\n\r\n    /**\r\n     * @param {string} direction - direction to move\r\n     */\r\n    constructor(direction) {\r\n        this.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Executes the move command.\r\n     * @param {import('./game').Game} game - game instance\r\n     */\r\n    execute(game) {\r\n        game.snake.changeDirection(this.direction);\r\n    }\r\n}\r\n","import { GAME_CONFIG } from './config';\r\n\r\nconst { CANVAS } = GAME_CONFIG;\r\n\r\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\r\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\r\n\r\n/**\r\n * A fake \"context manager\" for pixel sharpness.\r\n * https://stackoverflow.com/a/8696641\r\n * @param {CanvasRenderingContext2D} ctx - canvas rendering context\r\n * @param {() => void} cb - callback function to execute within the context\r\n */\r\nfunction withStraddle(ctx, cb) {\r\n    const offset = 0.5;\r\n\r\n    try {\r\n        // turn on 'straddle' trick to avoid blurriness\r\n        ctx.translate(offset, offset);\r\n        cb();\r\n    } finally {\r\n        // turn off 'straddle' trick to avoid blurriness\r\n        ctx.translate(-offset, -offset);\r\n    }\r\n}\r\n\r\n/**\r\n * Draws the game board and background.\r\n * @param {import('./game/game').Game} game - game object\r\n */\r\nexport function drawGame(game) {\r\n    let board = game.board;\r\n    let ctx = board.ctx;\r\n\r\n    ctx.save();\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.filter = board.activeFilter;\r\n\r\n        // set border and background colors\r\n        ctx.fillStyle = board.color;\r\n        if (board.isGlowing) {\r\n            // note: strokeRect doesn't do a good job of bordering the canvas,\r\n            // so we fall back to CSS styling\r\n\r\n            // https://stackoverflow.com/a/5670984\r\n            board.canvas.style.border = 'none'\r\n            board.canvas.style.outline = `${board.borderColor} dashed thin`;\r\n            board.canvas.style.boxShadow = `0 0 10px ${board.color}`;\r\n            board.canvas.style.transition = 'box-shadow linear 1s';\r\n        } else {\r\n            board.canvas.style.border = `2px solid ${board.borderColor}`;\r\n            board.canvas.style.outline = 'none';\r\n            board.canvas.style.boxShadow = 'none';\r\n            board.canvas.style.transition = 'box-shadow linear 0.5s';\r\n        }\r\n\r\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\r\n\r\n        if (game.state.paused) {\r\n            let useExclamation = board.needsPermission();\r\n\r\n            const iconSize = CANVAS.GAME_TEXT_FONT_SIZE * board.ratio;\r\n            const iconPadding = 5 * board.ratio;\r\n\r\n            // since filters don't work on iOS safari, we need another visual aid\r\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\r\n            // or exclamation triangle icon if we still need permissions\r\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\r\n            ctx.font = `${iconSize}px \"bootstrap-icons\"`;\r\n            ctx.fillStyle = useExclamation ? CANVAS.EXCLAMATION_BTN_COLOR : CANVAS.PAUSE_BTN_COLOR;\r\n            ctx.fillText(String.fromCharCode(\r\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\r\n            ), iconPadding, iconSize + iconPadding, board.canvas.width);\r\n        }\r\n    });\r\n\r\n    ctx.restore();\r\n}\r\n\r\n/**\r\n * Draws snek on the game board.\r\n * @param {import('./snake').Snake} snake - snek object\r\n * @param {import('./board').Board} board - game board\r\n */\r\nexport function drawSnake(snake, board) {\r\n    const ctx = board.ctx;\r\n\r\n    ctx.save();\r\n\r\n    withStraddle(ctx, () => {\r\n        if (snake.isGlowing) {\r\n            // https://stackoverflow.com/a/43676108\r\n            ctx.lineCap = 'round';\r\n            ctx.shadowBlur = 18;\r\n            ctx.shadowColor = snake.color;\r\n        }\r\n\r\n        ctx.fillStyle = snake.color;\r\n        ctx.strokeStyle = snake.borderColor;\r\n\r\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} */ segment) => {\r\n            ctx.fillRect(segment.x, segment.y, board.blockSize, board.blockSize);\r\n            ctx.strokeRect(segment.x, segment.y, board.blockSize, board.blockSize);\r\n        });\r\n    });\r\n\r\n    ctx.restore();\r\n}\r\n\r\n/**\r\n * Draws an item on the game board.\r\n * @param {import('./item').Item} item - item object\r\n * @param {import('./board').Board} board - game board\r\n */\r\nexport function drawItem(item, board) {\r\n    let ctx = board.ctx;\r\n    ctx.save();\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = item.fillColor;\r\n        ctx.strokeStyle = item.borderColor;\r\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\r\n    });\r\n\r\n    ctx.restore();\r\n}\r\n\r\n/**\r\n * Draws the current score on the game board.\r\n * @param {number} score - current score\r\n * @param {import('./board').Board} board - game board\r\n */\r\nexport function drawScore(score, board) {\r\n    let ctx = board.ctx;\r\n    ctx.save();\r\n\r\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\r\n    ctx.fillText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) - ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\r\n\r\n    ctx.restore();\r\n}\r\n\r\n/**\r\n * Draws the high score on the game board.\r\n * @param {number} score - high score\r\n * @param {import('./board').Board} board - game board\r\n */\r\nexport function drawHighScore(score, board) {\r\n    let ctx = board.ctx;\r\n    ctx.save();\r\n\r\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.strokeStyle = CANVAS.HIGH_SCORE_TEXT_COLOR;\r\n    ctx.strokeText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) + ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\r\n\r\n    ctx.restore();\r\n}\r\n\r\n/**\r\n * Draws the game over message on the game board.\r\n * @param {import('./board').Board} board - game board\r\n */\r\nexport function drawGameOver(board) {\r\n    let ctx = board.ctx;\r\n    ctx.save();\r\n\r\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\r\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n\r\n    ctx.restore();\r\n}\r\n","import * as defaultCanvas from '../canvas';\r\n\r\n// fn to create render functions with canvas as injected dependency\r\nexport function createRenderFunctions(canvas = defaultCanvas) {\r\n    /**\r\n     * Renders the current game state.\r\n     * @param {import('./game').Game} game - game object to render\r\n     */\r\n    function renderGame(game) {\r\n        canvas.drawGame(game);\r\n        canvas.drawScore(game.state.score, game.board);\r\n        canvas.drawHighScore(game.state.highScore, game.board);\r\n        canvas.drawItem(game.item, game.board);\r\n        canvas.drawSnake(game.snake, game.board);\r\n    }\r\n\r\n    /**\r\n     * Renders the game over state.\r\n     * @param {import('./game').Game} game - game object to render\r\n     */\r\n    function renderGameOver(game) {\r\n        game.board.setEndGameFilter();\r\n        canvas.drawGame(game);\r\n        canvas.drawItem(game.item, game.board);\r\n        canvas.drawSnake(game.snake, game.board);\r\n        canvas.drawGameOver(game.board);\r\n    }\r\n\r\n    return { renderGame, renderGameOver };\r\n}\r\n\r\n// export the default render functions\r\nconst { renderGame, renderGameOver } = createRenderFunctions();\r\nexport { renderGame, renderGameOver };\r\n","import { GAME_CONFIG } from '../config';\r\n\r\nconst { GAME, STATE } = GAME_CONFIG;\r\n\r\n/**\r\n * Represents the state of the game.\r\n */\r\nexport class GameState {\r\n\r\n    constructor() {\r\n        // states\r\n        this._paused = false;\r\n        this._ended = false;\r\n\r\n        // values\r\n        this._score = 0;\r\n        this._highScore = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, 0);\r\n        this._speed = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, GAME.SPEED_MS__ARROW);\r\n    }\r\n\r\n    /**\r\n     * Gets the speed of the game, aka time between frame updates, in milliseconds.\r\n     * @returns {number} game speed\r\n     */\r\n    get speed() {\r\n        return this._speed;\r\n    }\r\n\r\n    /**\r\n     * Gets the current score of the game.\r\n     * @returns {number} current score\r\n     */\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    /**\r\n     * Gets the high score of all games.\r\n     * @returns {number} high score\r\n     */\r\n    get highScore() {\r\n        return this._highScore;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not the game is paused.\r\n     * @returns {boolean} true if game is paused; false otherwise\r\n     */\r\n    get paused() {\r\n        return this._paused;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not the game has ended.\r\n     * @returns {boolean} true if game has ended; false otherwise\r\n     */\r\n    get ended() {\r\n        return this._ended;\r\n    }\r\n\r\n    /**\r\n     * Updates the current score.\r\n     * @param {number} increment - amount to increase the score by\r\n     */\r\n    updateScore(increment) {\r\n        this._score += increment;\r\n    }\r\n\r\n    /**\r\n     * Updates the high score if the current score is higher.\r\n     */\r\n    updateHighScore() {\r\n        if (this.score > this.highScore) {\r\n            this._highScore = this.score;\r\n            this._setItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, this.score);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the high score to 0 and persists this change to localStorage.\r\n     * This operation cannot be undone.\r\n     */\r\n    clearHighScore() {\r\n        this._highScore = 0;\r\n        this._setItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, 0);\r\n    }\r\n\r\n    /**\r\n     * Sets the game speed.\r\n     * @param {number} speed - new game speed to use\r\n     */\r\n    setSpeed(speed) {\r\n        if (typeof speed !== 'number' || isNaN(speed)) {\r\n            return;\r\n        }\r\n        this._speed = Math.max(0, Math.round(speed));\r\n    }\r\n\r\n    /**\r\n     * Toggles the pause state of the game.\r\n     */\r\n    togglePause() {\r\n        this._paused = !this.paused;\r\n    }\r\n\r\n    /**\r\n     * Ends the game and saves the current game speed.\r\n     */\r\n    endGame() {\r\n        this._ended = true;\r\n        this._setItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, this.speed);\r\n    }\r\n\r\n    /**\r\n     * Safely gets an item from localStorage.\r\n     * @param {string} key - The key to retrieve from localStorage\r\n     * @param {*} defaultValue - The default value to return if retrieval fails\r\n     * @returns {*} The value from localStorage or the default value\r\n     * @private\r\n     */\r\n    _getItemSafely(key, defaultValue) {\r\n        try {\r\n            const value = localStorage.getItem(key);\r\n            return value !== null ? JSON.parse(value) : defaultValue;\r\n        } catch (error) {\r\n            console.warn(`Error reading from localStorage: ${error.message}`);\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Safely sets an item in localStorage.\r\n     * @param {string} key - The key to set in localStorage\r\n     * @param {*} value - The value to set\r\n     * @private\r\n     */\r\n    _setItemSafely(key, value) {\r\n        try {\r\n            localStorage.setItem(key, JSON.stringify(value));\r\n        } catch (error) {\r\n            console.warn(`Error writing to localStorage: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n","import { Board } from '../board';\r\nimport { GAME_CONFIG } from '../config';\r\nimport { displayErrorMessage } from '../error';\r\nimport { Food, Item, Phase, TELEPORT_CLASSNAME, Teleport, selectRandomItem } from '../item';\r\nimport { MotionControlIndicator } from '../motion';\r\nimport { Snake } from '../snake';\r\nimport { InputHandler } from './input';\r\nimport { renderGame, renderGameOver } from './render';\r\nimport { GameState } from './state';\r\n\r\nconst { GAME } = GAME_CONFIG;\r\n\r\nconst CANVAS_ID = 'gameCanvas';\r\nconst CONTROL_PANEL_ID = 'controlPanel';\r\nconst MOTION_INDICATOR_ID = 'motionIndicator';\r\n\r\n/**\r\n * global var to persist indicator visibility across game sessions.\r\n * */\r\nlet motionIndicatorVisible = false;\r\n\r\n/**\r\n * Represents the main game logic and state.\r\n */\r\nexport class Game {\r\n\r\n    /**\r\n     * @param {Board} board - game board\r\n     * @param {Snake} snake - snek\r\n     * @param {Item} item - current game item\r\n     */\r\n    constructor(board, snake, item) {\r\n        this.board = board;\r\n        this.snake = snake;\r\n        this.item = item;\r\n\r\n        this.state = new GameState();\r\n        this.input = new InputHandler(this);\r\n\r\n        this._lastUpdateTimestamp = 0;\r\n\r\n        /**\r\n         * @type {{\r\n        *   active: boolean | null,\r\n        *   orientation: { beta: number, gamma: number },\r\n        *   direction: string | null,\r\n        *   indicatorVisible: boolean\r\n        * }}\r\n        */\r\n        this.motionControl = {\r\n            active: null,\r\n            orientation: { beta: 0, gamma: 0 },\r\n            direction: null,\r\n            indicatorVisible: motionIndicatorVisible\r\n        };\r\n\r\n        this._boundMethods = {\r\n            handleClearHighScore: this._handleClearHighScore.bind(this),\r\n            handleToggleMotionIndicator: this._handleToggleMotionIndicator.bind(this)\r\n        };\r\n\r\n        this._initializeUI();\r\n    }\r\n\r\n    /**\r\n     * Runs the game loop.\r\n     * @param {DOMHighResTimeStamp} now - current timestamp\r\n     */\r\n    run(now) {\r\n        if (this._shouldUpdateFrame(now)) {\r\n            this._updateFrame();\r\n            if (this.state._ended) {\r\n                renderGameOver(this);\r\n                return;\r\n            } else {\r\n                renderGame(this);\r\n            }\r\n        }\r\n\r\n        // run game loop again\r\n        requestAnimationFrame((t) => this.run(t));\r\n    }\r\n\r\n    /**\r\n     * Toggles pause state of the game.\r\n     */\r\n    togglePause() {\r\n        this.state.togglePause();\r\n\r\n        if (this.state.paused) {\r\n            this.snake.pause();\r\n            this.board.setPauseGameFilter();\r\n        } else {\r\n            this.snake.unpause();\r\n            this.board.resetFilter();\r\n        }\r\n\r\n        // TODO: pause/unpause any game sounds\r\n        // this.audio.togglePause();\r\n\r\n        console.log(`game ${this.state.paused ? 'paused' : 'resumed'}`);\r\n    }\r\n\r\n    /**\r\n     * Restarts the game.\r\n     */\r\n    restart() {\r\n        this.input.manageRestartControls(false);\r\n        this._removeEventListeners();\r\n        console.log('game restarted');\r\n        runGame();\r\n    }\r\n\r\n    /**\r\n     * Determines if the current frame of the game loop should be updated.\r\n     * @param {DOMHighResTimeStamp} now - current timestamp\r\n     * @returns {boolean} true if the frame should update; false otherwise\r\n     * @private\r\n     */\r\n    _shouldUpdateFrame(now) {\r\n        if (now - this._lastUpdateTimestamp >= this.state.speed) {\r\n            this._lastUpdateTimestamp = now;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Updates the current frame based on game logic.\r\n     * This method checks the game state and advances snek as necessary.\r\n     * @private\r\n     */\r\n    _updateFrame() {\r\n        if (this.state.ended) return;\r\n        if (!this.state.paused) {\r\n            this._advanceSnake();\r\n            // TODO: add to control panel\r\n            // this.input._debugMotionControl();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Snek movement, collision, and item consumption logic.\r\n     * @private\r\n     */\r\n    _advanceSnake() {\r\n        let didEatBeforeMove = this.snake.didEat(this.item);\r\n\r\n        // move snek, growing if it ate an item\r\n        this.snake.move(didEatBeforeMove);\r\n\r\n        if (didEatBeforeMove) {\r\n            console.log(`snek ate item: ${this.item.type.toUpperCase()}`);\r\n\r\n            this.state.updateScore(GAME.SCORE_INCREMENT);\r\n\r\n            // apply item effects\r\n            this.snake.equip(this.item);\r\n\r\n            // update board effects if necessary\r\n            this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\r\n\r\n            // generate a new item\r\n            this._generateNewItem();\r\n        } else {\r\n            // optionally regenerate item based on game conditions\r\n            this._maybeRegenerateItem();\r\n        }\r\n\r\n        // TODO: add to control panel\r\n        // console.log(`${this.item.type}: ${this.item.x}, ${this.item.y}`);\r\n\r\n        if (this._checkCollision()) {\r\n            this._end();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a new item on the board.\r\n     * @private\r\n     */\r\n    _generateNewItem() {\r\n        let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\r\n            { alwaysReturnItem: true, reducePowerUpProbability: false }\r\n        );\r\n        if (itemClass !== null) {\r\n            this.item = new itemClass(this.board, this.snake);\r\n            console.log(`new item generated: ${this.item.type.toUpperCase()}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Possibly regenerates the current item based on game conditions:\r\n     * (1) when the player is already performing well (high score),\r\n     * we make the food volatile, or able to change or disappear, like power-ups are.\r\n     * (2) when there's already a power-up on the board, we reduce the chance of chain-spawning power-ups.\r\n     * @private\r\n     */\r\n    _maybeRegenerateItem() {\r\n        const foodIsVolatile = this.state.score >= GAME.SCORE_THRESHOLD_FOR_VOLATILE_FOOD;\r\n        if (foodIsVolatile || this.item instanceof Teleport || this.item instanceof Phase) {\r\n            let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\r\n                {alwaysReturnItem: false, reducePowerUpProbability: true}\r\n            );\r\n            if (itemClass !== null) {\r\n                this.item = new itemClass(this.board, this.snake);\r\n                console.log(`item regenerated: ${this.item.type.toUpperCase()}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if snek has collided with the board boundaries or itself.\r\n     * @returns {boolean} true if a collision occurred; false otherwise\r\n     * @private\r\n     */\r\n    _checkCollision() {\r\n        // always set game board glow based on whether or not teleport powerup is equipped\r\n        this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\r\n        return this.snake.didCollide(this.board.width, this.board.height, this.board.blockSize);\r\n    }\r\n\r\n    /**\r\n     * Ends the game and updates final state.\r\n     * @private\r\n     */\r\n    _end() {\r\n        this.state.endGame();\r\n        this.state.updateHighScore();\r\n\r\n        this.input.manageGameControls(false);\r\n        this.input.manageRestartControls(true);\r\n\r\n        console.log(`game over - final score: ${this.state.score}; high score: ${this.state.highScore}`);\r\n    }\r\n\r\n    /**\r\n     * Resets the high score to zero and logs the change.\r\n     * Updates the game state but does not trigger a re-render.\r\n     * @private\r\n     */\r\n    _clearHighScore() {\r\n        const oldHighScore = this.state.highScore;\r\n        this.state.clearHighScore();\r\n        console.log(`high score cleared. old high score: ${oldHighScore}`);\r\n    }\r\n\r\n    /**\r\n     * Updates the motion control state with new orientation and direction values.\r\n     * If motion control is not already active, this will activate it.\r\n     * Also updates the motion indicator UI if it's visible.\r\n     *\r\n     * @param {{ beta: number, gamma: number }} orientation - current device orientation angles\r\n     * @param {string|null} direction - current movement direction of the snake ('left', 'right', 'up', 'down', or null)\r\n     */\r\n    updateMotionControl(orientation, direction) {\r\n        this.motionControl.orientation = orientation;\r\n        if (direction) {\r\n            this.motionControl.direction = direction;\r\n        }\r\n\r\n        if (this.motionControl.active === null) {\r\n            this.activateMotionControl();\r\n        }\r\n\r\n        if (this.motionIndicator && this.motionControl.indicatorVisible) {\r\n            this.motionIndicator.update(orientation, direction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Activates motion controls for the game.\r\n     * Sets the game speed to motion-appropriate speed, shows the motion indicator toggle button,\r\n     * and updates the motion control state to active.\r\n     */\r\n    activateMotionControl() {\r\n        this.motionControl.active = true;\r\n        this.state.setSpeed(GAME.SPEED_MS__MOTION);\r\n        this.board.showMotionIndicatorToggleButton();\r\n    }\r\n\r\n    /**\r\n     * Deactivates motion controls for the game.\r\n     * Hides the motion indicator, resets to default game speed,\r\n     * hides the motion indicator toggle button, and updates the motion control state.\r\n     */\r\n    deactivateMotionControl() {\r\n        this.motionControl.active = false;\r\n        this.motionControl.indicatorVisible = false;\r\n        if (this.motionIndicator) {\r\n            this.motionIndicator.hide();\r\n        }\r\n        this.state.setSpeed(GAME.SPEED_MS__ARROW);\r\n        this.board.hideMotionIndicatorToggleButton();\r\n    }\r\n\r\n    // <!-- UI HELPER METHODS BELOW -->\r\n    // <!-- TODO: fully refactor to be in Board instead, without circular dep (GameEngine) ? -->\r\n\r\n    /**\r\n     * Initializes all UI components for the game / control panel.\r\n     * Sets up the motion indicator, motion toggle button, and high score clear button.\r\n     * @private\r\n     */\r\n    _initializeUI() {\r\n        this._setupMotionIndicator();\r\n        this._setupMotionToggleButton();\r\n        this._setupClearHighScoreButton();\r\n    }\r\n\r\n    /**\r\n     * Sets up the motion control indicator UI component.\r\n     * Creates a new MotionControlIndicator if the required DOM element exists,\r\n     * otherwise logs a warning and continues without the indicator.\r\n     * @private\r\n     */\r\n    _setupMotionIndicator() {\r\n        const motionIndicatorDiv = document.getElementById(MOTION_INDICATOR_ID);\r\n        if (!(motionIndicatorDiv instanceof HTMLDivElement)) {\r\n            console.warn(`Div with id '${MOTION_INDICATOR_ID}' not found. Motion control indicator will not be displayed.`);\r\n            return;\r\n        }\r\n\r\n        this.motionIndicator = new MotionControlIndicator(motionIndicatorDiv, {\r\n            showInfo: false,\r\n            position: 'corner'\r\n        });\r\n\r\n        if (this.motionControl.indicatorVisible) {\r\n            this.motionIndicator.show();\r\n        } else {\r\n            this.motionIndicator.hide();\r\n        }\r\n        this.board.updateMotionIndicatorToggleButtonTitle(this.motionControl.indicatorVisible);\r\n    }\r\n\r\n    /**\r\n     * Sets up the motion indicator toggle button.\r\n     * Creates the button and attaches the toggle event handler.\r\n     * @private\r\n     */\r\n    _setupMotionToggleButton() {\r\n        const toggleButton = this.board.createMotionIndicatorToggleButton();\r\n        if (toggleButton) {\r\n            toggleButton.addEventListener('click', this._boundMethods.handleToggleMotionIndicator);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets up the clear high score button.\r\n     * Creates the button and attaches the clear score event handler.\r\n     * @private\r\n     */\r\n    _setupClearHighScoreButton() {\r\n        const clearButton = this.board.createClearHighScoreButton();\r\n        if (clearButton) {\r\n            clearButton.addEventListener('click', this._boundMethods.handleClearHighScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles toggling the motion indicator's visibility.\r\n     * Prevents default event behavior and propagation, then updates\r\n     * both the indicator's visibility state and the toggle button's title.\r\n     * @private\r\n     * @param {MouseEvent} event - click event object\r\n     */\r\n    _handleToggleMotionIndicator(event) {\r\n        this.motionControl.indicatorVisible = !this.motionControl.indicatorVisible;\r\n        motionIndicatorVisible = this.motionControl.indicatorVisible;\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.motionIndicator && this.motionControl.indicatorVisible) {\r\n            this.motionIndicator.show();\r\n        } else if (this.motionIndicator) {\r\n            this.motionIndicator.hide();\r\n        }\r\n        this.board.updateMotionIndicatorToggleButtonTitle(this.motionControl.indicatorVisible);\r\n    }\r\n\r\n    /**\r\n     * Handles clearing the high score.\r\n     * Prevents default event behavior and propagation, then clears the high score.\r\n     * @private\r\n     * @param {MouseEvent} event - click event object\r\n     */\r\n    _handleClearHighScore(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this._clearHighScore();\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners added during game initialization.\r\n     * @private\r\n     */\r\n    _removeEventListeners() {\r\n        const clearButton = this.board.getClearHighScoreButton();\r\n        if (clearButton) {\r\n            clearButton.removeEventListener('click', this._boundMethods.handleClearHighScore);\r\n        }\r\n\r\n        const toggleButton = this.board.getMotionIndicatorToggleButton();\r\n        if (toggleButton) {\r\n            toggleButton.removeEventListener('click', this._boundMethods.handleToggleMotionIndicator);\r\n        }\r\n    }\r\n}\r\n\r\n// <!-- GAME EXECUTION HELPERS BELOW -->\r\n\r\n/**\r\n * Initializes and runs the game.\r\n */\r\nexport function runGame() {\r\n    try {\r\n        let board = _initBoard();\r\n        let snake = new Snake(board.height, board.height, board.blockSize);\r\n        let food = new Food(board, snake);\r\n        let game = new Game(board, snake, food);\r\n\r\n        game.input.manageGameControls(true);\r\n\r\n        requestAnimationFrame((t) => game.run(t));\r\n    } catch (error) {\r\n        console.error('failed to initialize game:', error);\r\n        // display an error message to the user\r\n        displayErrorMessage('Failed to start the game. Please refresh the page and try again.', document.getElementById(CANVAS_ID));\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes the game board.\r\n * @returns {Board} initialized game board\r\n * @throws {Error} ff the canvas element is not found or is not an HTMLCanvasElement\r\n * @private\r\n */\r\nfunction _initBoard() {\r\n    let canvas, ctrl_panel;\r\n    if (!(canvas = document.getElementById(CANVAS_ID))) {\r\n        throw new Error(`HTML canvas with id '${CANVAS_ID}' not found`);\r\n    }\r\n    if (!(canvas instanceof HTMLCanvasElement)) {\r\n        throw new Error(`#${CANVAS_ID} element is not an HTML canvas`);\r\n    }\r\n    if (!(ctrl_panel = document.getElementById(CONTROL_PANEL_ID))) {\r\n        console.warn(`control panel element with id '${CONTROL_PANEL_ID}' not found`);\r\n    }\r\n    if (!(ctrl_panel instanceof HTMLDivElement)) {\r\n        console.warn(`#${CONTROL_PANEL_ID} element is not a div`);\r\n        ctrl_panel = null;\r\n    }\r\n    if (ctrl_panel === null) {\r\n        console.warn('proceeding without control panel')\r\n    }\r\n\r\n    let board = new Board(canvas, ctrl_panel);\r\n\r\n    return board;\r\n}\r\n","import { runGame } from './game/game';\r\n\r\n// note: un-comment for debugging\r\n// import { InputHandler } from './game/input';\r\n// InputHandler._simulateDeviceOrientationRequestPermission();\r\n\r\nrunGame();\r\n"],"names":["GAME_CONFIG","BOARD","CTRL_PANEL_HEIGHT","MARGIN_SIZE","NUM_STEPS_ACROSS_CANVAS","DEFAULT_BACKGROUND_COLOR","DEFAULT_BORDER_COLOR","TELEPORT_BORDER_COLOR","TELEPORT_BACKGROUND_COLOR","FILTERS","NONE","PAUSE","ENDGAME","SNAKE","INITIAL_LENGTH","DEFAULT_COLOR","PHASE_BORDER_COLOR","ITEM","FOOD_COLOR","FOOD_BORDER_COLOR","PHASE_COLOR","TELEPORT_COLOR","PHASE_SCORE_THRESHOLD","TELEPORT_SCORE_THRESHOLD","BASE_PHASE_PROBABILITY","BASE_TELEPORT_PROBABILITY","BASE_VOLATILE_FOOD_PROBABILITY","GAME","SCORE_INCREMENT","SCORE_THRESHOLD_FOR_VOLATILE_FOOD","SPEED_MS__ARROW","SPEED_MS__MOTION","INPUT","SWIPE_SENSITIVITY","MOTION_SENSITIVITY","MOTION_THROTTLE_TIME_MS","CANVAS","GAME_TEXT_COLOR","HIGH_SCORE_TEXT_COLOR","PAUSE_BTN_COLOR","EXCLAMATION_BTN_COLOR","GAME_TEXT_FONT_FAMILY","GAME_TEXT_FONT_SIZE","STATE","LOCAL_STORAGE_KEY_HIGH_SCORE","LOCAL_STORAGE_KEY_GAME_SPEED","ERROR","MESSAGE_FONT","MESSAGE_COLOR","MESSAGE_BACKGROUND","BUTTON_IDS","Board","constructor","canvas","ctrlPanel","this","_canvas","_ctrlPanel","ctx","getContext","Error","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","width","_height","height","_blockSize","_activeFilter","_color","_borderColor","_isGlowing","resetFilter","color","borderColor","isGlowing","activeFilter","blockSize","ratio","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestButton","_createOrGetButton","getMotionRequestButton","_getButton","removeMotionRequestButton","btn","parentNode","removeChild","createMotionIndicatorToggleButton","style","getMotionIndicatorToggleButton","showMotionIndicatorToggleButton","toggleButton","classList","remove","add","hideMotionIndicatorToggleButton","updateMotionIndicatorToggleButtonTitle","isIndicatorVisible","title","createClearHighScoreButton","getClearHighScoreButton","setGlow","shouldGlow","needsPermission","requestButton","checkVisibility","computedStyle","getComputedStyle","display","visibility","gridBlockSize","Math","min","innerWidth","innerHeight","floor","id","text","options","existingBtn","createElement","type","textContent","cssText","appendChild","element","getElementById","HTMLButtonElement","displayErrorMessage","message","HTMLCanvasElement","console","error","displayErrorInDOM","save","font","fillStyle","messageWidth","measureText","messageHeight","messageX","messageY","fillRect","textAlign","textBaseline","fillText","restore","displayErrorOnCanvas","errorDiv","position","top","left","transform","backgroundColor","padding","borderRadius","zIndex","whiteSpace","maxWidth","overflowWrap","body","PHASE_CLASSNAME","TELEPORT_CLASSNAME","Item","board","snake","_x","Number","MIN_SAFE_INTEGER","_y","_generate","x","y","fillColor","_randomBlock","forEachSegment","snakeSegment","max","round","random","Food","Teleport","Phase","ITEM_TYPES","none","food","teleport","phase","selectRandomItem","score","powerUps","alwaysReturnItem","reducePowerUpProbability","itemChances","teleportProb","calculateTeleportProbability","phaseProb","calculatePhaseProbability","foodProb","noItemProb","probabilities","totalProb","Object","values","reduce","sum","prob","abs","calculateItemProbabilities","selectedItemType","chances","cumulativeProbability","item","probability","entries","pickItem","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTIONS","dx","dy","MotionControlIndicator","container","showInfo","_create","update","orientation","direction","beta","gamma","maxTilt","tiltX","tiltY","dotPx","dot","HTMLDivElement","arrows","forEach","arrow","activeArrow","querySelector","toLowerCase","directionValue","HTMLSpanElement","setTimeout","betaValue","toFixed","gammaValue","show","hide","innerHTML","querySelectorAll","_addStyles","head","calculateMotionControl","currentOrientation","lastOrientation","currentUpdateTime","lastUpdateTime","recentChange","orientationChange","threshold","isSignificantMotion","getDirectionFromOrientation","Snake","boardWidth","boardHeight","centerX","centerY","_body","_createBody","_dx","_dxAtPause","_dy","_dyAtPause","_isChangingDirection","_directionMap","Map","length","i","push","getHeadPosition","getCurrentDirection","key","get","move","growing","_advanceHead","_advanceTail","unshift","pop","teleportHead","newPosition","callback","segment","index","pause","unpause","didEat","equip","didCollide","slice","some","log","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirection","newDirection","getDirection","currentDirection","_getCurrentDirection","dir2","dir1","_setNewDirection","magnitude","normalizeDirection","SPACE_KEY","LEFT_KEY","RIGHT_KEY","UP_KEY","DOWN_KEY","motionPermissionState","InputHandler","game","_game","_lastOrientation","_lastOrientationUpdateTime","_touchStart","_touchEnd","_boundMethods","_bindMethods","handleKeyInput","_handleKeyInput","bind","handleDeviceMovement","_handleDeviceMovement","handleVisibilityChange","_handleVisibilityChange","handlePauseClick","_handlePauseClick","requestDeviceOrientation","_requestDeviceOrientation","handleTouchStart","_handleTouchStart","handleTouchEnd","_handleTouchEnd","handleRestart","_handleRestart","manageGameControls","shouldAdd","_manageKeyboardControls","_manageMotionControls","_manageTouchControls","_manageClickControls","_manageVisibilityControl","manageRestartControls","action","motionControl","active","removeEventListener","DeviceOrientationEvent","_listenToDeviceOrientation","requestPermission","_activateMotionControl","_createMotionRequestButton","addEventListener","state","paused","togglePause","event","commandFn","code","_deactivateMotionControl","KeyboardEvent","restart","Date","now","updateMotionControl","hidden","preventDefault","firstTouch","changedTouches","screenX","screenY","_handleSwipeGesture","verticalSwipe","ended","catch","finally","activateMotionControl","deactivateMotionControl","_debugMotionControl","motionControlActive","deviceOrientation","isChangingDirection","snakeDirection","_simulateDeviceOrientationRequestPermission","Promise","resolve","defineProperty","prototype","value","withStraddle","cb","offset","translate","filter","border","outline","boxShadow","transition","useExclamation","iconSize","iconPadding","String","fromCharCode","lineCap","shadowBlur","shadowColor","strokeStyle","strokeRect","toString","strokeText","renderGame","renderGameOver","defaultCanvas","drawGame","drawScore","drawHighScore","highScore","drawItem","drawSnake","drawGameOver","createRenderFunctions","GameState","_paused","_ended","_score","_highScore","_getItemSafely","_speed","speed","updateScore","increment","updateHighScore","_setItemSafely","clearHighScore","setSpeed","isNaN","endGame","defaultValue","localStorage","getItem","JSON","parse","warn","setItem","stringify","CANVAS_ID","CONTROL_PANEL_ID","MOTION_INDICATOR_ID","motionIndicatorVisible","Game","input","_lastUpdateTimestamp","indicatorVisible","handleClearHighScore","_handleClearHighScore","handleToggleMotionIndicator","_handleToggleMotionIndicator","_initializeUI","run","_shouldUpdateFrame","_updateFrame","requestAnimationFrame","t","_removeEventListeners","runGame","_advanceSnake","didEatBeforeMove","toUpperCase","_generateNewItem","_maybeRegenerateItem","_checkCollision","_end","itemClass","_clearHighScore","oldHighScore","motionIndicator","_setupMotionIndicator","_setupMotionToggleButton","_setupClearHighScoreButton","motionIndicatorDiv","clearButton","stopPropagation","ctrl_panel","_initBoard"],"mappings":"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"}