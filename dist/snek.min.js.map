{"version":3,"file":"snek.min.js","sources":["../src/js/canvas.js","../src/js/board.js","../src/js/item.js","../src/js/snake.js","../src/js/game.js","../src/js/main.js"],"sourcesContent":["const CANVAS_BACKGROUND_COLOR = 'white';\r\nconst CANVAS_BORDER_COLOR = 'darkgreen';\r\nconst EXCLAMATION_BTN_COLOR = 'darkkhaki';\r\nconst GAME_TEXT_COLOR = 'gray';\r\nconst PAUSE_BTN_COLOR = 'darkgreen';\r\nconst SNAKE_BORDER_COLOR = 'darkgreen';\r\nconst SNAKE_COLOR = 'lightgreen';\r\n\r\nconst GAME_TEXT_FONT_FAMILY = '\"Saira\", serif';\r\n\r\nconst GAME_TEXT_FONT_SIZE = 50;\r\n\r\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\r\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\r\n\r\n/**\r\n * a fake contextmanager\r\n * for pixel sharpness https://stackoverflow.com/a/8696641\r\n**/\r\nfunction withStraddle(ctx, cb) {\r\n    const offset = 0.5;\r\n\r\n    try {\r\n        // turn on 'straddle' trick to avoid blurriness\r\n        ctx.translate(offset, offset);\r\n        cb();\r\n    } finally {\r\n        // turn off 'straddle' trick to avoid blurriness\r\n        ctx.translate(-offset, -offset);\r\n    }\r\n}\r\n\r\nexport function drawGame(game) {\r\n    let board = game.board;\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        // set border and background colors\r\n        ctx.filter = board.activeFilter;\r\n        ctx.fillStyle = CANVAS_BACKGROUND_COLOR;\r\n        ctx.strokeStyle = CANVAS_BORDER_COLOR;\r\n\r\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\r\n\r\n        if (game.paused) {\r\n            let useExclamation = board.needsPermission();\r\n\r\n            // since filters don't work on iOS safari, we need another visual aid\r\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\r\n            // or exclamation triangle icon if we still need permissions\r\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\r\n            ctx.font = (GAME_TEXT_FONT_SIZE * board.ratio) + 'px \"bootstrap-icons\"';\r\n            ctx.fillStyle = useExclamation ? EXCLAMATION_BTN_COLOR : PAUSE_BTN_COLOR;\r\n            ctx.fillText(String.fromCharCode(\r\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\r\n            ), 30 * board.ratio, 50 * board.ratio);\r\n        }\r\n    });\r\n}\r\n\r\nexport function drawSnake(snake, board) {\r\n    // TODO: avoid private access here\r\n    snake._body.forEach(snakePart => drawSnakePart(snakePart, board));\r\n}\r\n\r\nexport function drawItem(item, board) {\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = item.fill_color;\r\n        ctx.strokeStyle = item.border_color;\r\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\r\n    });\r\n}\r\n\r\nexport function drawScore(score, board) {\r\n    let ctx = board.ctx;\r\n\r\n    ctx.font = `${GAME_TEXT_FONT_SIZE * board.ratio}px ${GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = GAME_TEXT_COLOR;\r\n    ctx.fillText(score, board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n}\r\n\r\nexport function drawGameEnd(board) {\r\n    let ctx = board.ctx;\r\n\r\n    ctx.font = `${GAME_TEXT_FONT_SIZE * board.ratio}px ${GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = GAME_TEXT_COLOR;\r\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n}\r\n\r\nfunction drawSnakePart(snakePart, board) {\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = SNAKE_COLOR;\r\n        ctx.strokeStyle = SNAKE_BORDER_COLOR;\r\n        ctx.fillRect(snakePart.x, snakePart.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(snakePart.x, snakePart.y, board.blockSize, board.blockSize);\r\n    });\r\n}\r\n","const CTRL_PANEL_HEIGHT = 50;  // pixels\r\nconst NUM_STEPS_ACROSS_CANVAS = 30;\r\n\r\nconst NO_FILTER = 'none';\r\nconst PAUSE_FILTER = 'contrast(1.4) sepia(1)';\r\nconst ENDGAME_FILTER = 'grayscale(0.8) blur(0.5px)';\r\n\r\nconst MOTION_REQUEST_BUTTON_ID = 'motionRequest';\r\n\r\nexport class Board {\r\n    constructor(canvas, ctrlPanel) {\r\n        this._canvas = canvas;\r\n        this._ctrlPanel = ctrlPanel;\r\n\r\n        // 2d drawing context\r\n        this.ctx = this._canvas.getContext('2d');\r\n\r\n        this._boardSize = this._calculateBoardSize();\r\n\r\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\r\n        this._ratio = window.devicePixelRatio || 1;\r\n\r\n        this._sizeCanvas();\r\n        this._sizeControlPanel();\r\n\r\n        this._width = canvas.width;\r\n        this._height = canvas.height;\r\n        this._blockSize = canvas.width / NUM_STEPS_ACROSS_CANVAS;\r\n\r\n        this.resetFilter();\r\n\r\n        // console.log({\r\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\r\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\r\n        //     'canvas.height': canvas.height, block_size: this._blockSize\r\n        // })\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    get activeFilter() {\r\n        return this._activeFilter;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    get blockSize() {\r\n        return this._blockSize;\r\n    }\r\n\r\n    get ratio() {\r\n        return this._ratio;\r\n    }\r\n\r\n    resetFilter() {\r\n        this._activeFilter = NO_FILTER;\r\n    }\r\n\r\n    setEndGameFilter() {\r\n        this._activeFilter = ENDGAME_FILTER;\r\n    }\r\n\r\n    setPauseGameFilter() {\r\n        this._activeFilter = PAUSE_FILTER;\r\n    }\r\n\r\n    enterFullScreen() {\r\n        // switch to full screen\r\n        this._canvas.requestFullscreen().then(function () {\r\n            try {\r\n                // lock portrait orientation when going full screen\r\n                screen.lockOrientationUniversal = screen.lockOrientation ||\r\n                    screen.mozLockOrientation ||\r\n                    screen.msLockOrientation;\r\n                screen.lockOrientationUniversal('portrait-primary');\r\n            } catch (e) {\r\n                // console.log(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    exitFullScreen() {\r\n        document.exitFullscreen();\r\n    }\r\n\r\n    createMotionRequestBtn() {\r\n        let btn = document.createElement('button');\r\n        btn.innerHTML = 'Allow Motion Control';\r\n        btn.setAttribute('id', MOTION_REQUEST_BUTTON_ID);\r\n        btn.type = 'button';\r\n        self._ctrlPanel.appendChild(btn);\r\n        return btn;\r\n    }\r\n\r\n    removeMotionRequestBtn() {\r\n        let btn = document.getElementById(MOTION_REQUEST_BUTTON_ID);\r\n        if (btn) {\r\n            btn.parentNode.removeChild(btn);\r\n        }\r\n    }\r\n\r\n    needsPermission() {\r\n        return document.getElementById(MOTION_REQUEST_BUTTON_ID) !== null;\r\n    }\r\n\r\n    addTouchHandlers(handleTouchStart, handleTouchEnd) {\r\n        this._handleTouchStart = handleTouchStart;\r\n        this._handleTouchEnd = handleTouchEnd;\r\n\r\n        this._canvas.addEventListener('touchstart', handleTouchStart);\r\n        this._canvas.addEventListener('touchend', handleTouchEnd);\r\n    }\r\n\r\n    removeTouchHandlers() {\r\n        if (this._handleTouchStart) this._canvas.removeEventListener('touchstart', this._handleTouchStart);\r\n        if (this._handleTouchEnd) this._canvas.removeEventListener('touchend', this._handleTouchEnd);\r\n    }\r\n\r\n    _calculateBoardSize() {\r\n        // take the min(width, height), find closest number divisible by desired # of total steps across the canvas,\r\n        // and use this as the width + height of the square canvas\r\n        let rawSize = Math.min(window.innerWidth, window.innerHeight) - CTRL_PANEL_HEIGHT;\r\n        let quotient = parseInt(rawSize / NUM_STEPS_ACROSS_CANVAS);\r\n\r\n        // subtracting NUM_STEPS_ACROSS_CANVAS below to allow some whitespace around the game canvas\r\n        return quotient * NUM_STEPS_ACROSS_CANVAS - NUM_STEPS_ACROSS_CANVAS;\r\n    }\r\n\r\n    _sizeCanvas() {\r\n        this._canvas.style.width = this._boardSize + 'px';\r\n        this._canvas.style.height = this._boardSize + 'px';\r\n        this._canvas.width = this._boardSize * this._ratio;\r\n        this._canvas.height = this._canvas.width;\r\n    }\r\n\r\n    _sizeControlPanel() {\r\n        this._ctrlPanel.style.width = this._boardSize + 'px';\r\n        this._ctrlPanel.style.height = CTRL_PANEL_HEIGHT + 'px';\r\n        this._ctrlPanel.width = this._boardSize * this._ratio;\r\n        this._ctrlPanel.height = CTRL_PANEL_HEIGHT * this._ratio;\r\n    }\r\n}\r\n","export function createItem(board, snake, fill_color, border_color) {\r\n    let item = {\r\n        x: randomBlock(0, board.width - board.blockSize, board.blockSize),\r\n        y: randomBlock(0, board.height - board.blockSize, board.blockSize),\r\n        fill_color: fill_color,\r\n        border_color: border_color,\r\n    };\r\n\r\n    // TODO: avoid private access here\r\n    snake._body.forEach(function isItemOnSnake(part) {\r\n        const itemIsOnSnake = part.x == item.x && part.y == item.y\r\n        if (itemIsOnSnake) item = createItem(board, snake, fill_color, border_color);\r\n    });\r\n\r\n    return item;\r\n\r\n    // TODO: constructor, getters (?)\r\n}\r\n\r\nfunction randomBlock(min, max, blockSize) {\r\n    return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\r\n}\r\n","export const LEFT_KEY = 'ArrowLeft';\r\nexport const RIGHT_KEY = 'ArrowRight';\r\nexport const UP_KEY = 'ArrowUp';\r\nexport const DOWN_KEY = 'ArrowDown';\r\n\r\nexport class Snake {\r\n    constructor(boardWidth, boardHeight, blockSize) {\r\n        this._body = [\r\n            { x: boardWidth / 2, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 2, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 3, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 4, y: boardHeight / 2 },\r\n        ];\r\n\r\n        this._blockSize = blockSize;\r\n\r\n        // set initial velocity\r\n        this._dx = this._dxAtPause = blockSize;\r\n        this._dy = this._dyAtPause = 0;\r\n\r\n        this.isChangingDirection = false;\r\n    }\r\n\r\n    advanceHead() {\r\n        const head = {x: this._body[0].x + this._dx, y: this._body[0].y + this._dy};\r\n        this._body.unshift(head);\r\n\r\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\r\n    }\r\n\r\n    advanceTail() {\r\n        this._body.pop();\r\n    }\r\n\r\n    pause() {\r\n        // save velocity at pause\r\n        this._dxAtPause = this._dx;\r\n        this._dyAtPause = this._dy;\r\n        // set velocity to 0\r\n        this._dx = this._dy = 0;\r\n    }\r\n\r\n    unpause() {\r\n        // set velocity to state before pause\r\n        this._dx = this._dxAtPause;\r\n        this._dy = this._dyAtPause;\r\n    }\r\n\r\n    didEat(item) {\r\n        return this._body[0].x === item.x && this._body[0].y === item.y;\r\n    }\r\n\r\n    didCollide(boardWidth, boardHeight, blockSize) {\r\n        // test whether the snake collided with itself\r\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\r\n        for (let i = 4; i < this._body.length; i++) {\r\n            const didCollide = this._body[i].x === this._body[0].x && this._body[i].y === this._body[0].y;\r\n            if (didCollide) { return true; }\r\n            // TODO: if purple phase is available, decrement and continue game\r\n        }\r\n\r\n        const hitLeftWall = this._body[0].x < 0;\r\n        const hitRightWall = this._body[0].x > boardWidth - blockSize;\r\n        const hitTopWall = this._body[0].y < 0;\r\n        const hitBottomWall = this._body[0].y > boardHeight - blockSize;\r\n\r\n        return hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\r\n        // TODO: if blue teleport is available, decrement, teleport, and continue game\r\n    }\r\n\r\n    changeDirectionByKey(keyPressed) {\r\n        if (this.isChangingDirection) { return; }\r\n        this.isChangingDirection = true;\r\n\r\n        const goingUp = this._dy === -this._blockSize;\r\n        const goingDown = this._dy === this._blockSize;\r\n        const goingRight = this._dx === this._blockSize;\r\n        const goingLeft = this._dx === -this._blockSize;\r\n\r\n        if (keyPressed === LEFT_KEY && !goingRight) { this._dx = -this._blockSize; this._dy = 0; }\r\n        if (keyPressed === UP_KEY && !goingDown) { this._dx = 0; this._dy = -this._blockSize; }\r\n        if (keyPressed === RIGHT_KEY && !goingLeft) { this._dx = this._blockSize; this._dy = 0; }\r\n        if (keyPressed === DOWN_KEY && !goingUp) { this._dx = 0; this._dy = this._blockSize; }\r\n    }\r\n\r\n    changeDirectionByMvmt(beta, gamma, lastBeta, lastGamma, sensitivity) {\r\n        let newBeta = lastBeta;\r\n        let newGamma = lastGamma;\r\n\r\n        if (this.isChangingDirection) {\r\n            return {\r\n                newBeta: newBeta,\r\n                newGamma: newGamma\r\n            };\r\n        }\r\n        this.isChangingDirection = true;\r\n\r\n        const betaDelta = lastBeta - beta;\r\n        const gammaDelta = lastGamma - gamma;\r\n\r\n        const goingUp = this._dy === -this._blockSize;\r\n        const goingDown = this._dy === this._blockSize;\r\n        const goingRight = this._dx === this._blockSize;\r\n        const goingLeft = this._dx === -this._blockSize;\r\n\r\n        let dir;\r\n        if (betaDelta < -sensitivity) {\r\n            if (!goingUp) { dir = 'DOWN'; this._dx = 0; this._dy = this._blockSize; newGamma = gamma; }\r\n            newBeta = beta;\r\n        } else if (betaDelta > sensitivity) {\r\n            if (!goingDown) { dir = 'UP'; this._dx = 0; this._dy = -this._blockSize; newGamma = gamma; }\r\n            newBeta = beta;\r\n        } else if (gammaDelta < -sensitivity) {\r\n            if (!goingLeft) { dir = 'RIGHT'; this._dx = this._blockSize; this._dy = 0; newBeta = beta; }\r\n            newGamma = gamma;\r\n        } else if (gammaDelta > sensitivity) {\r\n            if (!goingRight) { dir = 'LEFT'; this._dx = -this._blockSize; this._dy = 0; newBeta = beta; }\r\n            newGamma = gamma;\r\n        }\r\n\r\n        // if (dir) {\r\n        //     console.log(`going${dir}`);\r\n        // }\r\n\r\n        return {\r\n            newBeta: newBeta,\r\n            newGamma: newGamma\r\n        };\r\n    }\r\n}\r\n","import { drawGame, drawGameEnd, drawItem, drawScore, drawSnake } from './canvas.js';\r\nimport { Board } from './board.js';\r\nimport { createItem } from './item.js';\r\nimport { Snake, LEFT_KEY, RIGHT_KEY, UP_KEY, DOWN_KEY } from './snake.js';\r\n\r\nconst FOOD_COLOR = 'red';\r\nconst FOOD_BORDER_COLOR = 'darkred';\r\n\r\nconst CANVAS_ID = 'gameCanvas';\r\nconst CONTROL_PANEL_ID = 'controlPanel';\r\n\r\nconst GAME_SPEED = 100;  // milliseconds\r\nconst SCORE_INCREMENT = 10;\r\nconst SWIPE_SENSITIVITY = 10;  // delta of pixels needed to consider touch mvmt a 'swipe'\r\nconst MOTION_SENSITIVITY = 15;  // degree of motion needed to consider a device mvmt as intentional\r\n\r\nconst SPACE_KEY = 'Space';\r\nconst KEY_CONTROLS = new Set([LEFT_KEY, RIGHT_KEY, UP_KEY, DOWN_KEY, SPACE_KEY]);\r\n\r\nexport class Game {\r\n    constructor(board, snake, food, speed) {\r\n        this._board = board;\r\n        this._snake = snake;\r\n        this._food = food;\r\n        this._motionAvailable = false;\r\n        this._score = 0;\r\n        this._paused = false;\r\n        this._ended = false;\r\n        this._speed = speed;\r\n        this._lastBeta = 0;\r\n        this._lastGamma = 0;\r\n\r\n        this._setupControls();\r\n    }\r\n\r\n    get board() {\r\n        return this._board;\r\n    }\r\n\r\n    get snake() {\r\n        return this._snake;\r\n    }\r\n\r\n    get food() {\r\n        return this._food;\r\n    }\r\n\r\n    get speed() {\r\n        return this._speed;\r\n    }\r\n\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    get activeFilter() {\r\n        return this._activeFilter;\r\n    }\r\n\r\n    get paused() {\r\n        return this._paused;\r\n    }\r\n\r\n    run() {\r\n        if (this._didEnd()) { this._end(); return; }\r\n\r\n        let timeout = setTimeout(() => {\r\n            this._snake.isChangingDirection = false;\r\n\r\n            drawGame(this);\r\n            drawScore(this._score, this._board);\r\n            drawItem(this._food, this._board);\r\n            if (!this._paused) {\r\n                //console.log(`paused: ${this._paused}. advancing...`);\r\n                this._advanceSnake();\r\n            }\r\n            drawSnake(this._snake, this._board);\r\n\r\n            // run game loop again\r\n            this.run();\r\n        }, this._speed);\r\n\r\n        if (!this._timeout) this._timeout = timeout;\r\n    }\r\n\r\n    _advanceSnake() {\r\n        this._snake.advanceHead();\r\n\r\n        if (this._snake.didEat(this._food)) {\r\n            this._score += SCORE_INCREMENT;\r\n            // TODO: at SCORE_THRESHOLDs, enable teleporting -- then phasing\r\n                // TELEPORT_THRESHOLD: 50\r\n                // PHASING_THRESHOLD: 150\r\n                // maybe higher threshold with arrow controls (easier game)?\r\n                // how often should each drop?\r\n                    // perhaps it always drops AT threshold, then gets random\r\n                // should they drop after eating or on random ticks (preferred)?\r\n            let newFood = createItem(this._board, this._snake, FOOD_COLOR, FOOD_BORDER_COLOR);\r\n\r\n            this._food = newFood;\r\n        } else {\r\n            this._snake.advanceTail();\r\n        }\r\n    }\r\n\r\n    _didEnd() {\r\n        return this._snake.didCollide(this._board.width, this._board.height, this._board.blockSize);\r\n    }\r\n\r\n    _end() {\r\n        this._ended = true;\r\n        this._board.setEndGameFilter();\r\n\r\n        drawGame(this);\r\n        drawItem(this._food, this._board);\r\n        drawSnake(this._snake, this._board);\r\n\r\n        drawGameEnd(this._board);\r\n\r\n        // bind `this` to game in event handler\r\n        this._restart = this._restart.bind(this);\r\n\r\n        // allow for game restart\r\n        if (!this._motionAvailable) {\r\n            document.removeEventListener('keydown', this._handleKeyInput);\r\n            document.addEventListener('keydown', this._restart);\r\n        } else {\r\n            // alwways allow restart with space bar\r\n            document.addEventListener('keydown', this._restart);\r\n        }\r\n        document.removeEventListener('click', this._togglePause);\r\n        document.addEventListener('click', this._restart);\r\n    }\r\n\r\n    _restart(event) {\r\n        if (event.code === SPACE_KEY || event.type === 'click' || event.type === 'touchend') {\r\n            document.removeEventListener('keydown', this._restart);\r\n            document.removeEventListener('click', this._restart);\r\n            this._board.removeTouchHandlers();\r\n\r\n            restartGame();\r\n        }\r\n    }\r\n\r\n    _togglePause() {\r\n        this._paused = !this._paused;\r\n\r\n        //console.log(`paused: ${this._paused}`);\r\n\r\n        if (this._paused) {\r\n            this._snake.pause();\r\n            this._board.setPauseGameFilter();\r\n        } else {\r\n            this._snake.unpause();\r\n            this._board.resetFilter();\r\n        }\r\n    }\r\n\r\n    _setupControls() {\r\n        this._lastBeta = this._lastGamma = 0;\r\n\r\n        // bind `this` to game in event handlers\r\n        this._handleDeviceMvmt = this._handleDeviceMvmt.bind(this);\r\n        this._handleKeyInput = this._handleKeyInput.bind(this);\r\n        this._handleVisibilityChange = this._handleVisibilityChange.bind(this);\r\n        this._requestDeviceOrientation = this._requestDeviceOrientation.bind(this);\r\n        this._togglePause = this._togglePause.bind(this);\r\n\r\n        // bind `this` to board in event handler\r\n        this._board.enterFullScreen = this._board.enterFullScreen.bind(this._board);\r\n\r\n        // call change direction on key press\r\n        document.addEventListener('keydown', this._handleKeyInput);\r\n\r\n        // pause game on click or if game becomes hidden\r\n        document.addEventListener('click', this._togglePause);\r\n        document.addEventListener('visibilitychange', this._handleVisibilityChange, false);\r\n\r\n        // enter full screen on double click (for devices that support this event)\r\n        document.addEventListener('dblclick', this._board.enterFullScreen);\r\n\r\n        // enter full screen on swipe (for touch/mobile devices)\r\n        this._handleSwipeToFullScreen();\r\n\r\n        if ( typeof(DeviceOrientationEvent) !== 'undefined' ) {\r\n            this._motionAvailable = true;\r\n\r\n            console.log('motion controls activated');\r\n\r\n            // if browser (e.g., iOS safari) requires permission for deviceorientation, request it\r\n            if ( typeof(DeviceOrientationEvent.requestPermission) === 'function' ) {\r\n                btn = self._board.createMotionRequestBtn();\r\n                btn.addEventListener('click', this._requestDeviceOrientation);\r\n\r\n                // give user time to grant permission\r\n                this._togglePause();\r\n            }\r\n            else {\r\n                window.addEventListener('deviceorientation', this._handleDeviceMvmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    _handleKeyInput(event) {\r\n        const keyPressed = event.code;\r\n\r\n        if (keyPressed === SPACE_KEY) {\r\n            this._togglePause();\r\n        }\r\n\r\n        this._snake.changeDirectionByKey(keyPressed);\r\n\r\n        if (KEY_CONTROLS.has(keyPressed)) {\r\n            if (this._motionAvailable && !this._ended) console.log('key controls activated');\r\n\r\n            // once user starts using key controls, disable motion control, as having\r\n            // both keyboard and motion event listeners makes the game less responsive\r\n            this._board.removeMotionRequestBtn();\r\n            window.removeEventListener('deviceorientation', this._handleDeviceMvmt);\r\n            this._motionAvailable = false;\r\n        }\r\n    }\r\n\r\n    _handleDeviceMvmt(event) {\r\n        // forward (positive) to backward (negative) motion of the device\r\n        const beta = event.beta;\r\n        // right (positive) to left (negative) motion of the device\r\n        const gamma = event.gamma;\r\n\r\n        let betaDelta = this._lastBeta - beta;\r\n        let gammaDelta = this._lastGamma - gamma;\r\n\r\n        // console.log('deviceorientation', {\r\n        //     beta: event.beta, last_beta: this._lastBeta, beta_delta: betaDelta,\r\n        //     gamma: event.gamma, last_gamma: this._lastGamma, gamma_delta: gammaDelta,\r\n        // });\r\n\r\n        if (betaDelta > Math.abs(MOTION_SENSITIVITY) || gammaDelta > Math.abs(MOTION_SENSITIVITY)) {\r\n            // once user starts using motion control, disable keyboard controls, as having\r\n            // both keyboard and motion event listeners makes the game less responsive\r\n            document.removeEventListener('keydown', this._handleKeyInput);\r\n        }\r\n\r\n        let newMvmt = this._snake.changeDirectionByMvmt(event.beta, event.gamma, this._lastBeta, this._lastGamma, MOTION_SENSITIVITY);\r\n\r\n        this._lastBeta = newMvmt.newBeta;\r\n        this._lastGamma = newMvmt.newGamma;\r\n    }\r\n\r\n    _handleVisibilityChange() {\r\n        if (document.hidden && !this._paused) {\r\n            this._togglePause();\r\n        }\r\n    }\r\n\r\n    _handleSwipeToFullScreen() {\r\n        let downY = 0;\r\n        let upY = 0;\r\n\r\n        let thisGame = this;\r\n        function handleGesture(ev) {\r\n            if (upY < downY && downY - upY > SWIPE_SENSITIVITY) {\r\n                // console.log(`swiped UP ${downY-upY}px`);\r\n                thisGame._board.enterFullScreen();\r\n            } else if (upY > downY && upY - downY > SWIPE_SENSITIVITY) {\r\n                // console.log(`swiped DOWN ${upY-downY}px`);\r\n                thisGame._board.exitFullScreen();\r\n            } else if (thisGame._ended) {\r\n                thisGame._restart(ev);\r\n            } else {\r\n                // console.log(`togglePause from handleGesture`);\r\n                thisGame._togglePause();\r\n            }\r\n        }\r\n\r\n        function handleTouchStart(ev) {\r\n            ev.preventDefault();\r\n\r\n            const firstTouch = ev.changedTouches[0];\r\n            // console.log({\r\n            //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n            // });\r\n            // downX = firstTouch.screenX;\r\n\r\n            downY = firstTouch.screenY;\r\n        }\r\n\r\n        function handleTouchEnd(ev) {\r\n            ev.preventDefault();\r\n\r\n            const firstTouch = ev.changedTouches[0];\r\n            // console.log({\r\n            //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n            // });\r\n            // upX = firstTouch.screenX;\r\n\r\n            upY = firstTouch.screenY;\r\n\r\n            handleGesture(ev);\r\n        }\r\n\r\n        this._board.addTouchHandlers(handleTouchStart, handleTouchEnd);\r\n    }\r\n\r\n    _requestDeviceOrientation() {\r\n        DeviceOrientationEvent.requestPermission()\r\n            .then( response => {\r\n            if ( response === 'granted' ) {\r\n                this._enableMotionControl();\r\n            }\r\n        }).catch( console.error );\r\n    }\r\n\r\n    /**\r\n     * disable keyboard, enable motion, remove button,\r\n     * and un-pause game\r\n     */\r\n    _enableMotionControl() {\r\n        document.removeEventListener('keydown', this._handleKeyInput);\r\n        window.addEventListener('deviceorientation', this._handleDeviceMvmt);\r\n        this._board.removeMotionRequestBtn();\r\n        this._togglePause();\r\n    }\r\n}\r\n\r\n// <!-- GAME EXECUTION HELPERS BELOW -->\r\n\r\nexport function initGame() {\r\n    const canvas = document.getElementById(CANVAS_ID);\r\n    const ctrl_panel = document.getElementById(CONTROL_PANEL_ID);\r\n\r\n    let board = new Board(canvas, ctrl_panel);\r\n    let snake = new Snake(board.height, board.height, board.blockSize);\r\n    let food = createItem(board, snake, FOOD_COLOR, FOOD_BORDER_COLOR);\r\n\r\n    let game = new Game(board, snake, food, GAME_SPEED);\r\n\r\n    return game;\r\n}\r\n\r\nfunction restartGame() {\r\n    let game = initGame();\r\n    game.run();\r\n}\r\n","import { initGame } from './game.js'\r\n\r\nlet game = initGame();\r\ngame.run();\r\n"],"names":["withStraddle","ctx","cb","offset","translate","drawGame","game","board","filter","activeFilter","fillStyle","strokeStyle","fillRect","canvas","width","height","paused","useExclamation","needsPermission","font","ratio","fillText","String","fromCharCode","drawSnake","snake","_body","forEach","snakePart","x","y","blockSize","strokeRect","drawSnakePart","drawItem","item","fill_color","border_color","Board","constructor","ctrlPanel","this","_canvas","_ctrlPanel","getContext","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","_height","_blockSize","resetFilter","_activeFilter","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestBtn","btn","createElement","innerHTML","setAttribute","type","self","appendChild","removeMotionRequestBtn","getElementById","parentNode","removeChild","addTouchHandlers","handleTouchStart","handleTouchEnd","_handleTouchStart","_handleTouchEnd","addEventListener","removeTouchHandlers","removeEventListener","rawSize","Math","min","innerWidth","innerHeight","parseInt","style","CTRL_PANEL_HEIGHT","createItem","randomBlock","part","max","round","random","Snake","boardWidth","boardHeight","_dx","_dxAtPause","_dy","_dyAtPause","isChangingDirection","advanceHead","head","unshift","advanceTail","pop","pause","unpause","didEat","didCollide","i","length","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirectionByKey","keyPressed","goingUp","goingDown","goingRight","goingLeft","changeDirectionByMvmt","beta","gamma","lastBeta","lastGamma","sensitivity","newBeta","newGamma","betaDelta","gammaDelta","KEY_CONTROLS","Set","Game","food","speed","_board","_snake","_food","_motionAvailable","_score","_paused","_ended","_speed","_lastBeta","_lastGamma","_setupControls","score","run","_didEnd","_end","timeout","setTimeout","textAlign","drawScore","_advanceSnake","_timeout","newFood","drawGameEnd","_restart","bind","_handleKeyInput","_togglePause","event","code","initGame","_handleDeviceMvmt","_handleVisibilityChange","_requestDeviceOrientation","_handleSwipeToFullScreen","console","log","DeviceOrientationEvent","has","abs","newMvmt","hidden","downY","upY","thisGame","ev","preventDefault","firstTouch","changedTouches","screenY","handleGesture","requestPermission","response","_enableMotionControl","catch","error","ctrl_panel"],"mappings":"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"}