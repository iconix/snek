{"version":3,"file":"snek.min.js","sources":["../src/js/config.js","../src/js/board.js","../src/js/error.js","../src/js/item.js","../src/js/direction.js","../src/js/motion.js","../src/js/snake.js","../src/js/game/input.js","../src/js/canvas.js","../src/js/game/render.js","../src/js/game/state.js","../src/js/game/game.js","../src/js/main.js"],"sourcesContent":["export const GAME_CONFIG = {\n    BOARD: {\n        CTRL_PANEL_HEIGHT: 50,  // pixels\n        MARGIN_SIZE: 20,  // pixels\n        NUM_STEPS_ACROSS_CANVAS: 30,\n        DEFAULT_BACKGROUND_COLOR: 'white',\n        DEFAULT_BORDER_COLOR: 'darkgreen',\n        TELEPORT_BORDER_COLOR: 'blue',\n        TELEPORT_BACKGROUND_COLOR: '#e2f1fa',  // a light blue\n        FILTERS: {\n            NONE: 'none',\n            PAUSE: 'contrast(1.4) sepia(1)',\n            ENDGAME: 'grayscale(0.8) blur(0.5px)',\n        },\n    },\n\n    SNAKE: {\n        INITIAL_LENGTH: 5,\n        DEFAULT_COLOR: 'lightgreen',\n        DEFAULT_BORDER_COLOR: 'darkgreen',\n        PHASE_BORDER_COLOR: 'violet',\n    },\n\n    ITEM: {\n        FOOD_COLOR: 'red',\n        FOOD_BORDER_COLOR: 'darkred',\n        PHASE_COLOR: 'orchid',\n        PHASE_BORDER_COLOR: 'violet',\n        TELEPORT_COLOR: 'blue',\n        TELEPORT_BORDER_COLOR: 'darkblue',\n        PHASE_SCORE_THRESHOLD: 150,\n        TELEPORT_SCORE_THRESHOLD: 50,\n        BASE_PHASE_PROBABILITY: 0.1,\n        BASE_TELEPORT_PROBABILITY: 0.1,\n        BASE_VOLATILE_FOOD_PROBABILITY: 0.01,\n    },\n\n    GAME: {\n        SCORE_INCREMENT: 10,\n        SCORE_THRESHOLD_FOR_VOLATILE_FOOD: 100,\n    },\n\n    INPUT: {\n        GAME_SPEED_MS__ARROW: 100,\n        GAME_SPEED_MS__MOTION: 125,     // slow down game since harder with motion controls\n        SWIPE_SENSITIVITY: 10,          // delta of pixels needed to consider touch mvmt a 'swipe'\n        MOTION_SENSITIVITY: 15,         // degree of motion needed to consider a device mvmt as intentional\n        MOTION_THROTTLE_TIME_MS: 100,   // min time between motion control updates to prevent over-sensitivity\n        MOTION_DEADZONE: 2,             // in degrees TODO:\n        DOMINANT_DIRECTION_THRESHOLD: 5,// TODO:\n    },\n\n    CANVAS: {\n        GAME_TEXT_COLOR: 'gray',\n        HIGH_SCORE_TEXT_COLOR: 'goldenrod',\n        PAUSE_BTN_COLOR: 'darkkhaki',\n        EXCLAMATION_BTN_COLOR: 'darkkhaki',\n        GAME_TEXT_FONT_FAMILY: '\"Saira\", serif',\n        GAME_TEXT_FONT_SIZE: 50,\n    },\n\n    STATE: {\n        LOCAL_STORAGE_KEY_HIGH_SCORE: 'highScore',\n        LOCAL_STORAGE_KEY_GAME_SPEED: 'gameSpeed',\n    },\n\n    ERROR: {\n        // ERROR_MESSAGE_DURATION: 5000,\n        MESSAGE_FONT: '20px Arial',\n        MESSAGE_COLOR: 'red',\n        MESSAGE_BACKGROUND: 'rgba(0, 0, 0, 0.7)',\n    },\n};\n","import { GAME_CONFIG } from './config';\n\nconst { BOARD } = GAME_CONFIG;\n\nconst MOTION_REQUEST_BUTTON_ID = 'motionRequest';\n\n/**\n * Represents the game board.\n */\nexport class Board {\n    /**\n     * @param {HTMLCanvasElement} canvas - canvas element for the game\n     * @param {HTMLElement | null} ctrlPanel - control panel element\n     */\n    constructor(canvas, ctrlPanel) {\n        this._canvas = canvas;\n        this._ctrlPanel = ctrlPanel;\n\n        // 2d drawing context\n        if (!(this.ctx = this._canvas.getContext('2d'))) {\n            throw new Error('2d context not supported or canvas already initialized');\n        }\n\n        this._boardSize = this._calculateBoardSize();\n\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\n        this._ratio = window.devicePixelRatio || 1;\n\n        this._sizeCanvas();\n        this._sizeControlPanel();\n\n        this._width = canvas.width;\n        this._height = canvas.height;\n        this._blockSize = canvas.width / BOARD.NUM_STEPS_ACROSS_CANVAS;\n\n        this._activeFilter = BOARD.FILTERS.NONE;\n        this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\n        this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\n        this._isGlowing = false;\n\n        this.resetFilter();\n\n        // console.log({\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\n        //     'canvas.height': canvas.height, block_size: this._blockSize\n        // })\n    }\n\n    /**\n     * @returns {HTMLCanvasElement}\n     */\n    get canvas() {\n        return this._canvas;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get borderColor() {\n        return this._borderColor;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get isGlowing() {\n        return this._isGlowing;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get activeFilter() {\n        return this._activeFilter;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get width() {\n        return this._width;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get height() {\n        return this._height;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get blockSize() {\n        return this._blockSize;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get ratio() {\n        return this._ratio;\n    }\n\n    /**\n     * Resets the board filter to default.\n     */\n    resetFilter() {\n        this._activeFilter = BOARD.FILTERS.NONE;\n    }\n\n    /**\n     * Sets the board filter for the end game state.\n     */\n    setEndGameFilter() {\n        this._activeFilter = BOARD.FILTERS.ENDGAME;\n    }\n\n    /**\n     * Sets the board filter for the paused game state.\n     */\n    setPauseGameFilter() {\n        this._activeFilter = BOARD.FILTERS.PAUSE;\n    }\n\n    /**\n     * Enters fullscreen mode.\n     */\n    enterFullScreen() {\n        // switch to full screen\n        this._canvas.requestFullscreen().then(function () {\n            try {\n                // lock portrait orientation when going full screen\n                // @ts-ignore\n                screen.lockOrientationUniversal = screen.lockOrientation ||\n                    // @ts-ignore\n                    screen.mozLockOrientation ||\n                    // @ts-ignore\n                    screen.msLockOrientation;\n                // @ts-ignore\n                screen.lockOrientationUniversal('portrait-primary');\n            } catch (e) {\n                // console.log(e);\n            }\n        });\n    }\n\n    /**\n     * Exits fullscreen mode.\n     */\n    exitFullScreen() {\n        document.exitFullscreen();\n    }\n\n    /**\n     * Creates a button in control panel to request motion control permission.\n     * If the button already exists, it returns the existing button.\n     * @returns {HTMLButtonElement | null} created button, or null if control panel does not exist\n     */\n    createMotionRequestButton() {\n        if (!this._ctrlPanel) return null;\n\n        let existingBtn = this.getMotionRequestButton();\n        if (existingBtn) return existingBtn;\n\n        let btn = document.createElement('button');\n        btn.innerHTML = 'Allow Motion Control';\n        btn.setAttribute('id', MOTION_REQUEST_BUTTON_ID);\n        btn.type = 'button';\n        this._ctrlPanel.appendChild(btn);\n        return btn;\n    }\n\n    /**\n     * Gets the motion control request button.\n     * @returns {HTMLButtonElement | null} motion request button if it exists; otherwise null\n     */\n    getMotionRequestButton() {\n        const element = document.getElementById(MOTION_REQUEST_BUTTON_ID);\n        return element instanceof HTMLButtonElement ? element : null;\n    }\n\n    /**\n     * Removes the motion control request button.\n     */\n    removeMotionRequestButton() {\n        let btn = this.getMotionRequestButton();\n        btn?.parentNode?.removeChild(btn);\n    }\n\n    /**\n     * Sets the glow effect on the board.\n     * @param {boolean} shouldGlow - whether the board should glow\n     */\n    setGlow(shouldGlow) {\n        if (shouldGlow === this.isGlowing) return;\n\n        this._isGlowing = shouldGlow;\n\n        if (shouldGlow) {\n            // note: since canvas border doesn't show in fullscreen mode, we tint the background too\n            this._color = BOARD.TELEPORT_BACKGROUND_COLOR;\n            this._borderColor = BOARD.TELEPORT_BORDER_COLOR;\n        } else {\n            this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\n            this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\n        }\n\n        // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\n    }\n\n    /**\n     * Checks if the game needs permission for motion control.\n     * @returns {boolean} true if permission is needed; false otherwise\n     */\n    needsPermission() {\n        return document.getElementById(MOTION_REQUEST_BUTTON_ID) !== null;\n    }\n\n    /**\n     * Calculates the size of the game board.\n     * @returns {number} The calculated board size.\n     * @private\n     */\n    _calculateBoardSize() {\n        // calculate a square board size based on window dimensions and total # of steps across the canvas\n        const availableSpace = Math.min(window.innerWidth, window.innerHeight) - BOARD.CTRL_PANEL_HEIGHT;\n        const gridBlockSize = availableSpace / BOARD.NUM_STEPS_ACROSS_CANVAS;  // find closest number divisible by steps\n        const boardSize = Math.floor(gridBlockSize) * BOARD.NUM_STEPS_ACROSS_CANVAS - BOARD.MARGIN_SIZE;\n\n        // TODO: could implement like below instead - if willing to implement resizing\n        // const maxWidth = window.innerWidth - MARGIN_SIZE;\n        // const maxHeight = window.innerHeight - CTRL_PANEL_HEIGHT - MARGIN_SIZE;\n        // const boardSize = Math.min(maxWidth, maxHeight);\n\n        return boardSize;\n    }\n\n    /**\n     * Sets the size of the canvas.\n     * @private\n     */\n    _sizeCanvas() {\n        this._canvas.style.width = this._boardSize + 'px';\n        this._canvas.style.height = this._boardSize + 'px';\n        this._canvas.width = this._boardSize * this._ratio;\n        this._canvas.height = this._canvas.width;\n    }\n\n    /**\n     * Sets the size of the control panel.\n     * @private\n     */\n    _sizeControlPanel() {\n        if (!this._ctrlPanel) return;\n        this._ctrlPanel.style.width = this._boardSize + 'px';\n        this._ctrlPanel.style.height = BOARD.CTRL_PANEL_HEIGHT + 'px';\n    }\n}\n","import { GAME_CONFIG } from './config';\n\nconst { ERROR } = GAME_CONFIG;\n\n/**\n * Displays an error message on the screen.\n * @param {string} message - error message to display\n * @param {HTMLCanvasElement | HTMLElement | null} canvas - game canvas (if available)\n */\nexport function displayErrorMessage(message, canvas = null) {\n    if (canvas && canvas instanceof HTMLCanvasElement) {\n        displayErrorOnCanvas(message, canvas);\n    } else {\n        displayErrorInDOM(message);\n    }\n}\n\n/**\n * Displays an error message on the canvas.\n * @param {string} message - error message to display\n * @param {HTMLCanvasElement} canvas - game canvas\n * @private\n */\nfunction displayErrorOnCanvas(message, canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        console.error('unable to get 2D context from canvas');\n        displayErrorInDOM(message);\n        return;\n    }\n\n    // save the current canvas state\n    ctx.save();\n\n    // set up the error message style\n    ctx.font = ERROR.MESSAGE_FONT;\n    ctx.fillStyle = ERROR.MESSAGE_BACKGROUND;\n\n    // calculate message width and position\n    const messageWidth = ctx.measureText(message).width + 20; // Add some padding\n    const messageHeight = 30;\n    const messageX = (canvas.width - messageWidth) / 2;\n    const messageY = canvas.height / 2 - messageHeight / 2;\n\n    // draw the background\n    ctx.fillRect(messageX, messageY, messageWidth, messageHeight);\n\n    // draw the error message\n    ctx.fillStyle = ERROR.MESSAGE_COLOR;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(message, canvas.width / 2, canvas.height / 2);\n\n    // restore the canvas state\n    ctx.restore();\n\n    // remove the error message after a set duration\n    // setTimeout(() => {\n    //     ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //     // note: not redrawing the game here as we might not have a valid game state\n    // }, ERROR_MESSAGE_DURATION);\n}\n\n/**\n * Displays an error message in the DOM.\n * @param {string} message - error message to display\n * @private\n */\nfunction displayErrorInDOM(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.position = 'fixed';\n    errorDiv.style.top = '50%';\n    errorDiv.style.left = '50%';\n    errorDiv.style.transform = 'translate(-50%, -50%)';\n    errorDiv.style.backgroundColor = ERROR.MESSAGE_BACKGROUND;\n    errorDiv.style.color = ERROR.MESSAGE_COLOR;\n    errorDiv.style.padding = '15px';\n    errorDiv.style.borderRadius = '5px';\n    errorDiv.style.zIndex = '1000';\n\n    // preserve line breaks in multi-line messages\n    errorDiv.style.whiteSpace = 'pre-wrap';\n\n    // for long messages, add a max-width and use word-wrapping\n    errorDiv.style.maxWidth = '80%';\n    errorDiv.style.overflowWrap = 'break-word';\n\n    errorDiv.textContent = message;\n\n    document.body.appendChild(errorDiv);\n\n    // setTimeout(() => {\n    //     document.body.removeChild(errorDiv);\n    // }, ERROR_MESSAGE_DURATION);\n}\n","import { GAME_CONFIG } from './config';\n\nconst { ITEM } = GAME_CONFIG;\n\nexport const PHASE_CLASSNAME = 'Phase';\nexport const TELEPORT_CLASSNAME = 'Teleport';\n\n/**\n * Represents an item that can be consumed by snek in the game.\n */\nexport class Item {\n    /**\n     * @param {import('./board').Board} board - game board\n     * @param {import('./snake').Snake} snake - snek object\n     */\n    constructor(board, snake) {\n        this._x = Number.MIN_SAFE_INTEGER, this._y = Number.MIN_SAFE_INTEGER;\n        this._generate(board, snake);\n    }\n\n    /**\n     * Gets the x-coordinate of the item.\n     * @returns {number} x-coordinate\n     */\n    get x() {\n        return this._x;\n    }\n\n    /**\n     * Gets the y-coordinate of the item.\n     * @returns {number} y-coordinate\n     */\n    get y() {\n        return this._y;\n    }\n\n    /**\n     * Gets the type of the item.\n     * @returns {string} item type\n     */\n    get type() { return 'UNKNOWN_ITEM' }\n\n    /**\n     * Gets the fill color of the item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return '' }\n\n    /**\n     * Gets the border color of the item.\n     * @returns {string} border color\n     */\n    get borderColor() { return '' }\n\n    /**\n     * Generates a new position for the item.\n     * @param {import('./board').Board} board - game board\n     * @param {import('./snake').Snake} snake - snek object\n     * @private\n     */\n    _generate(board, snake) {\n        this._x = this._randomBlock(0, board.width - board.blockSize, board.blockSize);\n        this._y = this._randomBlock(0, board.height - board.blockSize, board.blockSize);\n\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} @returns {void} */ snakeSegment) => {\n            const itemIsOnSnake = snakeSegment.x == this.x && snakeSegment.y == this.y\n            if (itemIsOnSnake) this._generate(board, snake);\n        });\n    }\n\n    /**\n     * Generates a random block position.\n     * @param {number} min - minimum value\n     * @param {number} max - maximum value\n     * @param {number} blockSize - size of each block\n     * @returns {number} random block position\n     * @private\n     */\n    _randomBlock(min, max, blockSize) {\n        // note: round to snap item placement to grid, as defined by blockSize\n        return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\n    }\n}\n\n/**\n * Represents a food item in the game.\n * Food is the basic item that snek consumes to grow and increase the player's score.\n * @extends Item\n */\nexport class Food extends Item {\n\n    /**\n     * Gets the food type.\n     * @returns {string} food type\n     */\n    get type() { return 'FOOD' }\n\n    /**\n     * Gets the fill color of the food.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.FOOD_COLOR }\n\n    /**\n     * Gets the border color of the food.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.FOOD_BORDER_COLOR }\n}\n\n/**\n * Represents a teleport item in the game.\n * Teleport is a power-up that allows snek to pass through the walls of the game board.\n * When consumed, it gives snek the ability to \"wrap around\" the game board once.\n * @extends Item\n */\nexport class Teleport extends Item {\n\n    /**\n     * Gets the teleport type.\n     * @returns {string} teleport type\n     */\n    get type() { return 'TELEPORT' }\n\n    /**\n     * Gets the fill color of the teleport item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.TELEPORT_COLOR }\n\n    /**\n     * Gets the border color of the teleport item.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.TELEPORT_BORDER_COLOR }\n}\n\n/**\n * Represents a phase item in the game.\n * Phase is a power-up that allows snek the ability to pass through its own body once.\n * @extends Item\n */\nexport class Phase extends Item {\n\n    /**\n     * Gets the phase type.\n     * @returns {string} phase type\n     */\n    get type() { return 'PHASE' }\n\n    /**\n     * Gets the fill color of the phase item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.PHASE_COLOR }\n\n    /**\n     * Gets the border color of the phase item.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.PHASE_BORDER_COLOR }\n}\n\nconst ITEM_TYPES = {\n    none: null,\n    food: Food,\n    teleport: Teleport,\n    phase: Phase\n};\n\n/**\n * Options for item selection.\n * @typedef {Object} ItemSelectionOptions\n * @property {boolean} [alwaysReturnItem=false] - If true, always returns an item (never null)\n * @property {boolean} [reducePowerUpProbability=false] - If true, reduces the probability of power-ups\n */\n\n/**\n * Randomizes the selection of an item type based on game conditions.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean; }} powerUps - available power-ups and whether eqipped\n * @param {ItemSelectionOptions} [options={}] - options for item selection\n * @returns {(new (board: import('./board').Board, item: import('./snake').Snake) => Item)} selected item class or null\n */\nexport function selectRandomItem(score, powerUps, options = {}) {\n    const { alwaysReturnItem = false, reducePowerUpProbability = false } = options;\n\n    const itemChances = calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n\n    // console.log(itemChances);\n\n    const selectedItemType = pickItem(itemChances);\n    return ITEM_TYPES[selectedItemType];\n}\n\n/**\n * Picks an item based on a weighted random selection algorithm.\n * @param {{ [x: string]: any; }} chances - chances for each item\n * @returns {string} selected item key\n */\nfunction pickItem(chances) {\n    const random = Math.random();  // random value to use for selection\n    let cumulativeProbability = 0;\n\n    for (const [item, probability] of Object.entries(chances)) {\n        cumulativeProbability += probability;\n        if (random <= cumulativeProbability) {\n            return item;\n        }\n    }\n\n    // this should never happen if probabilities sum to 1\n    throw new Error('item selection failed');\n}\n\n/**\n * Calculates probability of generation for each item type.\n * Provides ability to balance the game by making power-ups less frequent in certain situations.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {{ [x: string]: number }} probabilities for each item type\n */\nfunction calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    // note: a power-up always drops AT its score threshold; afterwards drops get random\n    const teleportProb = calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n    const phaseProb = calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n\n    let foodProb, noItemProb;\n    if (alwaysReturnItem) {\n        foodProb = 1 - teleportProb - phaseProb;\n        noItemProb = 0;\n    } else {\n        foodProb = ITEM.BASE_VOLATILE_FOOD_PROBABILITY;\n        noItemProb = 1 - teleportProb - phaseProb - foodProb;\n    }\n\n    const probabilities = {\n        none: noItemProb,\n        food: foodProb,\n        teleport: teleportProb,\n        phase: phaseProb,\n    };\n\n    const totalProb = Object.values(probabilities).reduce((sum, prob) => sum + prob, 0);\n    if (Math.abs(totalProb - 1) > 1e-10) {  // allow for small floating-point errors\n        throw new Error(`Item probabilities must sum to 1. Current sum: ${totalProb}`);\n    }\n\n    return probabilities;\n}\n\n/**\n * Calculates the probability of generating a Teleport item.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {number} probability of generating a Teleport item\n */\nfunction calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    if (score === ITEM.TELEPORT_SCORE_THRESHOLD && alwaysReturnItem) return 1;\n    if (score > ITEM.TELEPORT_SCORE_THRESHOLD && !powerUps[TELEPORT_CLASSNAME]) {\n        return reducePowerUpProbability ? ITEM.BASE_TELEPORT_PROBABILITY / 10 : ITEM.BASE_TELEPORT_PROBABILITY;\n    }\n    return 0;\n}\n\n/**\n * Calculates the probability of generating a Phase item.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {number} probability of generating a Phase item\n */\nfunction calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    if (score === ITEM.PHASE_SCORE_THRESHOLD && alwaysReturnItem) return 1;\n    if (score > ITEM.PHASE_SCORE_THRESHOLD && !powerUps[PHASE_CLASSNAME]) {\n        return reducePowerUpProbability ? ITEM.BASE_PHASE_PROBABILITY / 10 : ITEM.BASE_PHASE_PROBABILITY;\n    }\n    return 0;\n}\n","export const DIRECTION_LEFT = 'left';\nexport const DIRECTION_RIGHT = 'right';\nexport const DIRECTION_UP = 'up';\nexport const DIRECTION_DOWN = 'down';\n\n/**\n * @typedef {Object} Direction\n * @property {number} dx - change in x direction\n * @property {number} dy - change in y direction\n */\n\n/**\n * Object mapping direction strings to their corresponding Direction objects.\n * @type {Object.<string, Direction>}\n */\nexport const DIRECTIONS = {\n    [DIRECTION_LEFT]:  { dx: -1, dy: 0 },\n    [DIRECTION_RIGHT]: { dx: 1,  dy: 0 },\n    [DIRECTION_UP]:    { dx: 0,  dy: -1 },\n    [DIRECTION_DOWN]:  { dx: 0,  dy: 1 },\n};\n\n/**\n * Gets the Direction object for a given direction string.\n * @param {string} direction - direction string\n * @returns {Direction | null} Direction object or null if not found\n */\nexport function getDirection(direction) {\n    return DIRECTIONS[direction.toLowerCase()] || null;\n}\n\n/**\n * Checks if two directions are opposite to each other.\n * @param {Direction} dir1 - first direction\n * @param {Direction} dir2 - second direction\n * @returns {boolean} true if the directions are opposite; false otherwise\n */\nexport function isOppositeDirection(dir1, dir2) {\n    return dir1.dx === -dir2.dx && dir1.dy === -dir2.dy;\n}\n\n/**\n * Normalizes a direction vector to have a magnitude of 1.\n * @param {number} dx - x component of the direction\n * @param {number} dy - y component of the direction\n * @returns {Direction} normalized direction\n */\nexport function normalizeDirection(dx, dy) {\n    const magnitude = Math.max(Math.abs(dx), Math.abs(dy));\n    if (magnitude === 0) {\n        return { dx: 0, dy: 0 };\n    }\n    return { dx: dx / magnitude, dy: dy / magnitude };\n}\n","import { GAME_CONFIG } from './config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from './direction';\n\nconst { INPUT } = GAME_CONFIG;\n\nexport class MotionControlIndicator {\n    constructor(container, options = {}) {\n        this.container = container;\n        this.options = {\n            showInfo: true,\n            position: 'inline',\n            ...options\n        };\n        this.create();\n    }\n\n    create() {\n        this.container.innerHTML = `\n            <div class=\"motion-indicator ${this.options.position}\">\n                <div class=\"tilt-indicator ${this.options.position}\">\n                    <div class=\"dot\"></div>\n                    <div class=\"arrow up ${this.options.position}\">▲</div>\n                    <div class=\"arrow down ${this.options.position}\">▼</div>\n                    <div class=\"arrow left ${this.options.position}\">◀</div>\n                    <div class=\"arrow right ${this.options.position}\">▶</div>\n                </div>\n                ${this.options.showInfo ? `\n                <div class=\"info\">\n                    <p>Direction: <span class=\"direction-value\">None</span></p>\n                    <p>Sensitivity: <span class=\"sensitivity-value\">1.00</span></p>\n                    <p>Beta: <span class=\"beta-value\">0.00</span>°</p>\n                    <p>Gamma: <span class=\"gamma-value\">0.00</span>°</p>\n                </div>\n                ` : ''}\n            </div>\n        `;\n\n        this.dot = this.container.querySelector('.dot');\n        this.arrows = this.container.querySelectorAll('.arrow');\n        this.directionValue = this.container.querySelector('.direction-value');\n        this.sensitivityValue = this.container.querySelector('.sensitivity-value');\n        this.betaValue = this.container.querySelector('.beta-value');\n        this.gammaValue = this.container.querySelector('.gamma-value');\n\n        this.addStyles();\n    }\n\n    addStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .motion-indicator {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n            .motion-indicator.corner {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                background: white;\n                padding: 10px;\n                border-radius: 10px;\n                box-shadow: 0 0 10px rgba(0,0,0,0.1);\n            }\n            .tilt-indicator {\n                width: 150px;\n                height: 150px;\n                border: 2px solid #ccc;\n                border-radius: 10px;\n                position: relative;\n                overflow: hidden;\n            }\n            .tilt-indicator.corner {\n                width: 100px;\n                height: 100px;\n            }\n            .dot {\n                width: 20px;\n                height: 20px;\n                background: blue;\n                border-radius: 50%;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                transition: transform 0.1s ease;\n            }\n            .arrow {\n                position: absolute;\n                color: #ccc;\n                font-size: 24px;\n                transition: color 0.3s ease;\n            }\n            .arrow.up { top: 10px; left: 50%; transform: translateX(-50%); }\n            .arrow.down { bottom: 10px; left: 50%; transform: translateX(-50%); }\n            .arrow.left { left: 10px; top: 50%; transform: translateY(-50%); }\n            .arrow.right { right: 10px; top: 50%; transform: translateY(-50%); }\n            .arrow.active { color: green; }\n            .arrow.up.corner { top: 5px; }\n            .arrow.down.corner { bottom: 5px; }\n            .arrow.left.corner { left: 5px; }\n            .arrow.right.corner { right: 5px; }\n            .info {\n                text-align: left;\n                margin-left: 20px;\n            }\n            .info p {\n                margin: 5px 0;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    update(orientation, direction, sensitivity) {\n        const { beta, gamma } = orientation;\n        const maxTilt = 30;\n        const tiltX = Math.min(Math.max(gamma, -maxTilt), maxTilt) / maxTilt;\n        const tiltY = Math.min(Math.max(beta, -maxTilt), maxTilt) / maxTilt;\n\n        const dotPx = this.options.position === 'corner' ? 40 : 60;\n        this.dot.style.transform = `translate(${tiltX * dotPx}px, ${tiltY * dotPx}px)`;\n\n        this.arrows.forEach(arrow => arrow.classList.remove('active'));\n        if (direction) {\n            this.container.querySelector(`.arrow.${direction.toLowerCase()}`).classList.add('active');\n        }\n\n        if (this.options.showInfo) {\n            this.directionValue.textContent = direction || 'None';\n            this.sensitivityValue.textContent = sensitivity.toFixed(2);\n            this.betaValue.textContent = beta.toFixed(2);\n            this.gammaValue.textContent = gamma.toFixed(2);\n        }\n    }\n}\n\nexport function calculateMotionControl(currentOrientation, initialOrientation, lastOrientation, sensitivityMultiplier) {\n    if (!initialOrientation) {\n        return { direction: null, sensitivity: 1, orientationChange: { beta: 0, gamma: 0 } };\n    }\n\n    // calculate change relative to initial orientation\n    const totalChange = {\n        beta: currentOrientation.beta - initialOrientation.beta,\n        gamma: currentOrientation.gamma - initialOrientation.gamma\n    };\n\n    // calculate change since last update\n    const recentChange = {\n        beta: currentOrientation.beta - lastOrientation.beta,\n        gamma: currentOrientation.gamma - lastOrientation.gamma\n    };\n\n    // update sensitivity based on total change from initial position\n    const magnitudeChange = Math.sqrt(totalChange.beta ** 2 + totalChange.gamma ** 2);\n    const newSensitivityMultiplier = 1 + (magnitudeChange / 45);\n\n    // apply deadzone to recent change\n    const adjustedDeadzone = INPUT.MOTION_DEADZONE / newSensitivityMultiplier;\n    if (Math.abs(recentChange.beta) <= adjustedDeadzone) recentChange.beta = 0;\n    if (Math.abs(recentChange.gamma) <= adjustedDeadzone) recentChange.gamma = 0;\n\n    // determine dominant direction based on recent change\n    const direction = getDirectionFromOrientation(recentChange);\n\n    return {\n        direction,\n        sensitivity: newSensitivityMultiplier,\n        orientationChange: recentChange\n    };\n}\n\nexport function isSignificantMotion(orientationChange, sensitivityMultiplier) {\n    const threshold = INPUT.MOTION_SENSITIVITY / sensitivityMultiplier;\n    return Math.abs(orientationChange.beta) > threshold || Math.abs(orientationChange.gamma) > threshold;\n}\n\n/**\n* Determine direction based on orientation change.\n* @param {{ beta: number, gamma: number }} orientationChange - the change in device orientation\n* @returns {string | null} determined direction or null\n* @private\n*/\nfunction getDirectionFromOrientation(orientationChange) {\n    let direction = null;\n\n    // determine dominant direction based on recent change\n    const absBeta = Math.abs(orientationChange.beta);\n    const absGamma = Math.abs(orientationChange.gamma);\n\n    if (absBeta > absGamma && absBeta - absGamma > INPUT.DOMINANT_DIRECTION_THRESHOLD) {\n        direction = orientationChange.beta < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n    } else if (absGamma > absBeta && absGamma - absBeta > INPUT.DOMINANT_DIRECTION_THRESHOLD) {\n        direction = orientationChange.gamma < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return direction;\n}\n","import { GAME_CONFIG } from './config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, getDirection, isOppositeDirection, normalizeDirection } from './direction';\nimport { PHASE_CLASSNAME, Phase, TELEPORT_CLASSNAME, Teleport } from './item';\n\nconst { SNAKE } = GAME_CONFIG;\n\n/**\n * Represents snek in the game.\n */\nexport class Snake {\n\n    /**\n     * @param {number} boardWidth - width of the game board\n     * @param {number} boardHeight - height of the game board\n     * @param {number} blockSize - size of each block on the board\n     */\n    constructor(boardWidth, boardHeight, blockSize) {\n        this._blockSize = blockSize;\n\n        // calculate initial position (center of the board)\n        const centerX = Math.floor(boardWidth / (2 * blockSize)) * blockSize;\n        const centerY = Math.floor(boardHeight / (2 * blockSize)) * blockSize;\n\n        this._body = this._createBody(centerX, centerY, SNAKE.INITIAL_LENGTH);\n\n        // set initial velocity\n        this._dx = this._dxAtPause = blockSize;\n        this._dy = this._dyAtPause = 0;\n        this._isChangingDirection = false;\n\n        // set initial appearance\n        this._color = SNAKE.DEFAULT_COLOR;\n        this._borderColor = SNAKE.DEFAULT_BORDER_COLOR;\n        this._isGlowing = false;\n\n        this.powerUps = { [TELEPORT_CLASSNAME]: false, [PHASE_CLASSNAME]: false };\n\n        this._directionMap = new Map([\n            [`${blockSize},0`, DIRECTION_RIGHT],\n            [`${-blockSize},0`, DIRECTION_LEFT],\n            [`0,${-blockSize}`, DIRECTION_UP],\n            [`0,${blockSize}`, DIRECTION_DOWN]\n        ]);\n    }\n\n    /**\n     * Creates the body of snek.\n     * @param {number} centerX - x-coordinate of the center of the board\n     * @param {number} centerY - y-coordinate of the center of the board\n     * @param {number} length - number of parts composing snek body\n     * @returns {{ x: number; y: number; }[]} created snek body\n     * @private\n     */\n    _createBody(centerX, centerY, length) {\n        const body = [];\n        for (let i = 0; i < length; i++) {\n            body.push({\n                x: centerX - i * this._blockSize,\n                y: centerY\n            });\n        }\n        return body;\n    }\n\n    /**\n     * Gets snek's fill color.\n     * @returns {string} fill color\n     */\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * Gets snek's border color.\n     * @returns {string} border color\n     */\n    get borderColor() {\n        return this._borderColor;\n    }\n\n    /**\n     * Gets whether snek is glowing.\n     * @returns {boolean} true if snek is glowing; false otherwise\n     */\n    get isGlowing() {\n        return this._isGlowing;\n    }\n\n    /**\n     * Gets the position of snek's head.\n     * @returns {{ x: number; y: number }} head position\n     */\n    getHeadPosition() {\n        return { ...this._body[0] };\n    }\n\n    /**\n     * Gets the current direction of snek.\n     * @returns {string} current direction ('left', 'right', 'up', or 'down')\n     */\n    getCurrentDirection() {\n        const key = `${this._dx},${this._dy}`;\n        return this._directionMap.get(key) || 'unknown';\n    }\n\n    /**\n     * Moves snek in its current direction.\n     * @param {boolean} growing whether snek should grow\n     */\n    move(growing = false) {\n        this._advanceHead();\n        if (!growing) {\n            this._advanceTail();\n        }\n    }\n\n    /**\n     * Advances snek's head.\n     */\n    _advanceHead() {\n        // note: round to snap snek movement to grid, as defined by blockSize\n        const head = {\n            x: Math.round((this.getHeadPosition().x + this._dx) / this._blockSize) * this._blockSize,\n            y: Math.round((this.getHeadPosition().y + this._dy) / this._blockSize) * this._blockSize\n        };\n        this._body.unshift(head);\n\n        this._isChangingDirection = false;\n\n        // TODO: add to control panel\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\n    }\n\n    /**\n     * Advances snek's tail (removes the last segment).\n     */\n    _advanceTail() {\n        this._body.pop();\n    }\n\n    /**\n     * Teleports snek's head to a new position.\n     * Useful for unit testing.\n     * @param {{ x: number; y: number }} newPosition new position for the head\n     */\n    teleportHead(newPosition) {\n        this._body[0] = { ...newPosition };\n    }\n\n    /**\n     * Executes a callback for each segment of snek's body.\n     * @param {(segment: { x: number; y: number }, index: number) => void} callback\n     */\n    forEachSegment(callback) {\n        this._body.forEach((segment, index) => callback({ ...segment }, index));\n    }\n\n    /**\n     * Pauses snek's movement.\n     */\n    pause() {\n        // save velocity at pause\n        this._dxAtPause = this._dx;\n        this._dyAtPause = this._dy;\n        // set velocity to 0\n        this._dx = this._dy = 0;\n    }\n\n    /**\n     * Resumes snek's movement after a pause.\n     */\n    unpause() {\n        // set velocity to state before pause\n        this._dx = this._dxAtPause;\n        this._dy = this._dyAtPause;\n    }\n\n    /**\n     * Checks if snek has eaten an item.\n     * @param {import('./item').Item} item - item to check\n     * @returns {boolean} true if snek has eaten the item; false otherwise\n     */\n    didEat(item) {\n        let head = this.getHeadPosition();\n        return head.x === item.x && head.y === item.y;\n    }\n\n    /**\n     * Equips snek with a power-up\n     * @param {import('./item').Item} item - power-up item to equip\n     */\n    equip(item) {\n        if (item instanceof Teleport) this.powerUps[TELEPORT_CLASSNAME] = true;\n        if (item instanceof Phase) {\n            this.powerUps[PHASE_CLASSNAME] = true;\n            this.setGlow(true);\n        }\n    }\n\n    /**\n     * Sets the glow effect on snek.\n     * @param {boolean} shouldGlow - whether snek should glow\n     */\n    setGlow(shouldGlow) {\n        if (shouldGlow === this.isGlowing) return;\n\n        this._isGlowing = shouldGlow;\n\n        this._borderColor = shouldGlow ? SNAKE.PHASE_BORDER_COLOR : SNAKE.DEFAULT_BORDER_COLOR;\n\n        // console.log(`[snek] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\n    }\n\n    /**\n     * Checks if snek has collided with itself or the board boundaries.\n     * @param {number} boardWidth - width of the game board\n     * @param {number} boardHeight - height of the game board.\n     * @param {number} blockSize - size of each block on the board\n     * @returns {boolean} true if snek has collided; false otherwise\n     */\n    didCollide(boardWidth, boardHeight, blockSize) {\n        let head = this.getHeadPosition();\n\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\n        const collidesWithSelf = this._body.slice(4).some(segment => segment.x === head.x && segment.y === head.y);\n        if (collidesWithSelf) {\n            if (this.powerUps[PHASE_CLASSNAME]) {\n                // if phase powerup is equipped, decrement, ignore collision, and continue game\n                this.powerUps[PHASE_CLASSNAME] = false;\n                this.setGlow(false);\n\n                console.log('snek phased!');\n                return false;\n            }\n            return true;\n        }\n\n        // check for collisions with walls\n        const hitLeftWall = head.x < 0;\n        const hitRightWall = head.x + blockSize > boardWidth;\n        const hitTopWall = head.y < 0;\n        const hitBottomWall = head.y + blockSize > boardHeight;\n\n        const hitWall = hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\n\n        if (!hitWall) { return false; }\n\n        // if teleport power is equipped, decrement, teleport, and continue game\n        if (this.powerUps[TELEPORT_CLASSNAME]) {\n            this.powerUps[TELEPORT_CLASSNAME] = false;\n\n            // teleport to opposite side of the board\n            if (hitLeftWall) {\n                this.teleportHead({x: boardWidth - blockSize, y: head.y});\n            } else if (hitRightWall) {\n                this.teleportHead({x: 0, y: head.y});\n            } else if (hitTopWall) {\n                this.teleportHead({x: head.x, y: boardHeight - blockSize});\n            } else if (hitBottomWall) {\n                this.teleportHead({x: head.x, y: 0});\n            }\n\n            console.log('snek teleported!');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Changes the direction of snek.\n     * @param {string} direction - new direction\n     * @returns {boolean} true if snek direction was changed; false otherwise\n     */\n    changeDirection(direction) {\n        // prevent changing direction multiple times before the next move\n        if (this._isChangingDirection) return false;\n\n        const newDirection = getDirection(direction);\n        if (!newDirection) return false;\n\n        const currentDirection = this._getCurrentDirection();\n        // prevent snek from moving back on itself\n        if (isOppositeDirection(currentDirection, newDirection)) return false;\n\n        this._setNewDirection(newDirection);\n        return true;\n    }\n\n    /**\n     * Gets the current direction of snek.\n     * @returns {import('./direction').Direction} current direction\n     * @private\n     */\n    _getCurrentDirection() {\n        // normalize the current velocity to get direction\n        return normalizeDirection(this._dx, this._dy);\n    }\n\n    /**\n     * Sets a new direction for snek.\n     * @param {import('./direction').Direction} direction - new direction\n     * @private\n     */\n    _setNewDirection(direction) {\n        this._isChangingDirection = true;\n        this._dx = direction.dx * this._blockSize;\n        this._dy = direction.dy * this._blockSize;\n    }\n}\n","import { GAME_CONFIG } from '../config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from '../direction';\nimport { calculateMotionControl, isSignificantMotion } from '../motion';\n\nconst { INPUT } = GAME_CONFIG;\n\nconst SPACE_KEY = 'Space';\nconst LEFT_KEY = 'ArrowLeft';\nconst RIGHT_KEY = 'ArrowRight';\nconst UP_KEY = 'ArrowUp';\nconst DOWN_KEY = 'ArrowDown';\n\n/**\n * global to persist permission state across game sessions.\n * possible values: 'unknown', 'requesting', 'granted', 'denied'\n * */\nlet motionPermissionState = 'unknown';\n\n/**\n * Handles user input for the game.\n */\nexport class InputHandler {\n    /**\n     * @param {import('./game').Game} game - game instance\n     */\n    constructor(game) {\n        this._game = game;\n        this._motionAvailable = null;\n        // this._deviceOrientation = {\n        //     beta: 0,  // rotation around x-axis (-180 to 180)\n        //     gamma: 0  // rotation around y-axis (-90 to 90)\n        // };\n        this._lastOrientationUpdate = 0;\n        this._touchStart = { x: 0, y: 0 };\n        this._touchEnd = { x: 0, y: 0 };\n        this._boundMethods = this._bindMethods();\n\n        // TODO: reset on game pause too\n        this._initialOrientation = null;\n        this._lastOrientation = { beta: 0, gamma: 0 };\n        this._sensitivityMultiplier = 1;\n    }\n\n    /**\n     * Creates and returns an object containing all event handler methods bound to the current instance of InputHandler.\n     * Ensures they always have the correct `this` context when called, regardless of how they are invoked.\n     * @returns {Object} object containing bound method references\n     * @private\n     */\n    _bindMethods() {\n        return {\n            handleKeyInput: this._handleKeyInput.bind(this),\n            handleDeviceMovement: this._handleDeviceMovement.bind(this),\n            handleVisibilityChange: this._handleVisibilityChange.bind(this),\n            handlePauseClick: this._handlePauseClick.bind(this),\n            requestDeviceOrientation: this._requestDeviceOrientation.bind(this),\n            enterFullScreen: this._game.board.enterFullScreen.bind(this._game.board),\n            handleTouchStart: this._handleTouchStart.bind(this),\n            handleTouchEnd: this._handleTouchEnd.bind(this),\n            handleRestart: this._handleRestart.bind(this)\n        };\n    }\n\n    /**\n     * Manages all control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     */\n    manageGameControls(shouldAdd) {\n        this._manageKeyboardControls(shouldAdd);\n        this._manageMotionControls(shouldAdd);\n        this._manageTouchControls(shouldAdd);\n        this._manageClickControls(shouldAdd);\n        this._manageVisibilityControl(shouldAdd);\n    }\n\n    /**\n     * Manages controls for restarting the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     */\n    manageRestartControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        if (shouldAdd && !this._motionAvailable) {\n            // remove existing keyboard listener to avoid conflicts with new restart controls\n            document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\n        }\n        document[action]('keydown', this._boundMethods.handleRestart);\n        document[action]('click', this._boundMethods.handleRestart);\n    }\n\n    /**\n     * Manages keyboard control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageKeyboardControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('keydown', this._boundMethods.handleKeyInput);\n    }\n\n    /**\n     * Manages touch control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageTouchControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        this._game.board.canvas[action]('touchstart', this._boundMethods.handleTouchStart);\n        this._game.board.canvas[action]('touchend', this._boundMethods.handleTouchEnd);\n    }\n\n    /**\n     * Manages click control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageClickControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('click', this._boundMethods.handlePauseClick);\n        document[action]('dblclick', this._boundMethods.enterFullScreen);\n    }\n\n    /**\n     * Set up visibility change control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageVisibilityControl(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('visibilitychange', this._boundMethods.handleVisibilityChange, false);\n    }\n\n    /**\n     * Set up motion control event listeners for the game, if available.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageMotionControls(shouldAdd) {\n        if (typeof DeviceOrientationEvent === 'undefined') return;\n        shouldAdd ? this._listenToDeviceOrientation() : window.removeEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n    }\n\n    /**\n     * Checks if device orientation events are supported and sets up the appropriate listeners or permission requests.\n     * If permission is required (e.g., on iOS 13+), it creates a button for the user to request permission.\n     * If permission is already granted or not required, it activates motion control immediately.\n     * @private\n     */\n    _listenToDeviceOrientation() {\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n            if (motionPermissionState === 'granted') {\n                this._activateMotionControl();\n            } else {\n                this._createMotionRequestButton();\n            }\n        } else {\n            window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n        }\n    }\n\n    _createMotionRequestButton() {\n        let btn = this._game.board.createMotionRequestButton();\n        if (btn) {\n            btn.addEventListener('click', this._boundMethods.requestDeviceOrientation);\n\n            // give user time to grant permission\n            if (!this._game.state.paused) {\n                this._game.togglePause();\n            }\n\n            motionPermissionState = 'requesting';\n        }\n    }\n\n    /**\n     * Handles keyboard input.\n     * @param {KeyboardEvent} event - keyboard event\n     * @private\n     */\n    _handleKeyInput(event) {\n        const keyCommands = {\n            [LEFT_KEY]: () => this._game.snake.changeDirection(DIRECTION_LEFT),\n            [RIGHT_KEY]: () => this._game.snake.changeDirection(DIRECTION_RIGHT),\n            [UP_KEY]: () => this._game.snake.changeDirection(DIRECTION_UP),\n            [DOWN_KEY]: () => this._game.snake.changeDirection(DIRECTION_DOWN),\n            [SPACE_KEY]: () => this._game.togglePause(),\n        };\n\n        const commandFn = keyCommands[event.code];\n        if (commandFn) {\n            if (this._motionAvailable === null && !this._game.state.ended) {\n                console.log('key controls activated');\n            }\n\n            // disable motion control when keyboard is used\n            // (having both keyboard and motion event listeners makes the game less responsive)\n            this._deactivateMotionControl();\n\n            commandFn();\n        }\n    }\n\n    /**\n     * Handles click events for pausing the game.\n     * Disallows pause clicks while the game is requesting motion permission.\n     * @param {MouseEvent} event - The click event object\n     * @private\n     */\n    _handlePauseClick(event) {\n        if (motionPermissionState !== 'requesting') {\n            this._game.togglePause();\n        }\n    }\n\n    /**\n     * Handles restart events triggered by key press, click, or touch.\n     * @param {KeyboardEvent | MouseEvent | TouchEvent} event - event object\n     */\n    _handleRestart(event) {\n        if ((event instanceof KeyboardEvent && event.code === SPACE_KEY) ||\n            event.type === 'click' ||\n            event.type === 'touchend') {\n            this._game.restart();\n        }\n    }\n\n    /**\n     * Handles device motion input.\n     * @param {DeviceOrientationEvent} event - device orientation event\n     * @private\n     */\n    _handleDeviceMovement(event) {\n        // const now = Date.now();\n\n        const currentOrientation = {\n            beta: event.beta || 0,\n            gamma: event.gamma || 0\n        }\n\n        // // ensure we're not updating too frequently / causing jerkiness\n        // if (now - this._lastOrientationUpdate < INPUT.MOTION_THROTTLE_TIME_MS) {\n        //     return;\n        // }\n\n        if (!this._initialOrientation) {\n            this._initialOrientation = { ...currentOrientation };\n            this._lastOrientation = { ...currentOrientation };\n            // update the game's motion control state with initial orientation\n            this._game.updateMotionControl(currentOrientation, null, this._sensitivityMultiplier);\n            return;\n        }\n\n        const { direction, sensitivity, orientationChange } = calculateMotionControl(\n            currentOrientation,\n            this._initialOrientation,\n            this._lastOrientation,\n            this._sensitivityMultiplier\n        );\n\n        this._sensitivityMultiplier = sensitivity;\n\n        if (direction && isSignificantMotion(orientationChange, this._sensitivityMultiplier)) {\n            // check if this is the first significant movement detected\n            // used to determine when to switch from keyboard to motion controls\n            if (this._motionAvailable === null) {\n                this._activateMotionControl();\n            }\n\n            this._game.snake.changeDirection(direction);\n            this._lastOrientation = currentOrientation;\n        }\n\n        // const direction = this._getDirectionFromOrientation(recentChange);\n        // if (direction) {\n        //     this._game.snake.changeDirection(direction);\n        //     // this._lastOrientationUpdate = now;\n        //     this._lastOrientation = currentOrientation;\n        // }\n\n        // update motion control state\n        this._game.updateMotionControl(\n            currentOrientation,\n            direction,\n            this._sensitivityMultiplier\n        );\n    }\n\n    /**\n     * Handles visibility change of the document.\n     * @private\n     */\n    _handleVisibilityChange() {\n        if (document.hidden && !this._game.state.paused) {\n            this._game.togglePause();\n        }\n    }\n\n    /**\n     * Handles the touch start event.\n     * Records the initial Y position of the touch.\n     * @param {TouchEvent} event - touch start event\n     * @private\n     */\n    _handleTouchStart(event) {\n        event.preventDefault();\n\n        const firstTouch = event.changedTouches[0];\n        // console.log({\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\n        // });\n\n        this._touchStart = { x: firstTouch.screenX, y: firstTouch.screenY };\n    }\n\n    /**\n     * Handles the touch end event.\n     * Records the final Y position of the touch and calls handleSwipeGesture.\n     * @param {TouchEvent} event - touch end event\n     * @private\n     */\n    _handleTouchEnd(event) {\n        event.preventDefault();\n\n        const firstTouch = event.changedTouches[0];\n        // console.log({\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\n        // });\n\n        this._touchEnd = { x: firstTouch.screenX, y: firstTouch.screenY };\n\n        this._handleSwipeGesture();\n    }\n\n    /**\n     * Handles the gesture based on the swipe direction.\n     * Enters fullscreen on upward swipe, exits fullscreen on downward swipe,\n     * restarts the game if it has ended, or toggles pause otherwise.\n     * @private\n     */\n    _handleSwipeGesture() {\n        const verticalSwipe = this._touchStart.y - this._touchEnd.y;\n        if (verticalSwipe > INPUT.SWIPE_SENSITIVITY) {\n            // console.log(`swiped UP ${downY-upY}px`);\n            this._game.board.enterFullScreen();\n        } else if (verticalSwipe < -INPUT.SWIPE_SENSITIVITY) {\n            // console.log(`swiped DOWN ${upY-downY}px`);\n            this._game.board.exitFullScreen();\n        } else if (this._game.state.ended) {\n            this._game.restart();\n        } else if (motionPermissionState !== 'requesting') {\n            // console.log(`togglePause from handleGesture`);\n            this._game.togglePause();\n        }\n    }\n\n    // /**\n    //  * Determines if a change in device orientation is significant enough to trigger a direction change.\n    //  * Filters out small, unintentional device movements so we respond only to deliberate motions.\n    //  * @param {Object} orientationChange - change in device orientation\n    //  * @param {number} orientationChange.beta - change in beta (x-axis rotation) in degrees\n    //  * @param {number} orientationChange.gamma - change in gamma (y-axis rotation) in degrees\n    //  * @returns {boolean} true if the motion is considered significant; false otherwise\n    //  * @private\n    //  */\n    // _isSignificantMotion(orientationChange) {\n    //     const threshold = INPUT.MOTION_SENSITIVITY / this._sensitivityMultiplier;\n    //     return Math.abs(orientationChange.beta) > threshold || Math.abs(orientationChange.gamma) > threshold;\n    // }\n\n    // /**\n    //  * Determine direction based on orientation change.\n    //  * @param {{ beta: number, gamma: number }} orientationChange - the change in device orientation\n    //  * @returns {string | null} determined direction or null\n    //  * @private\n    //  */\n    // _getDirectionFromOrientation(orientationChange) {\n    //     const threshold = INPUT.MOTION_SENSITIVITY / this._sensitivityMultiplier;\n    //     if (Math.abs(orientationChange.beta) > Math.abs(orientationChange.gamma)) {\n    //         if (orientationChange.beta < -threshold) {\n    //             return DIRECTION_DOWN;\n    //         } else if (orientationChange.beta > threshold) {\n    //             return DIRECTION_UP;\n    //         }\n    //     } else {\n    //         if (orientationChange.gamma < -threshold) {\n    //             return DIRECTION_RIGHT;\n    //         } else if (orientationChange.gamma > threshold) {\n    //             return DIRECTION_LEFT;\n    //         }\n    //     }\n    //     return null;\n    // }\n\n    /**\n     * Request device orientation permission.\n     * @private\n     */\n    _requestDeviceOrientation() {\n        // iOS 13+ requires permission\n        DeviceOrientationEvent.requestPermission()\n            .then(state => {\n                motionPermissionState = state;\n                if (state === 'granted') {\n                    this._activateMotionControl();\n                    if (this._game.state.paused) {\n                        this._game.togglePause();\n                    }\n                } else {\n                    console.log('motion permission denied');\n                }\n            })\n            .catch(console.error)\n            .finally(() => {\n                this._game.board.removeMotionRequestButton();\n            });\n    }\n\n    /**\n     * Enables motion control for the game.\n     * @private\n     */\n    _activateMotionControl() {\n        document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\n        window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n\n        this._game.board.removeMotionRequestButton();\n        this._game.state.setSpeed(INPUT.GAME_SPEED_MS__MOTION);\n        this._motionAvailable = true;\n\n        console.log('motion controls activated');\n    }\n\n    /**\n     * Disables motion control for the game.\n     * @private\n     */\n    _deactivateMotionControl() {\n        this._game.board.removeMotionRequestButton();\n        window.removeEventListener('deviceorientation', this._handleDeviceMovement);\n        this._game.state.setSpeed(INPUT.GAME_SPEED_MS__ARROW);\n        this._motionAvailable = false;\n    }\n\n    /**\n     * Logs debug information about the current state of motion controls.\n     * This method is intended to be called periodically (e.g., in the game loop)\n     * to provide ongoing insight into the motion control system's state.\n     * @private\n     */\n    _debugMotionControl() {\n        console.log('motion control debug info', {\n            motionAvailable: this._motionAvailable,\n            motionPermissionState: motionPermissionState,\n            // deviceOrientation: this._deviceOrientation,\n            lastOrientation: this._lastOrientation,\n            isChangingDirection: this._game.snake._isChangingDirection,\n            snakeDirection: this._game.snake.getCurrentDirection()\n        });\n    }\n\n    /**\n     * Simulates the presence of the DeviceOrientationEvent.requestPermission API.\n     * This method is useful for testing or development environments where the actual API might not be available.\n     * It creates a mock DeviceOrientationEvent object with a requestPermission method that always resolves to 'granted'.\n     * @static\n     * @private\n     */\n    static _simulateDeviceOrientationRequestPermission() {\n        // create DeviceOrientationEvent if it doesn't exist\n        if (typeof DeviceOrientationEvent === 'undefined') {\n            window.DeviceOrientationEvent = {};\n        }\n\n        // add requestPermission method\n        window.DeviceOrientationEvent.requestPermission = () => {\n            return new Promise((resolve) => {\n                resolve('granted');\n            });\n        };\n\n        // modify typeof operator for requestPermission\n        Object.defineProperty(Object.prototype, 'requestPermission', {\n            value: function() {}\n        });\n    }\n}\n\n// TODO: consider refactoring to use Command interface again if\n// key controls AND mouse/touch/motion controls can all use it\n\n/**\n * Represents a command to pause the game.\n */\nclass PauseCommand {\n\n    /**\n     * Executes the pause command.\n     * @param {import('./game').Game} game - game instance\n     */\n    execute(game) {\n        game.togglePause();\n    }\n}\n\n/**\n * Represents a command to move snek.\n */\nclass MoveCommand {\n\n    /**\n     * @param {string} direction - direction to move\n     */\n    constructor(direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * Executes the move command.\n     * @param {import('./game').Game} game - game instance\n     */\n    execute(game) {\n        game.snake.changeDirection(this.direction);\n    }\n}\n","import { GAME_CONFIG } from './config';\n\nconst { CANVAS } = GAME_CONFIG;\n\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\n\n/**\n * A fake \"context manager\" for pixel sharpness.\n * https://stackoverflow.com/a/8696641\n * @param {CanvasRenderingContext2D} ctx - canvas rendering context\n * @param {() => void} cb - callback function to execute within the context\n */\nfunction withStraddle(ctx, cb) {\n    const offset = 0.5;\n\n    try {\n        // turn on 'straddle' trick to avoid blurriness\n        ctx.translate(offset, offset);\n        cb();\n    } finally {\n        // turn off 'straddle' trick to avoid blurriness\n        ctx.translate(-offset, -offset);\n    }\n}\n\n/**\n * Draws the game board and background.\n * @param {import('./game/game').Game} game - game object\n */\nexport function drawGame(game) {\n    let board = game.board;\n    let ctx = board.ctx;\n\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        ctx.filter = board.activeFilter;\n\n        // set border and background colors\n        ctx.fillStyle = board.color;\n        if (board.isGlowing) {\n            // note: strokeRect doesn't do a good job of bordering the canvas,\n            // so we fall back to CSS styling\n\n            // https://stackoverflow.com/a/5670984\n            board.canvas.style.border = 'none'\n            board.canvas.style.outline = `${board.borderColor} dashed thin`;\n            board.canvas.style.boxShadow = `0 0 10px ${board.color}`;\n            board.canvas.style.transition = 'box-shadow linear 1s';\n        } else {\n            board.canvas.style.border = `2px solid ${board.borderColor}`;\n            board.canvas.style.outline = 'none';\n            board.canvas.style.boxShadow = 'none';\n            board.canvas.style.transition = 'box-shadow linear 0.5s';\n        }\n\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\n\n        if (game.state.paused) {\n            let useExclamation = board.needsPermission();\n\n            const iconSize = CANVAS.GAME_TEXT_FONT_SIZE * board.ratio;\n            const iconPadding = 5 * board.ratio;\n\n            // since filters don't work on iOS safari, we need another visual aid\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\n            // or exclamation triangle icon if we still need permissions\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\n            ctx.font = `${iconSize}px \"bootstrap-icons\"`;\n            ctx.fillStyle = useExclamation ? CANVAS.EXCLAMATION_BTN_COLOR : CANVAS.PAUSE_BTN_COLOR;\n            ctx.fillText(String.fromCharCode(\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\n            ), iconPadding, iconSize + iconPadding, board.canvas.width);\n        }\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws snek on the game board.\n * @param {import('./snake').Snake} snake - snek object\n * @param {import('./board').Board} board - game board\n */\nexport function drawSnake(snake, board) {\n    const ctx = board.ctx;\n\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        if (snake.isGlowing) {\n            // https://stackoverflow.com/a/43676108\n            ctx.lineCap = 'round';\n            ctx.shadowBlur = 18;\n            ctx.shadowColor = snake.color;\n        }\n\n        ctx.fillStyle = snake.color;\n        ctx.strokeStyle = snake.borderColor;\n\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} */ segment) => {\n            ctx.fillRect(segment.x, segment.y, board.blockSize, board.blockSize);\n            ctx.strokeRect(segment.x, segment.y, board.blockSize, board.blockSize);\n        });\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws an item on the game board.\n * @param {import('./item').Item} item - item object\n * @param {import('./board').Board} board - game board\n */\nexport function drawItem(item, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        ctx.fillStyle = item.fillColor;\n        ctx.strokeStyle = item.borderColor;\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws the current score on the game board.\n * @param {number} score - current score\n * @param {import('./board').Board} board - game board\n */\nexport function drawScore(score, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\n    ctx.fillText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) - ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\n\n    ctx.restore();\n}\n\n/**\n * Draws the high score on the game board.\n * @param {number} score - high score\n * @param {import('./board').Board} board - game board\n */\nexport function drawHighScore(score, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.strokeStyle = CANVAS.HIGH_SCORE_TEXT_COLOR;\n    ctx.strokeText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) + ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\n\n    ctx.restore();\n}\n\n/**\n * Draws the game over message on the game board.\n * @param {import('./board').Board} board - game board\n */\nexport function drawGameOver(board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\n\n    ctx.restore();\n}\n","import * as defaultCanvas from '../canvas';\n\n// fn to create render functions with canvas as injected dependency\nexport function createRenderFunctions(canvas = defaultCanvas) {\n    /**\n     * Renders the current game state.\n     * @param {import('./game').Game} game - game object to render\n     */\n    function renderGame(game) {\n        canvas.drawGame(game);\n        canvas.drawScore(game.state.score, game.board);\n        canvas.drawHighScore(game.state.highScore, game.board);\n        canvas.drawItem(game.item, game.board);\n        canvas.drawSnake(game.snake, game.board);\n    }\n\n    /**\n     * Renders the game over state.\n     * @param {import('./game').Game} game - game object to render\n     */\n    function renderGameOver(game) {\n        game.board.setEndGameFilter();\n        canvas.drawGame(game);\n        canvas.drawItem(game.item, game.board);\n        canvas.drawSnake(game.snake, game.board);\n        canvas.drawGameOver(game.board);\n    }\n\n    return { renderGame, renderGameOver };\n}\n\n// export the default render functions\nconst { renderGame, renderGameOver } = createRenderFunctions();\nexport { renderGame, renderGameOver };\n","import { GAME_CONFIG } from '../config';\n\nconst { INPUT, STATE } = GAME_CONFIG;\n\n/**\n * Represents the state of the game.\n */\nexport class GameState {\n\n    constructor() {\n        // states\n        this._paused = false;\n        this._ended = false;\n\n        // values\n        this._score = 0;\n        this._highScore = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, 0);\n        this._speed = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, INPUT.GAME_SPEED_MS__ARROW);\n    }\n\n    /**\n     * Gets the speed of the game, aka time between frame updates, in milliseconds.\n     * @returns {number} game speed\n     */\n    get speed() {\n        return this._speed;\n    }\n\n    /**\n     * Gets the current score of the game.\n     * @returns {number} current score\n     */\n    get score() {\n        return this._score;\n    }\n\n    /**\n     * Gets the high score of all games.\n     * @returns {number} high score\n     */\n    get highScore() {\n        return this._highScore;\n    }\n\n    /**\n     * Gets whether or not the game is paused.\n     * @returns {boolean} true if game is paused; false otherwise\n     */\n    get paused() {\n        return this._paused;\n    }\n\n    /**\n     * Gets whether or not the game has ended.\n     * @returns {boolean} true if game has ended; false otherwise\n     */\n    get ended() {\n        return this._ended;\n    }\n\n    /**\n     * Updates the current score.\n     * @param {number} increment - amount to increase the score by\n     */\n    updateScore(increment) {\n        this._score += increment;\n    }\n\n    /**\n     * Updates the high score if the current score is higher.\n     */\n    updateHighScore() {\n        if (this.score > this.highScore) {\n            this._highScore = this.score;\n            this._setItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, this.score);\n            // TODO: add clearing the high score to control panel\n        }\n    }\n\n    /**\n     * Sets the game speed.\n     * @param {number} speed - new game speed to use\n     */\n    setSpeed(speed) {\n        if (typeof speed !== 'number' || isNaN(speed)) {\n            return;\n        }\n        this._speed = Math.max(0, Math.round(speed));\n    }\n\n    /**\n     * Toggles the pause state of the game.\n     */\n    togglePause() {\n        this._paused = !this.paused;\n    }\n\n    /**\n     * Ends the game and saves the current game speed.\n     */\n    endGame() {\n        this._ended = true;\n        this._setItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, this.speed);\n    }\n\n    /**\n     * Safely gets an item from localStorage.\n     * @param {string} key - The key to retrieve from localStorage\n     * @param {*} defaultValue - The default value to return if retrieval fails\n     * @returns {*} The value from localStorage or the default value\n     * @private\n     */\n    _getItemSafely(key, defaultValue) {\n        try {\n            const value = localStorage.getItem(key);\n            return value !== null ? JSON.parse(value) : defaultValue;\n        } catch (error) {\n            console.warn(`Error reading from localStorage: ${error.message}`);\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Safely sets an item in localStorage.\n     * @param {string} key - The key to set in localStorage\n     * @param {*} value - The value to set\n     * @private\n     */\n    _setItemSafely(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n        } catch (error) {\n            console.warn(`Error writing to localStorage: ${error.message}`);\n        }\n    }\n}\n","import { Board } from '../board';\nimport { GAME_CONFIG } from '../config';\nimport { displayErrorMessage } from '../error';\nimport { Food, Item, Phase, TELEPORT_CLASSNAME, Teleport, selectRandomItem } from '../item';\nimport { MotionControlIndicator } from '../motion';\nimport { Snake } from '../snake';\nimport { InputHandler } from './input';\nimport { renderGame, renderGameOver } from './render';\nimport { GameState } from './state';\n\nconst { GAME } = GAME_CONFIG;\n\nconst CANVAS_ID = 'gameCanvas';\nconst CONTROL_PANEL_ID = 'controlPanel';\nconst UI_CONTAINER_ID = 'uiContainer';\n\n/**\n * Represents the main game logic and state.\n */\nexport class Game {\n\n    /**\n     * @param {Board} board - game board\n     * @param {Snake} snake - snek\n     * @param {Item} item - current game item\n     */\n    constructor(board, snake, item) {\n        this.board = board;\n        this.snake = snake;\n        this.item = item;\n\n        this.state = new GameState();\n        this.input = new InputHandler(this);\n\n        this._lastUpdateTimestamp = 0;\n\n        // properties for motion control indicator\n        this.orientation = { beta: 0, gamma: 0 };\n        this.motionDirection = null;\n        this.motionSensitivity = 1;\n\n        // TODO: put in control panel (debug tool)\n        // TODO: only show when motion control is active\n        this._initializeUI();\n    }\n\n    /**\n     * Runs the game loop.\n     * @param {DOMHighResTimeStamp} now - current timestamp\n     */\n    run(now) {\n        if (this._shouldUpdateFrame(now)) {\n            this._updateFrame();\n            if (this.state._ended) {\n                renderGameOver(this);\n                return;\n            } else {\n                renderGame(this);\n            }\n        }\n\n        // run game loop again\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    /**\n     * Toggles pause state of the game.\n     */\n    togglePause() {\n        this.state.togglePause();\n\n        if (this.state.paused) {\n            this.snake.pause();\n            this.board.setPauseGameFilter();\n        } else {\n            this.snake.unpause();\n            this.board.resetFilter();\n        }\n\n        // TODO: pause/unpause any game sounds\n        // this.audio.togglePause();\n\n        console.log(`game ${this.state.paused ? 'paused' : 'resumed'}`);\n    }\n\n    /**\n     * Restarts the game.\n     */\n    restart() {\n        this.input.manageRestartControls(false);\n        console.log('game restarted');\n        runGame();\n    }\n\n    updateMotionControl(orientation, direction, sensitivity) {\n        this.orientation = orientation;\n        this.motionDirection = direction;\n        this.motionSensitivity = sensitivity;\n        if (this.motionIndicator) {\n            this.motionIndicator.update(orientation, direction, sensitivity);\n        }\n    }\n\n    /**\n     * Determines if the current frame of the game loop should be updated.\n     * @param {DOMHighResTimeStamp} now - current timestamp\n     * @returns {boolean} true if the frame should update; false otherwise\n     * @private\n     */\n    _shouldUpdateFrame(now) {\n        if (now - this._lastUpdateTimestamp >= this.state.speed) {\n            this._lastUpdateTimestamp = now;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the current frame based on game logic.\n     * This method checks the game state and advances snek as necessary.\n     * @private\n     */\n    _updateFrame() {\n        if (this.state.ended) return;\n        if (!this.state.paused) {\n            this._advanceSnake();\n            // TODO: add to control panel\n            // this.input._debugMotionControl();\n        }\n    }\n\n    _initializeUI() {\n        const uiContainer = document.getElementById(UI_CONTAINER_ID);\n        if (!uiContainer) {\n            console.warn(`UI container with id '${UI_CONTAINER_ID}' not found. Motion control indicator will not be displayed.`);\n            return;\n        }\n\n        this.motionIndicator = new MotionControlIndicator(uiContainer, {\n            showInfo: false,\n            position: 'corner'\n        });\n    }\n\n    /**\n     * Snek movement, collision, and item consumption logic.\n     * @private\n     */\n    _advanceSnake() {\n        let didEatBeforeMove = this.snake.didEat(this.item);\n\n        // move snek, growing if it ate an item\n        this.snake.move(didEatBeforeMove);\n\n        if (didEatBeforeMove) {\n            console.log(`snek ate item: ${this.item.type.toUpperCase()}`);\n\n            this.state.updateScore(GAME.SCORE_INCREMENT);\n\n            // apply item effects\n            this.snake.equip(this.item);\n\n            // update board effects if necessary\n            this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\n\n            // generate a new item\n            this._generateNewItem();\n        } else {\n            // optionally regenerate item based on game conditions\n            this._maybeRegenerateItem();\n        }\n\n        // TODO: add to control panel\n        // console.log(`${this.item.type}: ${this.item.x}, ${this.item.y}`);\n\n        if (this._checkCollision()) {\n            this._end();\n        }\n    }\n\n    /**\n     * Generates a new item on the board.\n     * @private\n     */\n    _generateNewItem() {\n        let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\n            { alwaysReturnItem: true, reducePowerUpProbability: false }\n        );\n        if (itemClass !== null) {\n            this.item = new itemClass(this.board, this.snake);\n            console.log(`new item generated: ${this.item.type.toUpperCase()}`);\n        }\n    }\n\n    /**\n     * Possibly regenerates the current item based on game conditions:\n     * (1) when the player is already performing well (high score),\n     * we make the food volatile, or able to change or disappear, like power-ups are.\n     * (2) when there's already a power-up on the board, we reduce the chance of chain-spawning power-ups.\n     * @private\n     */\n    _maybeRegenerateItem() {\n        const foodIsVolatile = this.state.score >= GAME.SCORE_THRESHOLD_FOR_VOLATILE_FOOD;\n        if (foodIsVolatile || this.item instanceof Teleport || this.item instanceof Phase) {\n            let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\n                {alwaysReturnItem: false, reducePowerUpProbability: true}\n            );\n            if (itemClass !== null) {\n                this.item = new itemClass(this.board, this.snake);\n                console.log(`item regenerated: ${this.item.type.toUpperCase()}`);\n            }\n        }\n    }\n\n    /**\n     * Checks if snek has collided with the board boundaries or itself.\n     * @returns {boolean} true if a collision occurred; false otherwise\n     * @private\n     */\n    _checkCollision() {\n        // always set game board glow based on whether or not teleport powerup is equipped\n        this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\n        return this.snake.didCollide(this.board.width, this.board.height, this.board.blockSize);\n    }\n\n    /**\n     * Ends the game and updates final state.\n     * @private\n     */\n    _end() {\n        this.state.endGame();\n        this.state.updateHighScore();\n\n        this.input.manageGameControls(false);\n        this.input.manageRestartControls(true);\n\n        console.log(`game over - final score: ${this.state.score}`);\n    }\n}\n\n// <!-- GAME EXECUTION HELPERS BELOW -->\n\n/**\n * Initializes and runs the game.\n */\nexport function runGame() {\n    try {\n        let board = _initBoard();\n        let snake = new Snake(board.height, board.height, board.blockSize);\n        let food = new Food(board, snake);\n        let game = new Game(board, snake, food);\n\n        game.input.manageGameControls(true);\n\n        requestAnimationFrame((t) => game.run(t));\n    } catch (error) {\n        console.error('failed to initialize game:', error);\n        // display an error message to the user\n        displayErrorMessage('Failed to start the game. Please refresh the page and try again.', document.getElementById(CANVAS_ID));\n    }\n}\n\n/**\n * Initializes the game board.\n * @returns {Board} initialized game board\n * @throws {Error} ff the canvas element is not found or is not an HTMLCanvasElement\n * @private\n */\nfunction _initBoard() {\n    let canvas, ctrl_panel;\n    if (!(canvas = document.getElementById(CANVAS_ID))) {\n        throw new Error(`HTML canvas with id '${CANVAS_ID}' not found`);\n    }\n    if (!(canvas instanceof HTMLCanvasElement)) {\n        throw new Error(`#${CANVAS_ID} element is not an HTML canvas`);\n    }\n    if (!(ctrl_panel = document.getElementById(CONTROL_PANEL_ID))) {\n        console.warn(`control panel element with id '${CONTROL_PANEL_ID}' not found. proceeding without control panel.`);\n    }\n\n    let board = new Board(canvas, ctrl_panel);\n\n    return board;\n}\n","import { runGame } from './game/game';\n\n// note: un-comment for debugging\n// import { InputHandler } from './game/input';\n// InputHandler._simulateDeviceOrientationRequestPermission();\n\nrunGame();\n"],"names":["GAME_CONFIG","BOARD","CTRL_PANEL_HEIGHT","MARGIN_SIZE","NUM_STEPS_ACROSS_CANVAS","DEFAULT_BACKGROUND_COLOR","DEFAULT_BORDER_COLOR","TELEPORT_BORDER_COLOR","TELEPORT_BACKGROUND_COLOR","FILTERS","NONE","PAUSE","ENDGAME","SNAKE","INITIAL_LENGTH","DEFAULT_COLOR","PHASE_BORDER_COLOR","ITEM","FOOD_COLOR","FOOD_BORDER_COLOR","PHASE_COLOR","TELEPORT_COLOR","PHASE_SCORE_THRESHOLD","TELEPORT_SCORE_THRESHOLD","BASE_PHASE_PROBABILITY","BASE_TELEPORT_PROBABILITY","BASE_VOLATILE_FOOD_PROBABILITY","GAME","SCORE_INCREMENT","SCORE_THRESHOLD_FOR_VOLATILE_FOOD","INPUT","GAME_SPEED_MS__ARROW","GAME_SPEED_MS__MOTION","SWIPE_SENSITIVITY","MOTION_SENSITIVITY","MOTION_THROTTLE_TIME_MS","MOTION_DEADZONE","DOMINANT_DIRECTION_THRESHOLD","CANVAS","GAME_TEXT_COLOR","HIGH_SCORE_TEXT_COLOR","PAUSE_BTN_COLOR","EXCLAMATION_BTN_COLOR","GAME_TEXT_FONT_FAMILY","GAME_TEXT_FONT_SIZE","STATE","LOCAL_STORAGE_KEY_HIGH_SCORE","LOCAL_STORAGE_KEY_GAME_SPEED","ERROR","MESSAGE_FONT","MESSAGE_COLOR","MESSAGE_BACKGROUND","MOTION_REQUEST_BUTTON_ID","Board","constructor","canvas","ctrlPanel","this","_canvas","_ctrlPanel","ctx","getContext","Error","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","width","_height","height","_blockSize","_activeFilter","_color","_borderColor","_isGlowing","resetFilter","color","borderColor","isGlowing","activeFilter","blockSize","ratio","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestButton","existingBtn","getMotionRequestButton","btn","createElement","innerHTML","setAttribute","type","appendChild","element","getElementById","HTMLButtonElement","removeMotionRequestButton","parentNode","removeChild","setGlow","shouldGlow","needsPermission","gridBlockSize","Math","min","innerWidth","innerHeight","floor","style","displayErrorMessage","message","HTMLCanvasElement","console","error","displayErrorInDOM","save","font","fillStyle","messageWidth","measureText","messageHeight","messageX","messageY","fillRect","textAlign","textBaseline","fillText","restore","displayErrorOnCanvas","errorDiv","position","top","left","transform","backgroundColor","padding","borderRadius","zIndex","whiteSpace","maxWidth","overflowWrap","textContent","body","PHASE_CLASSNAME","TELEPORT_CLASSNAME","Item","board","snake","_x","Number","MIN_SAFE_INTEGER","_y","_generate","x","y","fillColor","_randomBlock","forEachSegment","snakeSegment","max","round","random","Food","Teleport","Phase","ITEM_TYPES","none","food","teleport","phase","selectRandomItem","score","powerUps","options","alwaysReturnItem","reducePowerUpProbability","itemChances","teleportProb","calculateTeleportProbability","phaseProb","calculatePhaseProbability","foodProb","noItemProb","probabilities","totalProb","Object","values","reduce","sum","prob","abs","calculateItemProbabilities","selectedItemType","chances","cumulativeProbability","item","probability","entries","pickItem","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTIONS","dx","dy","MotionControlIndicator","container","showInfo","create","dot","querySelector","arrows","querySelectorAll","directionValue","sensitivityValue","betaValue","gammaValue","addStyles","head","update","orientation","direction","sensitivity","beta","gamma","maxTilt","tiltX","tiltY","dotPx","forEach","arrow","classList","remove","toLowerCase","add","toFixed","calculateMotionControl","currentOrientation","initialOrientation","lastOrientation","sensitivityMultiplier","orientationChange","totalChange","recentChange","newSensitivityMultiplier","sqrt","adjustedDeadzone","absBeta","absGamma","getDirectionFromOrientation","Snake","boardWidth","boardHeight","centerX","centerY","_body","_createBody","_dx","_dxAtPause","_dy","_dyAtPause","_isChangingDirection","_directionMap","Map","length","i","push","getHeadPosition","getCurrentDirection","key","get","move","growing","_advanceHead","_advanceTail","unshift","pop","teleportHead","newPosition","callback","segment","index","pause","unpause","didEat","equip","didCollide","slice","some","log","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirection","newDirection","getDirection","currentDirection","_getCurrentDirection","dir2","dir1","_setNewDirection","magnitude","normalizeDirection","SPACE_KEY","LEFT_KEY","RIGHT_KEY","UP_KEY","DOWN_KEY","motionPermissionState","InputHandler","game","_game","_motionAvailable","_lastOrientationUpdate","_touchStart","_touchEnd","_boundMethods","_bindMethods","_initialOrientation","_lastOrientation","_sensitivityMultiplier","handleKeyInput","_handleKeyInput","bind","handleDeviceMovement","_handleDeviceMovement","handleVisibilityChange","_handleVisibilityChange","handlePauseClick","_handlePauseClick","requestDeviceOrientation","_requestDeviceOrientation","handleTouchStart","_handleTouchStart","handleTouchEnd","_handleTouchEnd","handleRestart","_handleRestart","manageGameControls","shouldAdd","_manageKeyboardControls","_manageMotionControls","_manageTouchControls","_manageClickControls","_manageVisibilityControl","manageRestartControls","action","removeEventListener","DeviceOrientationEvent","_listenToDeviceOrientation","requestPermission","_activateMotionControl","_createMotionRequestButton","addEventListener","state","paused","togglePause","event","commandFn","code","ended","_deactivateMotionControl","KeyboardEvent","restart","updateMotionControl","threshold","isSignificantMotion","hidden","preventDefault","firstTouch","changedTouches","screenX","screenY","_handleSwipeGesture","verticalSwipe","catch","finally","setSpeed","_debugMotionControl","motionAvailable","isChangingDirection","snakeDirection","_simulateDeviceOrientationRequestPermission","Promise","resolve","defineProperty","prototype","value","withStraddle","cb","offset","translate","filter","border","outline","boxShadow","transition","useExclamation","iconSize","iconPadding","String","fromCharCode","lineCap","shadowBlur","shadowColor","strokeStyle","strokeRect","toString","strokeText","renderGame","renderGameOver","defaultCanvas","drawGame","drawScore","drawHighScore","highScore","drawItem","drawSnake","drawGameOver","createRenderFunctions","GameState","_paused","_ended","_score","_highScore","_getItemSafely","_speed","speed","updateScore","increment","updateHighScore","_setItemSafely","isNaN","endGame","defaultValue","localStorage","getItem","JSON","parse","warn","setItem","stringify","CANVAS_ID","CONTROL_PANEL_ID","UI_CONTAINER_ID","Game","input","_lastUpdateTimestamp","motionDirection","motionSensitivity","_initializeUI","run","now","_shouldUpdateFrame","_updateFrame","requestAnimationFrame","t","runGame","motionIndicator","_advanceSnake","uiContainer","didEatBeforeMove","toUpperCase","_generateNewItem","_maybeRegenerateItem","_checkCollision","_end","itemClass","ctrl_panel","_initBoard"],"mappings":"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"}