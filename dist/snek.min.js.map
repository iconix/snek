{"version":3,"file":"snek.min.js","sources":["../src/js/canvas.js","../src/js/board.js","../src/js/item.js","../src/js/snake.js","../src/js/game.js","../src/js/main.js"],"sourcesContent":["const EXCLAMATION_BTN_COLOR = 'darkkhaki';\r\nconst GAME_TEXT_COLOR = 'gray';\r\nconst PAUSE_BTN_COLOR = 'darkkhaki';\r\n\r\nconst GAME_TEXT_FONT_FAMILY = '\"Saira\", serif';\r\n\r\nconst GAME_TEXT_FONT_SIZE = 50;\r\n\r\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\r\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\r\n\r\n/**\r\n * a fake contextmanager\r\n * for pixel sharpness https://stackoverflow.com/a/8696641\r\n *\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {{ (): void; }} cb\r\n * @returns {void}\r\n */\r\nfunction withStraddle(ctx, cb) {\r\n    const offset = 0.5;\r\n\r\n    try {\r\n        // turn on 'straddle' trick to avoid blurriness\r\n        ctx.translate(offset, offset);\r\n        cb();\r\n    } finally {\r\n        // turn off 'straddle' trick to avoid blurriness\r\n        ctx.translate(-offset, -offset);\r\n    }\r\n}\r\n\r\n/**\r\n * @param {import('./game').Game} game\r\n * @returns {void}\r\n */\r\nexport function drawGame(game) {\r\n    let board = game.board;\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.filter = board.activeFilter;\r\n\r\n        // set border and background colors\r\n        ctx.fillStyle = board.color;\r\n        if (board.isGlowing) {\r\n            // n.b. strokeRect doesn't do a good job of bordering the canvas,\r\n            // so we fall back to CSS styling\r\n\r\n            // https://stackoverflow.com/a/5670984\r\n            board.canvas.style.border = 'none'\r\n            board.canvas.style.outline = `${board.borderColor} dashed thin`;\r\n            board.canvas.style.boxShadow = `0 0 10px ${board.color}`;\r\n            board.canvas.style.transition = 'box-shadow linear 1s';\r\n        } else {\r\n            board.canvas.style.border = `2px solid ${board.borderColor}`;\r\n            board.canvas.style.outline = 'none';\r\n            board.canvas.style.boxShadow = 'none';\r\n            board.canvas.style.transition = 'box-shadow linear 0.5s';\r\n        }\r\n\r\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\r\n\r\n        if (game.paused) {\r\n            let useExclamation = board.needsPermission();\r\n\r\n            // since filters don't work on iOS safari, we need another visual aid\r\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\r\n            // or exclamation triangle icon if we still need permissions\r\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\r\n            ctx.font = (GAME_TEXT_FONT_SIZE * board.ratio) + 'px \"bootstrap-icons\"';\r\n            ctx.fillStyle = useExclamation ? EXCLAMATION_BTN_COLOR : PAUSE_BTN_COLOR;\r\n            ctx.fillText(String.fromCharCode(\r\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\r\n            ), 30 * board.ratio, 50 * board.ratio);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * @param {import('./snake').Snake} snake\r\n * @param {import('./board').Board} board\r\n * @returns {void}\r\n */\r\nexport function drawSnake(snake, board) {\r\n    snake.body.forEach((/** @type {{ x: number; y: number; }} */ snakePart) => drawSnakePart(\r\n        snakePart,\r\n        snake.color,\r\n        snake.borderColor,\r\n        snake.isGlowing,\r\n        board\r\n    ));\r\n}\r\n\r\n/**\r\n * @param {import('./item').Item} item\r\n * @param {import('./board').Board} board\r\n * @returns {void}\r\n */\r\nexport function drawItem(item, board) {\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = item.fillColor;\r\n        ctx.strokeStyle = item.borderColor;\r\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\r\n    });\r\n}\r\n\r\n/**\r\n * @param {number} score\r\n * @param {import('./board').Board} board\r\n * @returns {void}\r\n */\r\nexport function drawScore(score, board) {\r\n    let ctx = board.ctx;\r\n\r\n    ctx.font = `${GAME_TEXT_FONT_SIZE * board.ratio}px ${GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = GAME_TEXT_COLOR;\r\n    ctx.fillText(score.toString(), board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n}\r\n\r\n/**\r\n * @param {import('./board').Board} board\r\n * @returns {void}\r\n */\r\nexport function drawGameEnd(board) {\r\n    let ctx = board.ctx;\r\n\r\n    ctx.font = `${GAME_TEXT_FONT_SIZE * board.ratio}px ${GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = GAME_TEXT_COLOR;\r\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n}\r\n\r\n/**\r\n * @param {{ x: number; y: number; }} snakePart\r\n * @param {string} color\r\n * @param {string} borderColor\r\n * @param {boolean} isGlowing\r\n * @param {import('./board').Board} board\r\n * @returns {void}\r\n */\r\nfunction drawSnakePart(snakePart, color, borderColor, isGlowing, board) {\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = borderColor;\r\n\r\n        if (isGlowing) {\r\n            // https://stackoverflow.com/a/43676108\r\n            ctx.lineCap = 'round';\r\n            ctx.shadowBlur = 18;\r\n            ctx.shadowColor = color;\r\n        }\r\n\r\n        ctx.fillRect(snakePart.x, snakePart.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(snakePart.x, snakePart.y, board.blockSize, board.blockSize);\r\n\r\n        if (isGlowing) {\r\n            // reset to defaults\r\n            ctx.lineCap = 'butt';\r\n            ctx.shadowBlur = 0;\r\n        }\r\n    });\r\n}\r\n","const CTRL_PANEL_HEIGHT = 50;  // pixels\r\nconst NUM_STEPS_ACROSS_CANVAS = 30;\r\n\r\nconst DEFAULT_BACKGROUND_COLOR = 'white';\r\nconst DEFAULT_BORDER_COLOR = 'darkgreen';\r\nconst TELEPORT_BORDER_COLOR = 'blue';\r\nconst TELEPORT_BACKGROUND_COLOR = '#e2f1fa';  // a light blue\r\n\r\nconst NO_FILTER = 'none';\r\nconst PAUSE_FILTER = 'contrast(1.4) sepia(1)';\r\nconst ENDGAME_FILTER = 'grayscale(0.8) blur(0.5px)';\r\n\r\nconst MOTION_REQUEST_BUTTON_ID = 'motionRequest';\r\n\r\nexport class Board {\r\n    /**\r\n     * @param {HTMLCanvasElement} canvas\r\n     * @param {HTMLElement} ctrlPanel\r\n     */\r\n    constructor(canvas, ctrlPanel) {\r\n        this._canvas = canvas;\r\n        this._ctrlPanel = ctrlPanel;\r\n\r\n        // 2d drawing context\r\n        if (!(this.ctx = this._canvas.getContext('2d'))) {\r\n            throw new Error('2d context not supported or canvas already initialized');\r\n        }\r\n\r\n        this._boardSize = this._calculateBoardSize();\r\n\r\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\r\n        this._ratio = window.devicePixelRatio || 1;\r\n\r\n        this._sizeCanvas();\r\n        this._sizeControlPanel();\r\n\r\n        this._width = canvas.width;\r\n        this._height = canvas.height;\r\n        this._blockSize = canvas.width / NUM_STEPS_ACROSS_CANVAS;\r\n\r\n        this._activeFilter = NO_FILTER;\r\n        this._color = DEFAULT_BACKGROUND_COLOR;\r\n        this._borderColor = DEFAULT_BORDER_COLOR;\r\n        this._isGlowing = false;\r\n\r\n        this.resetFilter();\r\n\r\n        // console.log({\r\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\r\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\r\n        //     'canvas.height': canvas.height, block_size: this._blockSize\r\n        // })\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLCanvasElement}\r\n     */\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get isGlowing() {\r\n        return this._isGlowing;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get activeFilter() {\r\n        return this._activeFilter;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get blockSize() {\r\n        return this._blockSize;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get ratio() {\r\n        return this._ratio;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    resetFilter() {\r\n        this._activeFilter = NO_FILTER;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    setEndGameFilter() {\r\n        this._activeFilter = ENDGAME_FILTER;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    setPauseGameFilter() {\r\n        this._activeFilter = PAUSE_FILTER;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    enterFullScreen() {\r\n        // switch to full screen\r\n        this._canvas.requestFullscreen().then(function () {\r\n            try {\r\n                // lock portrait orientation when going full screen\r\n                // @ts-ignore\r\n                screen.lockOrientationUniversal = screen.lockOrientation ||\r\n                    // @ts-ignore\r\n                    screen.mozLockOrientation ||\r\n                    // @ts-ignore\r\n                    screen.msLockOrientation;\r\n                // @ts-ignore\r\n                screen.lockOrientationUniversal('portrait-primary');\r\n            } catch (e) {\r\n                // console.log(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    exitFullScreen() {\r\n        document.exitFullscreen();\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLButtonElement}\r\n     */\r\n    createMotionRequestBtn() {\r\n        let btn = document.createElement('button');\r\n        btn.innerHTML = 'Allow Motion Control';\r\n        btn.setAttribute('id', MOTION_REQUEST_BUTTON_ID);\r\n        btn.type = 'button';\r\n        this._ctrlPanel.appendChild(btn);\r\n        return btn;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    removeMotionRequestBtn() {\r\n        let btn = document.getElementById(MOTION_REQUEST_BUTTON_ID);\r\n        btn?.parentNode?.removeChild(btn);\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} shouldGlow\r\n     * @returns {void}\r\n     */\r\n    setGlow(shouldGlow) {\r\n        if (shouldGlow && !this._isGlowing) {\r\n            // n.b., since canvas border doesn't show in fullscreen mode, we tint the background too\r\n            this._color = TELEPORT_BACKGROUND_COLOR;\r\n            this._borderColor = TELEPORT_BORDER_COLOR;\r\n            this._isGlowing = true;\r\n            // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n\r\n        if (!shouldGlow && this._isGlowing) {\r\n            this._color = DEFAULT_BACKGROUND_COLOR;\r\n            this._borderColor = DEFAULT_BORDER_COLOR;\r\n            this._isGlowing = false;\r\n            // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    needsPermission() {\r\n        return document.getElementById(MOTION_REQUEST_BUTTON_ID) !== null;\r\n    }\r\n\r\n    /**\r\n     * @param {{ (this: HTMLCanvasElement, ev: TouchEvent): void; }} handleTouchStart\r\n     * @param {{ (this: HTMLCanvasElement, ev: TouchEvent): void; }} handleTouchEnd\r\n     * @returns {void}\r\n     */\r\n    addTouchHandlers(handleTouchStart, handleTouchEnd) {\r\n        this._handleTouchStart = handleTouchStart;\r\n        this._handleTouchEnd = handleTouchEnd;\r\n\r\n        this._canvas.addEventListener('touchstart', handleTouchStart);\r\n        this._canvas.addEventListener('touchend', handleTouchEnd);\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    removeTouchHandlers() {\r\n        if (this._handleTouchStart) this._canvas.removeEventListener('touchstart', this._handleTouchStart);\r\n        if (this._handleTouchEnd) this._canvas.removeEventListener('touchend', this._handleTouchEnd);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    _calculateBoardSize() {\r\n        // take the min(width, height), find closest number divisible by desired # of total steps across the canvas,\r\n        // and use this as the width + height of the square canvas\r\n        let rawSize = Math.min(window.innerWidth, window.innerHeight) - CTRL_PANEL_HEIGHT;\r\n        let quotient = rawSize / NUM_STEPS_ACROSS_CANVAS;\r\n\r\n        // subtracting NUM_STEPS_ACROSS_CANVAS below to allow some whitespace around the game canvas\r\n        return quotient * NUM_STEPS_ACROSS_CANVAS - NUM_STEPS_ACROSS_CANVAS;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _sizeCanvas() {\r\n        this._canvas.style.width = this._boardSize + 'px';\r\n        this._canvas.style.height = this._boardSize + 'px';\r\n        this._canvas.width = this._boardSize * this._ratio;\r\n        this._canvas.height = this._canvas.width;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _sizeControlPanel() {\r\n        this._ctrlPanel.style.width = this._boardSize + 'px';\r\n        this._ctrlPanel.style.height = CTRL_PANEL_HEIGHT + 'px';\r\n    }\r\n}\r\n","const FOOD_COLOR = 'red';\r\nconst FOOD_BORDER_COLOR = 'darkred';\r\nconst TELEPORT_COLOR = 'blue';\r\nconst TELEPORT_BORDER_COLOR = 'darkblue';\r\nconst PHASE_COLOR = 'orchid';\r\nconst PHASE_BORDER_COLOR = 'violet';\r\n\r\nconst TELEPORT_SCORE_THRESHOLD = 50;\r\nconst TELEPORT_PROBABILITY = 0.1;\r\nconst PHASE_SCORE_THRESHOLD = 150;\r\nconst PHASE_PROBABILITY = 0.1;\r\nconst UNSTABLE_FOOD_PROBABILITY = 0.01;\r\n\r\nexport class Item {\r\n    /**\r\n     * @param {import('./board').Board} board\r\n     * @param {import('./snake').Snake} snake\r\n     */\r\n    constructor(board, snake) {\r\n        this._x = Number.MIN_SAFE_INTEGER, this._y = Number.MIN_SAFE_INTEGER;\r\n        this._generate(board, snake);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get type() { return 'UNKNOWN_ITEM' }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get fillColor() { return '' }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() { return '' }\r\n\r\n    /**\r\n     * @param {import('./board').Board} board\r\n     * @param {import('./snake').Snake} snake\r\n     * @returns {void}\r\n     */\r\n    _generate(board, snake) {\r\n        this._x = this._randomBlock(0, board.width - board.blockSize, board.blockSize);\r\n        this._y = this._randomBlock(0, board.height - board.blockSize, board.blockSize);\r\n\r\n        snake.body.forEach((/** @type {{ x: number; y: number; }} @returns {void} */ snakePart) => {\r\n            const itemIsOnSnake = snakePart.x == this._x && snakePart.y == this._y\r\n            if (itemIsOnSnake) this._generate(board, snake);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @param {number} blockSize\r\n     * @returns {number}\r\n     */\r\n    _randomBlock(min, max, blockSize) {\r\n        return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\r\n    }\r\n}\r\n\r\nexport class Food extends Item {\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get type() { return 'FOOD' }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get fillColor() { return FOOD_COLOR }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() { return FOOD_BORDER_COLOR }\r\n}\r\n\r\nexport class Teleport extends Item {\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get type() { return 'TELEPORT' }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get fillColor() { return TELEPORT_COLOR }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() { return TELEPORT_BORDER_COLOR }\r\n}\r\n\r\nexport class Phase extends Item {\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get type() { return 'PHASE' }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get fillColor() { return PHASE_COLOR }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() { return PHASE_BORDER_COLOR }\r\n}\r\n\r\nconst ITEM_TYPES = {\r\n    none: null,\r\n    food: Food,\r\n    teleport: Teleport,\r\n    phase: Phase\r\n};\r\n\r\n/**\r\n * @param {number} score\r\n * @param {{ [x: any]: boolean; }} powerUps\r\n * @param {boolean} alwaysReturnItem\r\n * @param {boolean} lessPowerUps\r\n * @returns {null | (new (board: import('./board').Board, item: import('./snake').Snake) => Item)}\r\n */\r\nexport function randomizeItem(score, powerUps, alwaysReturnItem, lessPowerUps) {\r\n    // at SCORE_THRESHOLDs, enable powerups\r\n    // an item always drops AT its threshold; afterwards drops get random\r\n\r\n    let noItemProb = 0, foodProb = 0, teleportProb = 0, phaseProb = 0;\r\n    if (score == TELEPORT_SCORE_THRESHOLD) {\r\n        if (alwaysReturnItem) {\r\n            teleportProb = 1;\r\n        }\r\n    }\r\n    else if (score == PHASE_SCORE_THRESHOLD) {\r\n        if (alwaysReturnItem) {\r\n            phaseProb = 1;\r\n        }\r\n    } else if (score > TELEPORT_SCORE_THRESHOLD && !powerUps[Teleport]) {\r\n        if (lessPowerUps) {\r\n            teleportProb = TELEPORT_PROBABILITY / 10;\r\n        } else {\r\n            teleportProb = TELEPORT_PROBABILITY;\r\n        }\r\n    }\r\n\r\n    if (score > PHASE_SCORE_THRESHOLD && !powerUps[Phase]) {\r\n        if (lessPowerUps) {\r\n            phaseProb = PHASE_PROBABILITY / 10;\r\n        } else {\r\n            phaseProb = PHASE_PROBABILITY;\r\n        }\r\n    }\r\n\r\n    if (alwaysReturnItem) {\r\n        foodProb = 1 - teleportProb - phaseProb;\r\n    } else {\r\n        foodProb = UNSTABLE_FOOD_PROBABILITY;\r\n        noItemProb = 1 - teleportProb - phaseProb - foodProb;\r\n    }\r\n\r\n    let itemChances = {\r\n        none: noItemProb,\r\n        food: foodProb,\r\n        teleport: teleportProb,\r\n        phase: phaseProb,\r\n    }\r\n\r\n    // console.log(itemChances);\r\n\r\n    let itemClass = ITEM_TYPES[pickItem(itemChances, Math.random())];\r\n\r\n    return itemClass;\r\n}\r\n\r\n/**\r\n * @param {{ [x: string]: any; }} chances\r\n * @param {number} p\r\n * @returns {string | undefined}\r\n */\r\nfunction pickItem(chances, p) {\r\n    // adapted from: https://gist.github.com/alesmenzel/6164543b3d018df7bcaf6c5f9e6a841e\r\n    const items = Object.keys(chances);\r\n\r\n    return items.find((_, i) => {\r\n        const sum = items.slice(0, i + 1).reduce((acc, el) => {\r\n            return acc + chances[el];\r\n        }, 0);\r\n\r\n        if (p < sum) return true;\r\n\r\n        return false;\r\n    });\r\n}\r\n","import { Phase, Teleport } from './item';\r\n\r\nconst DEFAULT_BORDER_COLOR = 'darkgreen';\r\nconst DEFAULT_COLOR = 'lightgreen';\r\nconst PHASE_BORDER_COLOR = 'violet';\r\n\r\nexport const LEFT_KEY = 'ArrowLeft';\r\nexport const RIGHT_KEY = 'ArrowRight';\r\nexport const UP_KEY = 'ArrowUp';\r\nexport const DOWN_KEY = 'ArrowDown';\r\n\r\nexport class Snake {\r\n    /**\r\n     * @param {number} boardWidth\r\n     * @param {number} boardHeight\r\n     * @param {number} blockSize\r\n     */\r\n    constructor(boardWidth, boardHeight, blockSize) {\r\n        this._body = [\r\n            { x: boardWidth / 2, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 2, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 3, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 4, y: boardHeight / 2 },\r\n        ];\r\n\r\n        this._blockSize = blockSize;\r\n\r\n        // set initial velocity\r\n        this._dx = this._dxAtPause = blockSize;\r\n        this._dy = this._dyAtPause = 0;\r\n\r\n        this._color = DEFAULT_COLOR;\r\n        this._borderColor = DEFAULT_BORDER_COLOR;\r\n        this._isGlowing = false;\r\n\r\n        this.isChangingDirection = false;\r\n        this.powerUps = {[Teleport]: false, [Phase]: false};\r\n    }\r\n\r\n    /**\r\n     * @returns {{ x: number; y: number; }[]}\r\n     */\r\n    get body() {\r\n        return this._body;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get isGlowing() {\r\n        return this._isGlowing;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    advanceHead() {\r\n        const head = { x: this._body[0].x + this._dx, y: this._body[0].y + this._dy };\r\n        this._body.unshift(head);\r\n\r\n        // TODO: add to control panel\r\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    advanceTail() {\r\n        this._body.pop();\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    pause() {\r\n        // save velocity at pause\r\n        this._dxAtPause = this._dx;\r\n        this._dyAtPause = this._dy;\r\n        // set velocity to 0\r\n        this._dx = this._dy = 0;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    unpause() {\r\n        // set velocity to state before pause\r\n        this._dx = this._dxAtPause;\r\n        this._dy = this._dyAtPause;\r\n    }\r\n\r\n    /**\r\n     * @param {import('./item').Item} item\r\n     * @returns {boolean}\r\n     */\r\n    didEat(item) {\r\n        return this._round(this._body[0].x, 0) === this._round(item.x, 0) &&\r\n            this._round(this._body[0].y, 0) === this._round(item.y, 0);\r\n    }\r\n\r\n    /**\r\n     * @param {import('./item').Item} item\r\n     * @returns void\r\n     */\r\n    equip(item) {\r\n        if (item instanceof Teleport) this.powerUps[Teleport] = true;\r\n        if (item instanceof Phase) {\r\n            this.powerUps[Phase] = true;\r\n            this.setGlow(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} shouldGlow\r\n     * @returns {void}\r\n     */\r\n    setGlow(shouldGlow) {\r\n        if (shouldGlow && !this._isGlowing) {\r\n            this._borderColor = PHASE_BORDER_COLOR;\r\n            this._isGlowing = true;\r\n            // console.log(`[snake] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n\r\n        if (!shouldGlow && this._isGlowing) {\r\n            this._borderColor = DEFAULT_BORDER_COLOR;\r\n            this._isGlowing = false;\r\n            // console.log(`[snake] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {number} boardWidth\r\n     * @param {number} boardHeight\r\n     * @param {number} blockSize\r\n     * @returns {boolean}\r\n     */\r\n    didCollide(boardWidth, boardHeight, blockSize) {\r\n        // test whether the snake collided with itself\r\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\r\n        for (let i = 4; i < this._body.length; i++) {\r\n            const didCollide = this._body[i].x === this._body[0].x && this._body[i].y === this._body[0].y;\r\n            if (didCollide) {\r\n                if (this.powerUps[Phase]) {\r\n                    // if phase powerup is available, decrement and continue game\r\n                    this.powerUps[Phase] = false;\r\n                    this.setGlow(false);\r\n\r\n                    // console.log('PHASE!');\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const hitLeftWall = this._body[0].x < 0;\r\n        const hitRightWall = this._body[0].x > boardWidth - blockSize;\r\n        const hitTopWall = this._body[0].y < 0;\r\n        const hitBottomWall = this._body[0].y > boardHeight - blockSize;\r\n\r\n        const hitWall = hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\r\n\r\n        if (!hitWall) { return false; }\r\n\r\n        // if teleport power is available, decrement, teleport, and continue game\r\n        if (this.powerUps[Teleport]) {\r\n            this.powerUps[Teleport] = false;\r\n\r\n            if (hitLeftWall) {\r\n                this._body[0].x = boardWidth;\r\n            } else if (hitRightWall) {\r\n                this._body[0].x = -blockSize;\r\n            } else if (hitTopWall) {\r\n                this._body[0].y = boardHeight;\r\n            } else if (hitBottomWall) {\r\n                this._body[0].y = -blockSize;\r\n            }\r\n\r\n            // console.log('TELEPORT!');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param {string} keyPressed\r\n     * @returns {void}\r\n     */\r\n    changeDirectionByKey(keyPressed) {\r\n        if (this.isChangingDirection) { return; }\r\n        this.isChangingDirection = true;\r\n\r\n        const goingUp = this._dy === -this._blockSize;\r\n        const goingDown = this._dy === this._blockSize;\r\n        const goingRight = this._dx === this._blockSize;\r\n        const goingLeft = this._dx === -this._blockSize;\r\n\r\n        if (keyPressed === LEFT_KEY && !goingRight) { this._dx = -this._blockSize; this._dy = 0; }\r\n        if (keyPressed === UP_KEY && !goingDown) { this._dx = 0; this._dy = -this._blockSize; }\r\n        if (keyPressed === RIGHT_KEY && !goingLeft) { this._dx = this._blockSize; this._dy = 0; }\r\n        if (keyPressed === DOWN_KEY && !goingUp) { this._dx = 0; this._dy = this._blockSize; }\r\n    }\r\n\r\n    /**\r\n     * @param {number} beta\r\n     * @param {number} gamma\r\n     * @param {number} lastBeta\r\n     * @param {number} lastGamma\r\n     * @param {number} sensitivity\r\n     * @returns {{ newBeta: number; newGamma: number; }}\r\n     */\r\n    changeDirectionByMvmt(beta, gamma, lastBeta, lastGamma, sensitivity) {\r\n        let newBeta = lastBeta;\r\n        let newGamma = lastGamma;\r\n\r\n        if (this.isChangingDirection) {\r\n            return {\r\n                newBeta: newBeta,\r\n                newGamma: newGamma\r\n            };\r\n        }\r\n        this.isChangingDirection = true;\r\n\r\n        const betaDelta = lastBeta - beta;\r\n        const gammaDelta = lastGamma - gamma;\r\n\r\n        const goingUp = this._dy === -this._blockSize;\r\n        const goingDown = this._dy === this._blockSize;\r\n        const goingRight = this._dx === this._blockSize;\r\n        const goingLeft = this._dx === -this._blockSize;\r\n\r\n        let dir;\r\n        if (betaDelta < -sensitivity) {\r\n            if (!goingUp) { dir = 'DOWN'; this._dx = 0; this._dy = this._blockSize; newGamma = gamma; }\r\n            newBeta = beta;\r\n        } else if (betaDelta > sensitivity) {\r\n            if (!goingDown) { dir = 'UP'; this._dx = 0; this._dy = -this._blockSize; newGamma = gamma; }\r\n            newBeta = beta;\r\n        } else if (gammaDelta < -sensitivity) {\r\n            if (!goingLeft) { dir = 'RIGHT'; this._dx = this._blockSize; this._dy = 0; newBeta = beta; }\r\n            newGamma = gamma;\r\n        } else if (gammaDelta > sensitivity) {\r\n            if (!goingRight) { dir = 'LEFT'; this._dx = -this._blockSize; this._dy = 0; newBeta = beta; }\r\n            newGamma = gamma;\r\n        }\r\n\r\n        // if (dir) {\r\n        //     console.log(`going${dir}`);\r\n        // }\r\n\r\n        return {\r\n            newBeta: newBeta,\r\n            newGamma: newGamma\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {number} precision\r\n     * @returns {number}\r\n     */\r\n    _round(value, precision = 1) {\r\n        var multiplier = Math.pow(10, precision || 0);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n}\r\n","import { drawGame, drawGameEnd, drawItem, drawScore, drawSnake } from './canvas.js';\r\nimport { Board } from './board.js';\r\nimport { Food, Item, Phase, randomizeItem, Teleport } from './item.js';\r\nimport { Snake, LEFT_KEY, RIGHT_KEY, UP_KEY, DOWN_KEY } from './snake.js';\r\n\r\nconst CANVAS_ID = 'gameCanvas';\r\nconst CONTROL_PANEL_ID = 'controlPanel';\r\n\r\nconst GAME_SPEED__ARROW = 100;  // milliseconds\r\nconst GAME_SPEED__MOTION = 125; // milliseconds, slow down game since harder with motion controls\r\nconst SWIPE_SENSITIVITY = 10;  // delta of pixels needed to consider touch mvmt a 'swipe'\r\nconst MOTION_SENSITIVITY = 15;  // degree of motion needed to consider a device mvmt as intentional\r\n\r\nconst SCORE_INCREMENT = 10;\r\nconst FOOD_STABILITY_SCORE_THRESHOLD = 100;\r\n\r\nconst SPACE_KEY = 'Space';\r\nconst KEY_CONTROLS = new Set([LEFT_KEY, RIGHT_KEY, UP_KEY, DOWN_KEY, SPACE_KEY]);\r\n\r\nexport class Game {\r\n    /**\r\n     * @param {Board} board\r\n     * @param {Snake} snake\r\n     * @param {Item} item\r\n     * @param {number} speed\r\n     */\r\n    constructor(board, snake, item, speed) {\r\n        this._board = board;\r\n        this._snake = snake;\r\n        this._item = item;\r\n\r\n        this._score = 0;\r\n\r\n        this._paused = false;\r\n        this._ended = false;\r\n\r\n        this._speed = speed;\r\n\r\n        this._motionAvailable = null;\r\n        this._lastBeta = 0;\r\n        this._lastGamma = 0;\r\n\r\n        this._setupControls();\r\n    }\r\n\r\n    /**\r\n     * @returns {Board}\r\n     */\r\n    get board() {\r\n        return this._board;\r\n    }\r\n\r\n    /**\r\n     * @returns {Snake}\r\n     */\r\n    get snake() {\r\n        return this._snake;\r\n    }\r\n\r\n    /**\r\n     * @returns {Item}\r\n     */\r\n    get item() {\r\n        return this._item;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get speed() {\r\n        return this._speed;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get paused() {\r\n        return this._paused;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    run() {\r\n        if (this._didEnd()) { this._end(); return; }\r\n\r\n        let timeout = setTimeout(() => {\r\n            this._snake.isChangingDirection = false;\r\n\r\n            drawGame(this);\r\n            drawScore(this._score, this._board);\r\n            drawItem(this._item, this._board);\r\n            if (!this._paused) {\r\n                //console.log(`paused: ${this._paused}. advancing...`);\r\n                this._advanceSnake();\r\n            }\r\n            drawSnake(this._snake, this._board);\r\n\r\n            // run game loop again\r\n            this.run();\r\n        }, this._speed);\r\n\r\n        if (!this._timeout) this._timeout = timeout;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _advanceSnake() {\r\n        this._snake.advanceHead();\r\n\r\n        if (this._snake.didEat(this._item)) {\r\n            this._score += SCORE_INCREMENT;\r\n\r\n            this._snake.equip(this._item);\r\n\r\n            this._board.setGlow(this._snake.powerUps[Teleport]);\r\n\r\n            let itemClass = randomizeItem(this._score, this._snake.powerUps, true, false);\r\n\r\n            if (itemClass !== null) {\r\n                this._item = new itemClass(this._board, this._snake);\r\n                // console.log(`new ${this._item.fillColor.toUpperCase()} item`);\r\n            }\r\n        } else {\r\n            const foodIsUnstable = this._score >= FOOD_STABILITY_SCORE_THRESHOLD;\r\n            // randomly regenerate item even if it wasn't eaten\r\n            if (foodIsUnstable || this._item instanceof Teleport || this._item instanceof Phase) {\r\n                let itemClass = randomizeItem(this._score, this._snake.powerUps, false, true);\r\n                if (itemClass !== null) {\r\n                    this._item = new itemClass(this._board, this._snake);\r\n                    // console.log(`new ${this._item.fillColor.toUpperCase()} item`);\r\n                }\r\n            }\r\n\r\n            this._snake.advanceTail();\r\n        }\r\n\r\n        // TODO: add to control panel\r\n        // console.log(`${this._item.type}: ${this._item.x}, ${this._item.y}`);\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    _didEnd() {\r\n        const didCollide = this._snake.didCollide(this._board.width, this._board.height, this._board.blockSize);\r\n        this._board.setGlow(this._snake.powerUps[Teleport]);\r\n        return didCollide;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _end() {\r\n        this._ended = true;\r\n        this._board.setEndGameFilter();\r\n\r\n        drawGame(this);\r\n        drawItem(this._item, this._board);\r\n        drawSnake(this._snake, this._board);\r\n\r\n        drawGameEnd(this._board);\r\n\r\n        // bind `this` to game in event handler\r\n        this._restart = this._restart.bind(this);\r\n\r\n        // allow for game restart\r\n        if (!this._motionAvailable) {\r\n            document.removeEventListener('keydown', this._handleKeyInput);\r\n            document.addEventListener('keydown', this._restart);\r\n        } else {\r\n            // alwways allow restart with space bar\r\n            document.addEventListener('keydown', this._restart);\r\n        }\r\n        document.removeEventListener('click', this._togglePause);\r\n        document.addEventListener('click', this._restart);\r\n    }\r\n\r\n    /**\r\n     * @param {KeyboardEvent | MouseEvent | TouchEvent} event\r\n     * @returns {void}\r\n     */\r\n    _restart(event) {\r\n        if ((event instanceof KeyboardEvent && event.code === SPACE_KEY) || event.type === 'click' || event.type === 'touchend') {\r\n            document.removeEventListener('keydown', this._restart);\r\n            document.removeEventListener('click', this._restart);\r\n            this._board.removeTouchHandlers();\r\n\r\n            restartGame();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _togglePause() {\r\n        this._paused = !this._paused;\r\n\r\n        //console.log(`paused: ${this._paused}`);\r\n\r\n        if (this._paused) {\r\n            this._snake.pause();\r\n            this._board.setPauseGameFilter();\r\n        } else {\r\n            this._snake.unpause();\r\n            this._board.resetFilter();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _setupControls() {\r\n        this._lastBeta = this._lastGamma = 0;\r\n\r\n        // bind `this` to game in event handlers\r\n        this._handleDeviceMvmt = this._handleDeviceMvmt.bind(this);\r\n        this._handleKeyInput = this._handleKeyInput.bind(this);\r\n        this._handleVisibilityChange = this._handleVisibilityChange.bind(this);\r\n        this._requestDeviceOrientation = this._requestDeviceOrientation.bind(this);\r\n        this._togglePause = this._togglePause.bind(this);\r\n\r\n        // bind `this` to board in event handler\r\n        this._board.enterFullScreen = this._board.enterFullScreen.bind(this._board);\r\n\r\n        // call change direction on key press\r\n        document.addEventListener('keydown', this._handleKeyInput);\r\n\r\n        // pause game on click or if game becomes hidden\r\n        document.addEventListener('click', this._togglePause);\r\n        document.addEventListener('visibilitychange', this._handleVisibilityChange, false);\r\n\r\n        // enter full screen on double click (for devices that support this event)\r\n        document.addEventListener('dblclick', this._board.enterFullScreen);\r\n\r\n        // enter full screen on swipe (for touch/mobile devices)\r\n        this._handleSwipeToFullScreen();\r\n\r\n        if ( typeof(DeviceOrientationEvent) !== 'undefined' ) {\r\n            // if browser (e.g., iOS safari) requires permission for deviceorientation, request it\r\n            // @ts-ignore\r\n            if ( typeof(DeviceOrientationEvent.requestPermission) === 'function' ) {\r\n                let btn = this._board.createMotionRequestBtn();\r\n                btn.addEventListener('click', this._requestDeviceOrientation);\r\n\r\n                // give user time to grant permission\r\n                this._togglePause();\r\n            }\r\n            else {\r\n                window.addEventListener('deviceorientation', this._handleDeviceMvmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {KeyboardEvent} event\r\n     * @returns {void}\r\n     */\r\n    _handleKeyInput(event) {\r\n        const keyPressed = event.code;\r\n\r\n        if (KEY_CONTROLS.has(keyPressed)) {\r\n            if (this._motionAvailable == null && !this._ended) console.log('key controls activated');\r\n\r\n            // once user starts using key controls, disable motion control, as having\r\n            // both keyboard and motion event listeners makes the game less responsive\r\n            this._board.removeMotionRequestBtn();\r\n            window.removeEventListener('deviceorientation', this._handleDeviceMvmt);\r\n            this._motionAvailable = false;\r\n        }\r\n\r\n        if (keyPressed === SPACE_KEY) {\r\n            this._togglePause();\r\n        }\r\n\r\n        this._snake.changeDirectionByKey(keyPressed);\r\n    }\r\n\r\n    /**\r\n     * @param {DeviceOrientationEvent} event\r\n     * @returns {void}\r\n     */\r\n    _handleDeviceMvmt(event) {\r\n        // forward (positive) to backward (negative) motion of the device\r\n        const beta = event.beta || 0;\r\n        // right (positive) to left (negative) motion of the device\r\n        const gamma = event.gamma || 0;\r\n\r\n        let betaDelta = this._lastBeta - beta;\r\n        let gammaDelta = this._lastGamma - gamma;\r\n\r\n        // console.log('deviceorientation', {\r\n        //     beta: event.beta, last_beta: this._lastBeta, beta_delta: betaDelta,\r\n        //     gamma: event.gamma, last_gamma: this._lastGamma, gamma_delta: gammaDelta,\r\n        // });\r\n\r\n        if (this._motionAvailable == null && (betaDelta > Math.abs(MOTION_SENSITIVITY) || gammaDelta > Math.abs(MOTION_SENSITIVITY))) {\r\n            // once user starts using motion control, disable keyboard controls, as having\r\n            // both keyboard and motion event listeners makes the game less responsive\r\n            document.removeEventListener('keydown', this._handleKeyInput);\r\n\r\n            this._speed = GAME_SPEED__MOTION;\r\n            this._motionAvailable = true;\r\n            console.log('motion controls activated');\r\n        }\r\n\r\n        let newMvmt = this._snake.changeDirectionByMvmt(beta, gamma, this._lastBeta, this._lastGamma, MOTION_SENSITIVITY);\r\n\r\n        this._lastBeta = newMvmt.newBeta;\r\n        this._lastGamma = newMvmt.newGamma;\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _handleVisibilityChange() {\r\n        if (document.hidden && !this._paused) {\r\n            this._togglePause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _handleSwipeToFullScreen() {\r\n        let downY = 0;\r\n        let upY = 0;\r\n\r\n        let thisGame = this;\r\n        /**\r\n         * @param {TouchEvent} ev\r\n         * @returns {void}\r\n         */\r\n        function handleGesture(ev) {\r\n            if (upY < downY && downY - upY > SWIPE_SENSITIVITY) {\r\n                // console.log(`swiped UP ${downY-upY}px`);\r\n                thisGame._board.enterFullScreen();\r\n            } else if (upY > downY && upY - downY > SWIPE_SENSITIVITY) {\r\n                // console.log(`swiped DOWN ${upY-downY}px`);\r\n                thisGame._board.exitFullScreen();\r\n            } else if (thisGame._ended) {\r\n                thisGame._restart(ev);\r\n            } else {\r\n                // console.log(`togglePause from handleGesture`);\r\n                thisGame._togglePause();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @param {TouchEvent} ev\r\n         * @returns {void}\r\n         */\r\n        function handleTouchStart(ev) {\r\n            ev.preventDefault();\r\n\r\n            const firstTouch = ev.changedTouches[0];\r\n            // console.log({\r\n            //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n            // });\r\n            // downX = firstTouch.screenX;\r\n\r\n            downY = firstTouch.screenY;\r\n        }\r\n\r\n        /**\r\n         * @param {TouchEvent} ev\r\n         * @returns {void}\r\n         */\r\n        function handleTouchEnd(ev) {\r\n            ev.preventDefault();\r\n\r\n            const firstTouch = ev.changedTouches[0];\r\n            // console.log({\r\n            //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n            // });\r\n            // upX = firstTouch.screenX;\r\n\r\n            upY = firstTouch.screenY;\r\n\r\n            handleGesture(ev);\r\n        }\r\n\r\n        this._board.addTouchHandlers(handleTouchStart, handleTouchEnd);\r\n    }\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _requestDeviceOrientation() {\r\n        // @ts-ignore\r\n        DeviceOrientationEvent.requestPermission()\r\n            .then( (/** @type {string} @returns {void} */ response) => {\r\n            if ( response === 'granted' ) {\r\n                this._enableMotionControl();\r\n            }\r\n        }).catch( console.error );\r\n    }\r\n\r\n    /**\r\n     * disable keyboard, enable motion, remove button,\r\n     * and un-pause game\r\n     * @return {void}\r\n     */\r\n    _enableMotionControl() {\r\n        document.removeEventListener('keydown', this._handleKeyInput);\r\n        window.addEventListener('deviceorientation', this._handleDeviceMvmt);\r\n        this._board.removeMotionRequestBtn();\r\n        this._togglePause();\r\n    }\r\n}\r\n\r\n// <!-- GAME EXECUTION HELPERS BELOW -->\r\n\r\n/**\r\n * @returns {Game}\r\n */\r\nexport function initGame() {\r\n    let canvas, ctrl_panel;\r\n    if (!(canvas = document.getElementById(CANVAS_ID))) {\r\n        throw new Error('canvas not found');\r\n    }\r\n    if (!(canvas instanceof HTMLCanvasElement)) {\r\n        throw new Error(`#${CANVAS_ID} element is not an HTML canvas`);\r\n    }\r\n    if (!(ctrl_panel = document.getElementById(CONTROL_PANEL_ID))) {\r\n        throw new Error('ctrl panel not found');\r\n    }\r\n\r\n    let board = new Board(canvas, ctrl_panel);\r\n    let snake = new Snake(board.height, board.height, board.blockSize);\r\n    let food = new Food(board, snake);\r\n\r\n    let game = new Game(board, snake, food, GAME_SPEED__ARROW);\r\n\r\n    return game;\r\n}\r\n\r\n/**\r\n * @returns {void}\r\n */\r\nfunction restartGame() {\r\n    let game = initGame();\r\n    game.run();\r\n}\r\n","import { initGame } from './game.js'\r\n\r\nlet game = initGame();\r\ngame.run();\r\n"],"names":["withStraddle","ctx","cb","offset","translate","drawGame","game","board","filter","activeFilter","fillStyle","color","isGlowing","canvas","style","border","outline","borderColor","boxShadow","transition","fillRect","width","height","paused","useExclamation","needsPermission","font","ratio","fillText","String","fromCharCode","drawSnake","snake","body","forEach","snakePart","strokeStyle","lineCap","shadowBlur","shadowColor","x","y","blockSize","strokeRect","drawSnakePart","drawItem","item","fillColor","Board","constructor","ctrlPanel","this","_canvas","_ctrlPanel","getContext","Error","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","_height","_blockSize","_activeFilter","_color","_borderColor","_isGlowing","resetFilter","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestBtn","btn","createElement","innerHTML","setAttribute","type","appendChild","removeMotionRequestBtn","getElementById","parentNode","removeChild","setGlow","shouldGlow","addTouchHandlers","handleTouchStart","handleTouchEnd","_handleTouchStart","_handleTouchEnd","addEventListener","removeTouchHandlers","removeEventListener","Math","min","innerWidth","innerHeight","CTRL_PANEL_HEIGHT","Item","_x","Number","MIN_SAFE_INTEGER","_y","_generate","_randomBlock","max","round","random","Food","Teleport","Phase","ITEM_TYPES","none","food","teleport","phase","randomizeItem","score","powerUps","alwaysReturnItem","lessPowerUps","noItemProb","foodProb","teleportProb","phaseProb","TELEPORT_PROBABILITY","PHASE_PROBABILITY","chances","p","items","Object","keys","find","_","i","sum","slice","reduce","acc","el","pickItem","Snake","boardWidth","boardHeight","_body","_dx","_dxAtPause","_dy","_dyAtPause","isChangingDirection","advanceHead","head","unshift","advanceTail","pop","pause","unpause","didEat","_round","equip","didCollide","length","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirectionByKey","keyPressed","goingUp","goingDown","goingRight","goingLeft","changeDirectionByMvmt","beta","gamma","lastBeta","lastGamma","sensitivity","newBeta","newGamma","betaDelta","gammaDelta","value","precision","multiplier","pow","KEY_CONTROLS","Set","Game","speed","_board","_snake","_item","_score","_paused","_ended","_speed","_motionAvailable","_lastBeta","_lastGamma","_setupControls","run","_didEnd","_end","timeout","setTimeout","textAlign","toString","drawScore","_advanceSnake","_timeout","itemClass","drawGameEnd","_restart","bind","_handleKeyInput","_togglePause","event","KeyboardEvent","code","initGame","_handleDeviceMvmt","_handleVisibilityChange","_requestDeviceOrientation","_handleSwipeToFullScreen","DeviceOrientationEvent","has","console","log","abs","newMvmt","hidden","downY","upY","thisGame","ev","preventDefault","firstTouch","changedTouches","screenY","handleGesture","requestPermission","response","_enableMotionControl","catch","error","ctrl_panel","HTMLCanvasElement"],"mappings":"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"}