{"version":3,"file":"snek.min.js","sources":["../src/js/canvas.js","../src/js/board.js","../src/js/item.js","../src/js/snake.js","../src/js/game.js","../src/js/main.js"],"sourcesContent":["const EXCLAMATION_BTN_COLOR = 'darkkhaki';\r\nconst GAME_TEXT_COLOR = 'gray';\r\nconst PAUSE_BTN_COLOR = 'darkgreen';\r\n\r\nconst GAME_TEXT_FONT_FAMILY = '\"Saira\", serif';\r\n\r\nconst GAME_TEXT_FONT_SIZE = 50;\r\n\r\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\r\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\r\n\r\n/**\r\n * a fake contextmanager\r\n * for pixel sharpness https://stackoverflow.com/a/8696641\r\n**/\r\nfunction withStraddle(ctx, cb) {\r\n    const offset = 0.5;\r\n\r\n    try {\r\n        // turn on 'straddle' trick to avoid blurriness\r\n        ctx.translate(offset, offset);\r\n        cb();\r\n    } finally {\r\n        // turn off 'straddle' trick to avoid blurriness\r\n        ctx.translate(-offset, -offset);\r\n    }\r\n}\r\n\r\nexport function drawGame(game) {\r\n    let board = game.board;\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.filter = board.activeFilter;\r\n\r\n        // set border and background colors\r\n        ctx.fillStyle = board.color;\r\n        if (board.isGlowing) {\r\n            // n.b. strokeRect doesn't do a good job of bordering the canvas,\r\n            // so we fall back to CSS styling\r\n\r\n            // https://stackoverflow.com/a/5670984\r\n            board.canvas.style.border = 'none'\r\n            board.canvas.style.outline = `${board.borderColor} dashed thin`;\r\n            board.canvas.style.boxShadow = `0 0 10px ${board.color}`;\r\n            board.canvas.style.transition = 'box-shadow linear 1s';\r\n        } else {\r\n            board.canvas.style.border = `2px solid ${board.borderColor}`;\r\n            board.canvas.style.outline = 'none';\r\n            board.canvas.style.boxShadow = 'none';\r\n            board.canvas.style.transition = 'box-shadow linear 0.5s';\r\n        }\r\n\r\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\r\n\r\n        if (game.paused) {\r\n            let useExclamation = board.needsPermission();\r\n\r\n            // since filters don't work on iOS safari, we need another visual aid\r\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\r\n            // or exclamation triangle icon if we still need permissions\r\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\r\n            ctx.font = (GAME_TEXT_FONT_SIZE * board.ratio) + 'px \"bootstrap-icons\"';\r\n            ctx.fillStyle = useExclamation ? EXCLAMATION_BTN_COLOR : PAUSE_BTN_COLOR;\r\n            ctx.fillText(String.fromCharCode(\r\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\r\n            ), 30 * board.ratio, 50 * board.ratio);\r\n        }\r\n    });\r\n}\r\n\r\nexport function drawSnake(snake, board) {\r\n    snake.body.forEach(snakePart => drawSnakePart(\r\n        snakePart,\r\n        snake.color,\r\n        snake.borderColor,\r\n        snake.isGlowing,\r\n        board\r\n    ));\r\n}\r\n\r\nexport function drawItem(item, board) {\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = item.fillColor;\r\n        ctx.strokeStyle = item.borderColor;\r\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\r\n    });\r\n}\r\n\r\nexport function drawScore(score, board) {\r\n    let ctx = board.ctx;\r\n\r\n    ctx.font = `${GAME_TEXT_FONT_SIZE * board.ratio}px ${GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = GAME_TEXT_COLOR;\r\n    ctx.fillText(score, board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n}\r\n\r\nexport function drawGameEnd(board) {\r\n    let ctx = board.ctx;\r\n\r\n    ctx.font = `${GAME_TEXT_FONT_SIZE * board.ratio}px ${GAME_TEXT_FONT_FAMILY}`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = GAME_TEXT_COLOR;\r\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\r\n}\r\n\r\nfunction drawSnakePart(snakePart, color, borderColor, isGlowing, board) {\r\n    let ctx = board.ctx;\r\n\r\n    withStraddle(ctx, () => {\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = borderColor;\r\n\r\n        if (isGlowing) {\r\n            // https://stackoverflow.com/a/43676108\r\n            ctx.lineCap = 'round';\r\n            ctx.shadowBlur = 18;\r\n            ctx.shadowColor = color;\r\n        }\r\n\r\n        ctx.fillRect(snakePart.x, snakePart.y, board.blockSize, board.blockSize);\r\n        ctx.strokeRect(snakePart.x, snakePart.y, board.blockSize, board.blockSize);\r\n\r\n        if (isGlowing) {\r\n            // reset to defaults\r\n            ctx.lineCap = 'butt';\r\n            ctx.shadowBlur = 0;\r\n        }\r\n    });\r\n}\r\n","const CTRL_PANEL_HEIGHT = 50;  // pixels\r\nconst NUM_STEPS_ACROSS_CANVAS = 30;\r\n\r\nconst DEFAULT_BACKGROUND_COLOR = 'white';\r\nconst DEFAULT_BORDER_COLOR = 'darkgreen';\r\nconst TELEPORT_BORDER_COLOR = 'blue';\r\nconst TELEPORT_BACKGROUND_COLOR = '#e2f1fa';  // a light blue\r\n\r\nconst NO_FILTER = 'none';\r\nconst PAUSE_FILTER = 'contrast(1.4) sepia(1)';\r\nconst ENDGAME_FILTER = 'grayscale(0.8) blur(0.5px)';\r\n\r\nconst MOTION_REQUEST_BUTTON_ID = 'motionRequest';\r\n\r\nexport class Board {\r\n    constructor(canvas, ctrlPanel) {\r\n        this._canvas = canvas;\r\n        this._ctrlPanel = ctrlPanel;\r\n\r\n        // 2d drawing context\r\n        this.ctx = this._canvas.getContext('2d');\r\n\r\n        this._boardSize = this._calculateBoardSize();\r\n\r\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\r\n        this._ratio = window.devicePixelRatio || 1;\r\n\r\n        this._sizeCanvas();\r\n        this._sizeControlPanel();\r\n\r\n        this._width = canvas.width;\r\n        this._height = canvas.height;\r\n        this._blockSize = canvas.width / NUM_STEPS_ACROSS_CANVAS;\r\n\r\n        this._color = DEFAULT_BACKGROUND_COLOR;\r\n        this._borderColor = DEFAULT_BORDER_COLOR;\r\n        this._isGlowing = false;\r\n\r\n        this.resetFilter();\r\n\r\n        // console.log({\r\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\r\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\r\n        //     'canvas.height': canvas.height, block_size: this._blockSize\r\n        // })\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n\r\n    get isGlowing() {\r\n        return this._isGlowing;\r\n    }\r\n\r\n    get activeFilter() {\r\n        return this._activeFilter;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    get blockSize() {\r\n        return this._blockSize;\r\n    }\r\n\r\n    get ratio() {\r\n        return this._ratio;\r\n    }\r\n\r\n    resetFilter() {\r\n        this._activeFilter = NO_FILTER;\r\n    }\r\n\r\n    setEndGameFilter() {\r\n        this._activeFilter = ENDGAME_FILTER;\r\n    }\r\n\r\n    setPauseGameFilter() {\r\n        this._activeFilter = PAUSE_FILTER;\r\n    }\r\n\r\n    enterFullScreen() {\r\n        // switch to full screen\r\n        this._canvas.requestFullscreen().then(function () {\r\n            try {\r\n                // lock portrait orientation when going full screen\r\n                screen.lockOrientationUniversal = screen.lockOrientation ||\r\n                    screen.mozLockOrientation ||\r\n                    screen.msLockOrientation;\r\n                screen.lockOrientationUniversal('portrait-primary');\r\n            } catch (e) {\r\n                // console.log(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    exitFullScreen() {\r\n        document.exitFullscreen();\r\n    }\r\n\r\n    createMotionRequestBtn() {\r\n        let btn = document.createElement('button');\r\n        btn.innerHTML = 'Allow Motion Control';\r\n        btn.setAttribute('id', MOTION_REQUEST_BUTTON_ID);\r\n        btn.type = 'button';\r\n        this._ctrlPanel.appendChild(btn);\r\n        return btn;\r\n    }\r\n\r\n    removeMotionRequestBtn() {\r\n        let btn = document.getElementById(MOTION_REQUEST_BUTTON_ID);\r\n        btn?.parentNode?.removeChild(btn);\r\n    }\r\n\r\n    setGlow(shouldGlow) {\r\n        if (shouldGlow && !this._isGlowing) {\r\n            // n.b., since canvas border doesn't show in fullscreen mode, we tint the background too\r\n            this._color = TELEPORT_BACKGROUND_COLOR;\r\n            this._borderColor = TELEPORT_BORDER_COLOR;\r\n            this._isGlowing = true;\r\n            // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n\r\n        if (!shouldGlow && this._isGlowing) {\r\n            this._color = DEFAULT_BACKGROUND_COLOR;\r\n            this._borderColor = DEFAULT_BORDER_COLOR;\r\n            this._isGlowing = false;\r\n            // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n    }\r\n\r\n    needsPermission() {\r\n        return document.getElementById(MOTION_REQUEST_BUTTON_ID) !== null;\r\n    }\r\n\r\n    addTouchHandlers(handleTouchStart, handleTouchEnd) {\r\n        this._handleTouchStart = handleTouchStart;\r\n        this._handleTouchEnd = handleTouchEnd;\r\n\r\n        this._canvas.addEventListener('touchstart', handleTouchStart);\r\n        this._canvas.addEventListener('touchend', handleTouchEnd);\r\n    }\r\n\r\n    removeTouchHandlers() {\r\n        if (this._handleTouchStart) this._canvas.removeEventListener('touchstart', this._handleTouchStart);\r\n        if (this._handleTouchEnd) this._canvas.removeEventListener('touchend', this._handleTouchEnd);\r\n    }\r\n\r\n    _calculateBoardSize() {\r\n        // take the min(width, height), find closest number divisible by desired # of total steps across the canvas,\r\n        // and use this as the width + height of the square canvas\r\n        let rawSize = Math.min(window.innerWidth, window.innerHeight) - CTRL_PANEL_HEIGHT;\r\n        let quotient = rawSize / NUM_STEPS_ACROSS_CANVAS;\r\n\r\n        // subtracting NUM_STEPS_ACROSS_CANVAS below to allow some whitespace around the game canvas\r\n        return quotient * NUM_STEPS_ACROSS_CANVAS - NUM_STEPS_ACROSS_CANVAS;\r\n    }\r\n\r\n    _sizeCanvas() {\r\n        this._canvas.style.width = this._boardSize + 'px';\r\n        this._canvas.style.height = this._boardSize + 'px';\r\n        this._canvas.width = this._boardSize * this._ratio;\r\n        this._canvas.height = this._canvas.width;\r\n    }\r\n\r\n    _sizeControlPanel() {\r\n        this._ctrlPanel.style.width = this._boardSize + 'px';\r\n        this._ctrlPanel.style.height = CTRL_PANEL_HEIGHT + 'px';\r\n        this._ctrlPanel.width = this._boardSize * this._ratio;\r\n        this._ctrlPanel.height = CTRL_PANEL_HEIGHT * this._ratio;\r\n    }\r\n}\r\n","const FOOD_COLOR = 'red';\r\nconst FOOD_BORDER_COLOR = 'darkred';\r\nconst TELEPORT_COLOR = 'blue';\r\nconst TELEPORT_BORDER_COLOR = 'darkblue';\r\nconst PHASE_COLOR = 'orchid';\r\nconst PHASE_BORDER_COLOR = 'violet';\r\n\r\nconst TELEPORT_SCORE_THRESHOLD = 50;\r\nconst TELEPORT_PROBABILITY = 0.1;\r\nconst PHASE_SCORE_THRESHOLD = 150;\r\nconst PHASE_PROBABILITY = 0.1;\r\nconst UNSTABLE_FOOD_PROBABILITY = 0.01;\r\n\r\nexport class Item {\r\n    constructor(board, snake) {\r\n        this._generate(board, snake);\r\n    }\r\n\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    get type() { return 'UNKNOWN_ITEM' }\r\n\r\n    get fillColor() { return '' }\r\n\r\n    get borderColor() { return '' }\r\n\r\n    _generate(board, snake) {\r\n        this._x = this._randomBlock(0, board.width - board.blockSize, board.blockSize);\r\n        this._y = this._randomBlock(0, board.height - board.blockSize, board.blockSize);\r\n\r\n        snake.body.forEach((snakePart) => {\r\n            const itemIsOnSnake = snakePart.x == this._x && snakePart.y == this._y\r\n            if (itemIsOnSnake) this._generate(board, snake);\r\n        });\r\n    }\r\n\r\n    _randomBlock(min, max, blockSize) {\r\n        return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\r\n    }\r\n}\r\n\r\nexport class Food extends Item {\r\n    get type() { return 'FOOD' }\r\n\r\n    get fillColor() { return FOOD_COLOR }\r\n\r\n    get borderColor() { return FOOD_BORDER_COLOR }\r\n}\r\n\r\nexport class Teleport extends Item {\r\n    get type() { return 'TELEPORT' }\r\n\r\n    get fillColor() { return TELEPORT_COLOR }\r\n\r\n    get borderColor() { return TELEPORT_BORDER_COLOR }\r\n}\r\n\r\nexport class Phase extends Item {\r\n    get type() { return 'PHASE' }\r\n\r\n    get fillColor() { return PHASE_COLOR }\r\n\r\n    get borderColor() { return PHASE_BORDER_COLOR }\r\n}\r\n\r\nconst ITEM_TYPES = {\r\n    none: null,\r\n    food: Food,\r\n    teleport: Teleport,\r\n    phase: Phase\r\n};\r\n\r\nexport function randomizeItem(score, powerUps, alwaysReturnItem, lessPowerUps) {\r\n    // at SCORE_THRESHOLDs, enable powerups\r\n    // an item always drops AT its threshold; afterwards drops get random\r\n\r\n    let noItemProb = 0, foodProb = 0, teleportProb = 0, phaseProb = 0;\r\n    if (score == TELEPORT_SCORE_THRESHOLD) {\r\n        if (alwaysReturnItem) {\r\n            teleportProb = 1;\r\n        }\r\n    }\r\n    else if (score == PHASE_SCORE_THRESHOLD) {\r\n        if (alwaysReturnItem) {\r\n            phaseProb = 1;\r\n        }\r\n    } else if (score > TELEPORT_SCORE_THRESHOLD && !powerUps[Teleport]) {\r\n        if (lessPowerUps) {\r\n            teleportProb = TELEPORT_PROBABILITY / 10;\r\n        } else {\r\n            teleportProb = TELEPORT_PROBABILITY;\r\n        }\r\n    }\r\n\r\n    if (score > PHASE_SCORE_THRESHOLD && !powerUps[Phase]) {\r\n        if (lessPowerUps) {\r\n            phaseProb = PHASE_PROBABILITY / 10;\r\n        } else {\r\n            phaseProb = PHASE_PROBABILITY;\r\n        }\r\n    }\r\n\r\n    if (alwaysReturnItem) {\r\n        foodProb = 1 - teleportProb - phaseProb;\r\n    } else {\r\n        foodProb = UNSTABLE_FOOD_PROBABILITY;\r\n        noItemProb = 1 - teleportProb - phaseProb - foodProb;\r\n    }\r\n\r\n    let itemChances = {\r\n        none: noItemProb,\r\n        food: foodProb,\r\n        teleport: teleportProb,\r\n        phase: phaseProb,\r\n    }\r\n\r\n    // console.log(itemChances);\r\n\r\n    let itemClass = ITEM_TYPES[pickItem(itemChances, Math.random())];\r\n\r\n    return itemClass;\r\n}\r\n\r\nfunction pickItem(chances, p) {\r\n    // adapted from: https://gist.github.com/alesmenzel/6164543b3d018df7bcaf6c5f9e6a841e\r\n    const items = Object.keys(chances);\r\n\r\n    return items.find((_, i) => {\r\n        const sum = items.slice(0, i + 1).reduce((acc, el) => {\r\n            return acc + chances[el];\r\n        }, 0);\r\n\r\n        if (p < sum) return true;\r\n\r\n        return false;\r\n    });\r\n}\r\n","import { Phase, Teleport } from './item';\r\n\r\nconst DEFAULT_BORDER_COLOR = 'darkgreen';\r\nconst DEFAULT_COLOR = 'lightgreen';\r\nconst PHASE_BORDER_COLOR = 'violet';\r\n\r\nexport const LEFT_KEY = 'ArrowLeft';\r\nexport const RIGHT_KEY = 'ArrowRight';\r\nexport const UP_KEY = 'ArrowUp';\r\nexport const DOWN_KEY = 'ArrowDown';\r\n\r\nexport class Snake {\r\n    constructor(boardWidth, boardHeight, blockSize) {\r\n        this._body = [\r\n            { x: boardWidth / 2, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 2, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 3, y: boardHeight / 2 },\r\n            { x: boardWidth / 2 - blockSize * 4, y: boardHeight / 2 },\r\n        ];\r\n\r\n        this._blockSize = blockSize;\r\n\r\n        // set initial velocity\r\n        this._dx = this._dxAtPause = blockSize;\r\n        this._dy = this._dyAtPause = 0;\r\n\r\n        this._color = DEFAULT_COLOR;\r\n        this._borderColor = DEFAULT_BORDER_COLOR;\r\n        this._isGlowing = false;\r\n\r\n        this.isChangingDirection = false;\r\n        this.powerUps = {[Teleport]: false, [Phase]: false};\r\n    }\r\n\r\n    get body() {\r\n        return this._body;\r\n    }\r\n\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n\r\n    get isGlowing() {\r\n        return this._isGlowing;\r\n    }\r\n\r\n    advanceHead() {\r\n        const head = { x: this._body[0].x + this._dx, y: this._body[0].y + this._dy };\r\n        this._body.unshift(head);\r\n\r\n        // TODO: add to control panel\r\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\r\n    }\r\n\r\n    advanceTail() {\r\n        this._body.pop();\r\n    }\r\n\r\n    pause() {\r\n        // save velocity at pause\r\n        this._dxAtPause = this._dx;\r\n        this._dyAtPause = this._dy;\r\n        // set velocity to 0\r\n        this._dx = this._dy = 0;\r\n    }\r\n\r\n    unpause() {\r\n        // set velocity to state before pause\r\n        this._dx = this._dxAtPause;\r\n        this._dy = this._dyAtPause;\r\n    }\r\n\r\n    didEat(item) {\r\n        return this._round(this._body[0].x, 0) === this._round(item.x, 0) &&\r\n            this._round(this._body[0].y, 0) === this._round(item.y, 0);\r\n    }\r\n\r\n    equip(item) {\r\n        if (item instanceof Teleport) this.powerUps[Teleport] = true;\r\n        if (item instanceof Phase) {\r\n            this.powerUps[Phase] = true;\r\n            this.setGlow(true);\r\n        }\r\n    }\r\n\r\n    setGlow(shouldGlow) {\r\n        if (shouldGlow && !this._isGlowing) {\r\n            this._borderColor = PHASE_BORDER_COLOR;\r\n            this._isGlowing = true;\r\n            // console.log(`[snake] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n\r\n        if (!shouldGlow && this._isGlowing) {\r\n            this._borderColor = DEFAULT_BORDER_COLOR;\r\n            this._isGlowing = false;\r\n            // console.log(`[snake] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\r\n        }\r\n    }\r\n\r\n    didCollide(boardWidth, boardHeight, blockSize) {\r\n        // test whether the snake collided with itself\r\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\r\n        for (let i = 4; i < this._body.length; i++) {\r\n            const didCollide = this._body[i].x === this._body[0].x && this._body[i].y === this._body[0].y;\r\n            if (didCollide) {\r\n                if (this.powerUps[Phase]) {\r\n                    // if phase powerup is available, decrement and continue game\r\n                    this.powerUps[Phase] = false;\r\n                    this.setGlow(false);\r\n\r\n                    // console.log('PHASE!');\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const hitLeftWall = this._body[0].x < 0;\r\n        const hitRightWall = this._body[0].x > boardWidth - blockSize;\r\n        const hitTopWall = this._body[0].y < 0;\r\n        const hitBottomWall = this._body[0].y > boardHeight - blockSize;\r\n\r\n        const hitWall = hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\r\n\r\n        if (!hitWall) { return false; }\r\n\r\n        // if teleport power is available, decrement, teleport, and continue game\r\n        if (this.powerUps[Teleport]) {\r\n            this.powerUps[Teleport] = false;\r\n\r\n            if (hitLeftWall) {\r\n                this._body[0].x = boardWidth;\r\n            } else if (hitRightWall) {\r\n                this._body[0].x = -blockSize;\r\n            } else if (hitTopWall) {\r\n                this._body[0].y = boardHeight;\r\n            } else if (hitBottomWall) {\r\n                this._body[0].y = -blockSize;\r\n            }\r\n\r\n            // console.log('TELEPORT!');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    changeDirectionByKey(keyPressed) {\r\n        if (this.isChangingDirection) { return; }\r\n        this.isChangingDirection = true;\r\n\r\n        const goingUp = this._dy === -this._blockSize;\r\n        const goingDown = this._dy === this._blockSize;\r\n        const goingRight = this._dx === this._blockSize;\r\n        const goingLeft = this._dx === -this._blockSize;\r\n\r\n        if (keyPressed === LEFT_KEY && !goingRight) { this._dx = -this._blockSize; this._dy = 0; }\r\n        if (keyPressed === UP_KEY && !goingDown) { this._dx = 0; this._dy = -this._blockSize; }\r\n        if (keyPressed === RIGHT_KEY && !goingLeft) { this._dx = this._blockSize; this._dy = 0; }\r\n        if (keyPressed === DOWN_KEY && !goingUp) { this._dx = 0; this._dy = this._blockSize; }\r\n    }\r\n\r\n    changeDirectionByMvmt(beta, gamma, lastBeta, lastGamma, sensitivity) {\r\n        let newBeta = lastBeta;\r\n        let newGamma = lastGamma;\r\n\r\n        if (this.isChangingDirection) {\r\n            return {\r\n                newBeta: newBeta,\r\n                newGamma: newGamma\r\n            };\r\n        }\r\n        this.isChangingDirection = true;\r\n\r\n        const betaDelta = lastBeta - beta;\r\n        const gammaDelta = lastGamma - gamma;\r\n\r\n        const goingUp = this._dy === -this._blockSize;\r\n        const goingDown = this._dy === this._blockSize;\r\n        const goingRight = this._dx === this._blockSize;\r\n        const goingLeft = this._dx === -this._blockSize;\r\n\r\n        let dir;\r\n        if (betaDelta < -sensitivity) {\r\n            if (!goingUp) { dir = 'DOWN'; this._dx = 0; this._dy = this._blockSize; newGamma = gamma; }\r\n            newBeta = beta;\r\n        } else if (betaDelta > sensitivity) {\r\n            if (!goingDown) { dir = 'UP'; this._dx = 0; this._dy = -this._blockSize; newGamma = gamma; }\r\n            newBeta = beta;\r\n        } else if (gammaDelta < -sensitivity) {\r\n            if (!goingLeft) { dir = 'RIGHT'; this._dx = this._blockSize; this._dy = 0; newBeta = beta; }\r\n            newGamma = gamma;\r\n        } else if (gammaDelta > sensitivity) {\r\n            if (!goingRight) { dir = 'LEFT'; this._dx = -this._blockSize; this._dy = 0; newBeta = beta; }\r\n            newGamma = gamma;\r\n        }\r\n\r\n        // if (dir) {\r\n        //     console.log(`going${dir}`);\r\n        // }\r\n\r\n        return {\r\n            newBeta: newBeta,\r\n            newGamma: newGamma\r\n        };\r\n    }\r\n\r\n    _round(value, precision = 1) {\r\n        var multiplier = Math.pow(10, precision || 0);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n}\r\n","import { drawGame, drawGameEnd, drawItem, drawScore, drawSnake } from './canvas.js';\r\nimport { Board } from './board.js';\r\nimport { Food, Item, Phase, randomizeItem, Teleport } from './item.js';\r\nimport { Snake, LEFT_KEY, RIGHT_KEY, UP_KEY, DOWN_KEY } from './snake.js';\r\n\r\nconst CANVAS_ID = 'gameCanvas';\r\nconst CONTROL_PANEL_ID = 'controlPanel';\r\n\r\nconst GAME_SPEED__ARROW = 100;  // milliseconds\r\nconst GAME_SPEED__MOTION = 125; // milliseconds, slow down game since harder with motion controls\r\nconst SWIPE_SENSITIVITY = 10;  // delta of pixels needed to consider touch mvmt a 'swipe'\r\nconst MOTION_SENSITIVITY = 15;  // degree of motion needed to consider a device mvmt as intentional\r\n\r\nconst SCORE_INCREMENT = 10;\r\nconst FOOD_STABILITY_SCORE_THRESHOLD = 100;\r\n\r\nconst SPACE_KEY = 'Space';\r\nconst KEY_CONTROLS = new Set([LEFT_KEY, RIGHT_KEY, UP_KEY, DOWN_KEY, SPACE_KEY]);\r\n\r\nexport class Game {\r\n    /**\r\n     * @param {Board} board\r\n     * @param {Snake} snake\r\n     * @param {Item} item\r\n     * @param {number} speed\r\n     */\r\n    constructor(board, snake, item, speed) {\r\n        this._board = board;\r\n        this._snake = snake;\r\n        this._item = item;\r\n\r\n        this._score = 0;\r\n\r\n        this._paused = false;\r\n        this._ended = false;\r\n\r\n        this._speed = speed;\r\n\r\n        this._motionAvailable = null;\r\n        this._lastBeta = 0;\r\n        this._lastGamma = 0;\r\n\r\n        this._setupControls();\r\n    }\r\n\r\n    get board() {\r\n        return this._board;\r\n    }\r\n\r\n    get snake() {\r\n        return this._snake;\r\n    }\r\n\r\n    get item() {\r\n        return this._item;\r\n    }\r\n\r\n    get speed() {\r\n        return this._speed;\r\n    }\r\n\r\n    get score() {\r\n        return this._score;\r\n    }\r\n\r\n    get paused() {\r\n        return this._paused;\r\n    }\r\n\r\n    run() {\r\n        if (this._didEnd()) { this._end(); return; }\r\n\r\n        let timeout = setTimeout(() => {\r\n            this._snake.isChangingDirection = false;\r\n\r\n            drawGame(this);\r\n            drawScore(this._score, this._board);\r\n            drawItem(this._item, this._board);\r\n            if (!this._paused) {\r\n                //console.log(`paused: ${this._paused}. advancing...`);\r\n                this._advanceSnake();\r\n            }\r\n            drawSnake(this._snake, this._board);\r\n\r\n            // run game loop again\r\n            this.run();\r\n        }, this._speed);\r\n\r\n        if (!this._timeout) this._timeout = timeout;\r\n    }\r\n\r\n    _advanceSnake() {\r\n        this._snake.advanceHead();\r\n\r\n        if (this._snake.didEat(this._item)) {\r\n            this._score += SCORE_INCREMENT;\r\n\r\n            this._snake.equip(this._item);\r\n\r\n            this._board.setGlow(this._snake.powerUps[Teleport]);\r\n\r\n            let itemClass = randomizeItem(this._score, this._snake.powerUps, true, false);\r\n\r\n            this._item = new itemClass(this._board, this._snake);\r\n            // console.log(`new ${this._item.fillColor.toUpperCase()} item`);\r\n        } else {\r\n            const foodIsUnstable = this._score >= FOOD_STABILITY_SCORE_THRESHOLD;\r\n            // randomly regenerate item even if it wasn't eaten\r\n            if (foodIsUnstable || this._item instanceof Teleport || this._item instanceof Phase) {\r\n                let itemClass = randomizeItem(this._score, this._snake.powerUps, false, true);\r\n                if (itemClass !== null) {\r\n                    this._item = new itemClass(this._board, this._snake);\r\n                    // console.log(`new ${this._item.fillColor.toUpperCase()} item`);\r\n                }\r\n            }\r\n\r\n            this._snake.advanceTail();\r\n        }\r\n\r\n        // TODO: add to control panel\r\n        // console.log(`${this._item.type}: ${this._item.x}, ${this._item.y}`);\r\n    }\r\n\r\n    _didEnd() {\r\n        const didCollide = this._snake.didCollide(this._board.width, this._board.height, this._board.blockSize);\r\n        this._board.setGlow(this._snake.powerUps[Teleport]);\r\n        return didCollide;\r\n    }\r\n\r\n    _end() {\r\n        this._ended = true;\r\n        this._board.setEndGameFilter();\r\n\r\n        drawGame(this);\r\n        drawItem(this._item, this._board);\r\n        drawSnake(this._snake, this._board);\r\n\r\n        drawGameEnd(this._board);\r\n\r\n        // bind `this` to game in event handler\r\n        this._restart = this._restart.bind(this);\r\n\r\n        // allow for game restart\r\n        if (!this._motionAvailable) {\r\n            document.removeEventListener('keydown', this._handleKeyInput);\r\n            document.addEventListener('keydown', this._restart);\r\n        } else {\r\n            // alwways allow restart with space bar\r\n            document.addEventListener('keydown', this._restart);\r\n        }\r\n        document.removeEventListener('click', this._togglePause);\r\n        document.addEventListener('click', this._restart);\r\n    }\r\n\r\n    _restart(event) {\r\n        if (event.code === SPACE_KEY || event.type === 'click' || event.type === 'touchend') {\r\n            document.removeEventListener('keydown', this._restart);\r\n            document.removeEventListener('click', this._restart);\r\n            this._board.removeTouchHandlers();\r\n\r\n            restartGame();\r\n        }\r\n    }\r\n\r\n    _togglePause() {\r\n        this._paused = !this._paused;\r\n\r\n        //console.log(`paused: ${this._paused}`);\r\n\r\n        if (this._paused) {\r\n            this._snake.pause();\r\n            this._board.setPauseGameFilter();\r\n        } else {\r\n            this._snake.unpause();\r\n            this._board.resetFilter();\r\n        }\r\n    }\r\n\r\n    _setupControls() {\r\n        this._lastBeta = this._lastGamma = 0;\r\n\r\n        // bind `this` to game in event handlers\r\n        this._handleDeviceMvmt = this._handleDeviceMvmt.bind(this);\r\n        this._handleKeyInput = this._handleKeyInput.bind(this);\r\n        this._handleVisibilityChange = this._handleVisibilityChange.bind(this);\r\n        this._requestDeviceOrientation = this._requestDeviceOrientation.bind(this);\r\n        this._togglePause = this._togglePause.bind(this);\r\n\r\n        // bind `this` to board in event handler\r\n        this._board.enterFullScreen = this._board.enterFullScreen.bind(this._board);\r\n\r\n        // call change direction on key press\r\n        document.addEventListener('keydown', this._handleKeyInput);\r\n\r\n        // pause game on click or if game becomes hidden\r\n        document.addEventListener('click', this._togglePause);\r\n        document.addEventListener('visibilitychange', this._handleVisibilityChange, false);\r\n\r\n        // enter full screen on double click (for devices that support this event)\r\n        document.addEventListener('dblclick', this._board.enterFullScreen);\r\n\r\n        // enter full screen on swipe (for touch/mobile devices)\r\n        this._handleSwipeToFullScreen();\r\n\r\n        if ( typeof(DeviceOrientationEvent) !== 'undefined' ) {\r\n            // if browser (e.g., iOS safari) requires permission for deviceorientation, request it\r\n            if ( typeof(DeviceOrientationEvent.requestPermission) === 'function' ) {\r\n                let btn = this._board.createMotionRequestBtn();\r\n                btn.addEventListener('click', this._requestDeviceOrientation);\r\n\r\n                // give user time to grant permission\r\n                this._togglePause();\r\n            }\r\n            else {\r\n                window.addEventListener('deviceorientation', this._handleDeviceMvmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    _handleKeyInput(event) {\r\n        const keyPressed = event.code;\r\n\r\n        if (KEY_CONTROLS.has(keyPressed)) {\r\n            if (this._motionAvailable == null && !this._ended) console.log('key controls activated');\r\n\r\n            // once user starts using key controls, disable motion control, as having\r\n            // both keyboard and motion event listeners makes the game less responsive\r\n            this._board.removeMotionRequestBtn();\r\n            window.removeEventListener('deviceorientation', this._handleDeviceMvmt);\r\n            this._motionAvailable = false;\r\n        }\r\n\r\n        if (keyPressed === SPACE_KEY) {\r\n            this._togglePause();\r\n        }\r\n\r\n        this._snake.changeDirectionByKey(keyPressed);\r\n    }\r\n\r\n    _handleDeviceMvmt(event) {\r\n        // forward (positive) to backward (negative) motion of the device\r\n        const beta = event.beta;\r\n        // right (positive) to left (negative) motion of the device\r\n        const gamma = event.gamma;\r\n\r\n        let betaDelta = this._lastBeta - beta;\r\n        let gammaDelta = this._lastGamma - gamma;\r\n\r\n        // console.log('deviceorientation', {\r\n        //     beta: event.beta, last_beta: this._lastBeta, beta_delta: betaDelta,\r\n        //     gamma: event.gamma, last_gamma: this._lastGamma, gamma_delta: gammaDelta,\r\n        // });\r\n\r\n        if (this._motionAvailable == null && (betaDelta > Math.abs(MOTION_SENSITIVITY) || gammaDelta > Math.abs(MOTION_SENSITIVITY))) {\r\n            // once user starts using motion control, disable keyboard controls, as having\r\n            // both keyboard and motion event listeners makes the game less responsive\r\n            document.removeEventListener('keydown', this._handleKeyInput);\r\n\r\n            this._speed = GAME_SPEED__MOTION;\r\n            this._motionAvailable = true;\r\n            console.log('motion controls activated');\r\n        }\r\n\r\n        let newMvmt = this._snake.changeDirectionByMvmt(event.beta, event.gamma, this._lastBeta, this._lastGamma, MOTION_SENSITIVITY);\r\n\r\n        this._lastBeta = newMvmt.newBeta;\r\n        this._lastGamma = newMvmt.newGamma;\r\n    }\r\n\r\n    _handleVisibilityChange() {\r\n        if (document.hidden && !this._paused) {\r\n            this._togglePause();\r\n        }\r\n    }\r\n\r\n    _handleSwipeToFullScreen() {\r\n        let downY = 0;\r\n        let upY = 0;\r\n\r\n        let thisGame = this;\r\n        function handleGesture(ev) {\r\n            if (upY < downY && downY - upY > SWIPE_SENSITIVITY) {\r\n                // console.log(`swiped UP ${downY-upY}px`);\r\n                thisGame._board.enterFullScreen();\r\n            } else if (upY > downY && upY - downY > SWIPE_SENSITIVITY) {\r\n                // console.log(`swiped DOWN ${upY-downY}px`);\r\n                thisGame._board.exitFullScreen();\r\n            } else if (thisGame._ended) {\r\n                thisGame._restart(ev);\r\n            } else {\r\n                // console.log(`togglePause from handleGesture`);\r\n                thisGame._togglePause();\r\n            }\r\n        }\r\n\r\n        function handleTouchStart(ev) {\r\n            ev.preventDefault();\r\n\r\n            const firstTouch = ev.changedTouches[0];\r\n            // console.log({\r\n            //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n            // });\r\n            // downX = firstTouch.screenX;\r\n\r\n            downY = firstTouch.screenY;\r\n        }\r\n\r\n        function handleTouchEnd(ev) {\r\n            ev.preventDefault();\r\n\r\n            const firstTouch = ev.changedTouches[0];\r\n            // console.log({\r\n            //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\r\n            // });\r\n            // upX = firstTouch.screenX;\r\n\r\n            upY = firstTouch.screenY;\r\n\r\n            handleGesture(ev);\r\n        }\r\n\r\n        this._board.addTouchHandlers(handleTouchStart, handleTouchEnd);\r\n    }\r\n\r\n    _requestDeviceOrientation() {\r\n        DeviceOrientationEvent.requestPermission()\r\n            .then( response => {\r\n            if ( response === 'granted' ) {\r\n                this._enableMotionControl();\r\n            }\r\n        }).catch( console.error );\r\n    }\r\n\r\n    /**\r\n     * disable keyboard, enable motion, remove button,\r\n     * and un-pause game\r\n     */\r\n    _enableMotionControl() {\r\n        document.removeEventListener('keydown', this._handleKeyInput);\r\n        window.addEventListener('deviceorientation', this._handleDeviceMvmt);\r\n        this._board.removeMotionRequestBtn();\r\n        this._togglePause();\r\n    }\r\n}\r\n\r\n// <!-- GAME EXECUTION HELPERS BELOW -->\r\n\r\nexport function initGame() {\r\n    const canvas = document.getElementById(CANVAS_ID);\r\n    const ctrl_panel = document.getElementById(CONTROL_PANEL_ID);\r\n\r\n    let board = new Board(canvas, ctrl_panel);\r\n    let snake = new Snake(board.height, board.height, board.blockSize);\r\n    let food = new Food(board, snake);\r\n\r\n    let game = new Game(board, snake, food, GAME_SPEED__ARROW);\r\n\r\n    return game;\r\n}\r\n\r\nfunction restartGame() {\r\n    let game = initGame();\r\n    game.run();\r\n}\r\n","import { initGame } from './game.js'\r\n\r\nlet game = initGame();\r\ngame.run();\r\n"],"names":["withStraddle","ctx","cb","offset","translate","drawGame","game","board","filter","activeFilter","fillStyle","color","isGlowing","canvas","style","border","outline","borderColor","boxShadow","transition","fillRect","width","height","paused","useExclamation","needsPermission","font","ratio","fillText","String","fromCharCode","drawSnake","snake","body","forEach","snakePart","strokeStyle","lineCap","shadowBlur","shadowColor","x","y","blockSize","strokeRect","drawSnakePart","drawItem","item","fillColor","Board","constructor","ctrlPanel","this","_canvas","_ctrlPanel","getContext","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","_height","_blockSize","_color","_borderColor","_isGlowing","resetFilter","_activeFilter","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestBtn","btn","createElement","innerHTML","setAttribute","type","appendChild","removeMotionRequestBtn","getElementById","parentNode","removeChild","setGlow","shouldGlow","addTouchHandlers","handleTouchStart","handleTouchEnd","_handleTouchStart","_handleTouchEnd","addEventListener","removeTouchHandlers","removeEventListener","Math","min","innerWidth","innerHeight","CTRL_PANEL_HEIGHT","Item","_generate","_x","_y","_randomBlock","max","round","random","Food","Teleport","Phase","ITEM_TYPES","none","food","teleport","phase","randomizeItem","score","powerUps","alwaysReturnItem","lessPowerUps","noItemProb","foodProb","teleportProb","phaseProb","TELEPORT_PROBABILITY","PHASE_PROBABILITY","chances","p","items","Object","keys","find","_","i","sum","slice","reduce","acc","el","pickItem","Snake","boardWidth","boardHeight","_body","_dx","_dxAtPause","_dy","_dyAtPause","isChangingDirection","advanceHead","head","unshift","advanceTail","pop","pause","unpause","didEat","_round","equip","didCollide","length","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirectionByKey","keyPressed","goingUp","goingDown","goingRight","goingLeft","changeDirectionByMvmt","beta","gamma","lastBeta","lastGamma","sensitivity","newBeta","newGamma","betaDelta","gammaDelta","value","precision","multiplier","pow","KEY_CONTROLS","Set","Game","speed","_board","_snake","_item","_score","_paused","_ended","_speed","_motionAvailable","_lastBeta","_lastGamma","_setupControls","run","_didEnd","_end","timeout","setTimeout","textAlign","drawScore","_advanceSnake","_timeout","itemClass","drawGameEnd","_restart","bind","_handleKeyInput","_togglePause","event","code","initGame","_handleDeviceMvmt","_handleVisibilityChange","_requestDeviceOrientation","_handleSwipeToFullScreen","DeviceOrientationEvent","has","console","log","abs","newMvmt","hidden","downY","upY","thisGame","ev","preventDefault","firstTouch","changedTouches","screenY","handleGesture","requestPermission","response","_enableMotionControl","catch","error","ctrl_panel"],"mappings":"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"}