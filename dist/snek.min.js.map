{"version":3,"file":"snek.min.js","sources":["../src/js/config.js","../src/js/board.js","../src/js/error.js","../src/js/item.js","../src/js/direction.js","../src/js/motion.js","../src/js/snake.js","../src/js/game/input.js","../src/js/canvas.js","../src/js/game/render.js","../src/js/game/state.js","../src/js/game/game.js","../src/js/main.js"],"sourcesContent":["export const GAME_CONFIG = {\n    BOARD: {\n        CTRL_PANEL_HEIGHT: 50,  // pixels\n        MARGIN_SIZE: 20,  // pixels\n        NUM_STEPS_ACROSS_CANVAS: 30,\n        DEFAULT_BACKGROUND_COLOR: 'white',\n        DEFAULT_BORDER_COLOR: 'darkgreen',\n        TELEPORT_BORDER_COLOR: 'blue',\n        TELEPORT_BACKGROUND_COLOR: '#e2f1fa',  // a light blue\n        FILTERS: {\n            NONE: 'none',\n            PAUSE: 'contrast(1.4) sepia(1)',\n            ENDGAME: 'grayscale(0.8) blur(0.5px)',\n        },\n    },\n\n    SNAKE: {\n        INITIAL_LENGTH: 5,\n        DEFAULT_COLOR: 'lightgreen',\n        DEFAULT_BORDER_COLOR: 'darkgreen',\n        PHASE_BORDER_COLOR: 'violet',\n    },\n\n    ITEM: {\n        FOOD_COLOR: 'red',\n        FOOD_BORDER_COLOR: 'darkred',\n        PHASE_COLOR: 'orchid',\n        PHASE_BORDER_COLOR: 'violet',\n        TELEPORT_COLOR: 'blue',\n        TELEPORT_BORDER_COLOR: 'darkblue',\n        PHASE_SCORE_THRESHOLD: 150,\n        TELEPORT_SCORE_THRESHOLD: 50,\n        BASE_PHASE_PROBABILITY: 0.1,\n        BASE_TELEPORT_PROBABILITY: 0.1,\n        BASE_VOLATILE_FOOD_PROBABILITY: 0.01,\n    },\n\n    GAME: {\n        SCORE_INCREMENT: 10,\n        SCORE_THRESHOLD_FOR_VOLATILE_FOOD: 100,\n        SPEED_MS__ARROW: 100,\n        SPEED_MS__MOTION: 125,          // slow down game since harder with motion controls\n    },\n\n    INPUT: {\n        SWIPE_SENSITIVITY: 10,          // delta of pixels needed to consider touch mvmt a 'swipe'\n        MOTION_SENSITIVITY: 15,         // degree of motion needed to consider a device mvmt as intentional\n        MOTION_THROTTLE_TIME_MS: 100,   // min time between motion control updates to prevent over-sensitivity\n    },\n\n    CANVAS: {\n        GAME_TEXT_COLOR: 'gray',\n        HIGH_SCORE_TEXT_COLOR: 'goldenrod',\n        PAUSE_BTN_COLOR: 'darkkhaki',\n        EXCLAMATION_BTN_COLOR: 'darkkhaki',\n        GAME_TEXT_FONT_FAMILY: '\"Saira\", serif',\n        GAME_TEXT_FONT_SIZE: 50,\n    },\n\n    STATE: {\n        LOCAL_STORAGE_KEY_HIGH_SCORE: 'highScore',\n        LOCAL_STORAGE_KEY_GAME_SPEED: 'gameSpeed',\n    },\n\n    ERROR: {\n        // ERROR_MESSAGE_DURATION: 5000,\n        MESSAGE_FONT: '20px Arial',\n        MESSAGE_COLOR: 'red',\n        MESSAGE_BACKGROUND: 'rgba(0, 0, 0, 0.7)',\n    },\n};\n","import { GAME_CONFIG } from './config';\n\nconst { BOARD } = GAME_CONFIG;\n\nconst BUTTON_IDS = {\n    MOTION_REQUEST: 'motionRequest',\n    MOTION_INDICATOR_TOGGLE: 'motionIndicatorToggle',\n    CLEAR_HIGH_SCORE: 'clearHighScore'\n};\n\n/**\n * Represents the game board.\n */\nexport class Board {\n    /**\n     * @param {HTMLCanvasElement} canvas - canvas element for the game\n     * @param {HTMLDivElement | null} ctrlPanel - control panel element\n     */\n    constructor(canvas, ctrlPanel) {\n        this._canvas = canvas;\n        this._ctrlPanel = ctrlPanel;\n\n        // 2d drawing context\n        if (!(this.ctx = this._canvas.getContext('2d'))) {\n            throw new Error('2d context not supported or canvas already initialized');\n        }\n\n        this._boardSize = this._calculateBoardSize();\n\n        // handle rendering difference between a standard display vs a HiDPI or Retina display\n        this._ratio = window.devicePixelRatio || 1;\n\n        this._sizeCanvas();\n        this._sizeControlPanel();\n\n        this._width = canvas.width;\n        this._height = canvas.height;\n        this._blockSize = canvas.width / BOARD.NUM_STEPS_ACROSS_CANVAS;\n\n        this._activeFilter = BOARD.FILTERS.NONE;\n        this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\n        this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\n        this._isGlowing = false;\n\n        this.resetFilter();\n\n        // console.log({\n        //     ratio: this._ratio, 'canvas.style.width': canvas.style.width,\n        //     'canvas.style.height': canvas.style.height, 'canvas.width': canvas.width,\n        //     'canvas.height': canvas.height, block_size: this._blockSize\n        // })\n    }\n\n    /**\n     * @returns {HTMLCanvasElement}\n     */\n    get canvas() {\n        return this._canvas;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get borderColor() {\n        return this._borderColor;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get isGlowing() {\n        return this._isGlowing;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get activeFilter() {\n        return this._activeFilter;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get width() {\n        return this._width;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get height() {\n        return this._height;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get blockSize() {\n        return this._blockSize;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get ratio() {\n        return this._ratio;\n    }\n\n    /**\n     * Resets the board filter to default.\n     */\n    resetFilter() {\n        this._activeFilter = BOARD.FILTERS.NONE;\n    }\n\n    /**\n     * Sets the board filter for the end game state.\n     */\n    setEndGameFilter() {\n        this._activeFilter = BOARD.FILTERS.ENDGAME;\n    }\n\n    /**\n     * Sets the board filter for the paused game state.\n     */\n    setPauseGameFilter() {\n        this._activeFilter = BOARD.FILTERS.PAUSE;\n    }\n\n    /**\n     * Enters fullscreen mode.\n     */\n    enterFullScreen() {\n        // switch to full screen\n        this._canvas.requestFullscreen().then(function () {\n            try {\n                // lock portrait orientation when going full screen\n                // @ts-ignore\n                screen.lockOrientationUniversal = screen.lockOrientation ||\n                    // @ts-ignore\n                    screen.mozLockOrientation ||\n                    // @ts-ignore\n                    screen.msLockOrientation;\n                // @ts-ignore\n                screen.lockOrientationUniversal('portrait-primary');\n            } catch (e) {\n                // console.log(e);\n            }\n        });\n    }\n\n    /**\n     * Exits fullscreen mode.\n     */\n    exitFullScreen() {\n        document.exitFullscreen();\n    }\n\n    /**\n     * Creates or retrieves button in control panel that requests motion control permission.\n     * @returns {HTMLButtonElement|null} motion request button, or null if the control panel does not exist\n     */\n    createMotionRequestButton() {\n        return this._createOrGetButton(BUTTON_IDS.MOTION_REQUEST, 'Allow Motion');\n    }\n\n    /**\n     * Retrieves the motion request button.\n     * @returns {HTMLButtonElement|null} motion request button if it exists; otherwise null\n     */\n    getMotionRequestButton() {\n        return this._getButton(BUTTON_IDS.MOTION_REQUEST);\n    }\n\n    /**\n     * Removes the motion request button from the DOM.\n     */\n    removeMotionRequestButton() {\n        const btn = this.getMotionRequestButton();\n        btn?.parentNode?.removeChild(btn);\n    }\n\n    /**\n     * Creates or retrieves button in control panel that toggles the motion indicator UI.\n     * @returns {HTMLButtonElement|null} motion indicator toggle button, or null if the control panel does not exist\n     */\n    createMotionIndicatorToggleButton() {\n        return this._createOrGetButton(BUTTON_IDS.MOTION_INDICATOR_TOGGLE, 'Motion Guide', {\n            style: 'display: none;'\n        });\n    }\n\n    /**\n     * Retrieves the motion indicator toggle button.\n     * @returns {HTMLButtonElement|null} motion indicator toggle button if it exists; otherwise null\n     */\n    getMotionIndicatorToggleButton() {\n        return this._getButton(BUTTON_IDS.MOTION_INDICATOR_TOGGLE);\n    }\n\n    /**\n     * Shows the motion indicator toggle button.\n     * If the button does not exist, this method does nothing.\n     */\n    showMotionIndicatorToggleButton() {\n        const toggleButton = this.getMotionIndicatorToggleButton();\n        if (toggleButton) {\n            toggleButton.classList.remove('hide');\n            toggleButton.classList.add('show');\n        }\n    }\n\n    /**\n     * Hides the motion indicator toggle button.\n     * If the button does not exist, this method does nothing.\n     */\n    hideMotionIndicatorToggleButton() {\n        const toggleButton = this.getMotionIndicatorToggleButton();\n        if (toggleButton) {\n            toggleButton.classList.remove('show');\n            toggleButton.classList.add('hide');\n        }\n    }\n\n    /**\n     * Updates the text of the motion indicator toggle button based on the indicator's visibility.\n     * @param {boolean} isIndicatorVisible - Whether the motion indicator is currently visible.\n     */\n    updateMotionIndicatorToggleButtonTitle(isIndicatorVisible) {\n        const toggleButton = this.getMotionIndicatorToggleButton();\n        if (toggleButton) {\n            toggleButton.title = isIndicatorVisible ? 'Hide Motion Guide' : 'Show Motion Guide';\n        }\n    }\n\n    /**\n     * Creates or retrieves button in control panel that clears the high score.\n     * @returns {HTMLButtonElement|null} clear high score button, or null if the control panel does not exist\n     */\n    createClearHighScoreButton() {\n        return this._createOrGetButton(BUTTON_IDS.CLEAR_HIGH_SCORE, 'Clear High Score');\n    }\n\n    /**\n     * Retrieves the clear high score button.\n     * @returns {HTMLButtonElement|null} clear high score button if it exists; otherwise null\n     */\n    getClearHighScoreButton() {\n        return this._getButton(BUTTON_IDS.CLEAR_HIGH_SCORE);\n    }\n\n    /**\n     * Sets the glow effect on the board.\n     * @param {boolean} shouldGlow - whether the board should glow\n     */\n    setGlow(shouldGlow) {\n        if (shouldGlow === this.isGlowing) return;\n\n        this._isGlowing = shouldGlow;\n\n        if (shouldGlow) {\n            // note: since canvas border doesn't show in fullscreen mode, we tint the background too\n            this._color = BOARD.TELEPORT_BACKGROUND_COLOR;\n            this._borderColor = BOARD.TELEPORT_BORDER_COLOR;\n        } else {\n            this._color = BOARD.DEFAULT_BACKGROUND_COLOR;\n            this._borderColor = BOARD.DEFAULT_BORDER_COLOR;\n        }\n\n        // console.log(`[board] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\n    }\n\n    /**\n     * Checks if the game needs permission for motion control.\n     * @returns {boolean} true if permission is needed; false otherwise\n     */\n    needsPermission() {\n        const requestButton = this.getMotionRequestButton();\n        return requestButton !== null && requestButton.checkVisibility();\n    }\n\n    /**\n     * Calculates the size of the game board.\n     * @returns {number} The calculated board size.\n     * @private\n     */\n    _calculateBoardSize() {\n        // calculate a square board size based on window dimensions and total # of steps across the canvas\n        const availableSpace = Math.min(window.innerWidth, window.innerHeight) - BOARD.CTRL_PANEL_HEIGHT;\n        const gridBlockSize = availableSpace / BOARD.NUM_STEPS_ACROSS_CANVAS;  // find closest number divisible by steps\n        const boardSize = Math.floor(gridBlockSize) * BOARD.NUM_STEPS_ACROSS_CANVAS - BOARD.MARGIN_SIZE;\n\n        // TODO: could implement like below instead - if willing to implement resizing\n        // const maxWidth = window.innerWidth - MARGIN_SIZE;\n        // const maxHeight = window.innerHeight - CTRL_PANEL_HEIGHT - MARGIN_SIZE;\n        // const boardSize = Math.min(maxWidth, maxHeight);\n\n        return boardSize;\n    }\n\n    /**\n     * Sets the size of the canvas.\n     * @private\n     */\n    _sizeCanvas() {\n        this._canvas.style.width = this._boardSize + 'px';\n        this._canvas.style.height = this._boardSize + 'px';\n        this._canvas.width = this._boardSize * this._ratio;\n        this._canvas.height = this._canvas.width;\n    }\n\n    /**\n     * Sets the size of the control panel.\n     * @private\n     */\n    _sizeControlPanel() {\n        if (!this._ctrlPanel) return;\n        this._ctrlPanel.style.width = this._boardSize + 'px';\n        this._ctrlPanel.style.height = BOARD.CTRL_PANEL_HEIGHT + 'px';\n    }\n\n    /**\n     * Creates or retrieves a button in the control panel.\n     * @param {string} id - The ID of the button.\n     * @param {string} text - The text content of the button.\n     * @param {Object} [options={}] - Additional options for the button.\n     * @param {string} [options.style] - Inline CSS styles for the button.\n     * @returns {HTMLButtonElement|null} The created or existing button, or null if the control panel doesn't exist.\n     * @private\n     */\n    _createOrGetButton(id, text, options = {}) {\n        if (!this._ctrlPanel) return null;\n\n        let existingBtn = this._getButton(id);\n        if (existingBtn) return existingBtn;\n\n        let btn = document.createElement('button');\n        btn.type = 'button';\n        btn.id = id;\n        btn.textContent = text;\n        if (options.style) btn.style.cssText = options.style;\n        this._ctrlPanel.appendChild(btn);\n        return btn;\n    }\n\n    /**\n     * Retrieves a button from the DOM by its ID.\n     * @param {string} id - The ID of the button to retrieve.\n     * @returns {HTMLButtonElement|null} The button if it exists and is a button element, otherwise null.\n     * @private\n     */\n    _getButton(id) {\n        const element = document.getElementById(id);\n        return element instanceof HTMLButtonElement ? element : null;\n    }\n}\n","import { GAME_CONFIG } from './config';\n\nconst { ERROR } = GAME_CONFIG;\n\n/**\n * Displays an error message on the screen.\n * @param {string} message - error message to display\n * @param {HTMLCanvasElement | HTMLElement | null} canvas - game canvas (if available)\n */\nexport function displayErrorMessage(message, canvas = null) {\n    if (canvas && canvas instanceof HTMLCanvasElement) {\n        displayErrorOnCanvas(message, canvas);\n    } else {\n        displayErrorInDOM(message);\n    }\n}\n\n/**\n * Displays an error message on the canvas.\n * @param {string} message - error message to display\n * @param {HTMLCanvasElement} canvas - game canvas\n * @private\n */\nfunction displayErrorOnCanvas(message, canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        console.error('unable to get 2D context from canvas');\n        displayErrorInDOM(message);\n        return;\n    }\n\n    // save the current canvas state\n    ctx.save();\n\n    // set up the error message style\n    ctx.font = ERROR.MESSAGE_FONT;\n    ctx.fillStyle = ERROR.MESSAGE_BACKGROUND;\n\n    // calculate message width and position\n    const messageWidth = ctx.measureText(message).width + 20; // Add some padding\n    const messageHeight = 30;\n    const messageX = (canvas.width - messageWidth) / 2;\n    const messageY = canvas.height / 2 - messageHeight / 2;\n\n    // draw the background\n    ctx.fillRect(messageX, messageY, messageWidth, messageHeight);\n\n    // draw the error message\n    ctx.fillStyle = ERROR.MESSAGE_COLOR;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(message, canvas.width / 2, canvas.height / 2);\n\n    // restore the canvas state\n    ctx.restore();\n\n    // remove the error message after a set duration\n    // setTimeout(() => {\n    //     ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //     // note: not redrawing the game here as we might not have a valid game state\n    // }, ERROR_MESSAGE_DURATION);\n}\n\n/**\n * Displays an error message in the DOM.\n * @param {string} message - error message to display\n * @private\n */\nfunction displayErrorInDOM(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.position = 'fixed';\n    errorDiv.style.top = '50%';\n    errorDiv.style.left = '50%';\n    errorDiv.style.transform = 'translate(-50%, -50%)';\n    errorDiv.style.backgroundColor = ERROR.MESSAGE_BACKGROUND;\n    errorDiv.style.color = ERROR.MESSAGE_COLOR;\n    errorDiv.style.padding = '15px';\n    errorDiv.style.borderRadius = '5px';\n    errorDiv.style.zIndex = '1000';\n\n    // preserve line breaks in multi-line messages\n    errorDiv.style.whiteSpace = 'pre-wrap';\n\n    // for long messages, add a max-width and use word-wrapping\n    errorDiv.style.maxWidth = '80%';\n    errorDiv.style.overflowWrap = 'break-word';\n\n    errorDiv.textContent = message;\n\n    document.body.appendChild(errorDiv);\n\n    // setTimeout(() => {\n    //     document.body.removeChild(errorDiv);\n    // }, ERROR_MESSAGE_DURATION);\n}\n","import { GAME_CONFIG } from './config';\n\nconst { ITEM } = GAME_CONFIG;\n\nexport const PHASE_CLASSNAME = 'Phase';\nexport const TELEPORT_CLASSNAME = 'Teleport';\n\n/**\n * Represents an item that can be consumed by snek in the game.\n */\nexport class Item {\n    /**\n     * @param {import('./board').Board} board - game board\n     * @param {import('./snake').Snake} snake - snek object\n     */\n    constructor(board, snake) {\n        this._x = Number.MIN_SAFE_INTEGER, this._y = Number.MIN_SAFE_INTEGER;\n        this._generate(board, snake);\n    }\n\n    /**\n     * Gets the x-coordinate of the item.\n     * @returns {number} x-coordinate\n     */\n    get x() {\n        return this._x;\n    }\n\n    /**\n     * Gets the y-coordinate of the item.\n     * @returns {number} y-coordinate\n     */\n    get y() {\n        return this._y;\n    }\n\n    /**\n     * Gets the type of the item.\n     * @returns {string} item type\n     */\n    get type() { return 'UNKNOWN_ITEM' }\n\n    /**\n     * Gets the fill color of the item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return '' }\n\n    /**\n     * Gets the border color of the item.\n     * @returns {string} border color\n     */\n    get borderColor() { return '' }\n\n    /**\n     * Generates a new position for the item.\n     * @param {import('./board').Board} board - game board\n     * @param {import('./snake').Snake} snake - snek object\n     * @private\n     */\n    _generate(board, snake) {\n        this._x = this._randomBlock(0, board.width - board.blockSize, board.blockSize);\n        this._y = this._randomBlock(0, board.height - board.blockSize, board.blockSize);\n\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} @returns {void} */ snakeSegment) => {\n            const itemIsOnSnake = snakeSegment.x == this.x && snakeSegment.y == this.y\n            if (itemIsOnSnake) this._generate(board, snake);\n        });\n    }\n\n    /**\n     * Generates a random block position.\n     * @param {number} min - minimum value\n     * @param {number} max - maximum value\n     * @param {number} blockSize - size of each block\n     * @returns {number} random block position\n     * @private\n     */\n    _randomBlock(min, max, blockSize) {\n        // note: round to snap item placement to grid, as defined by blockSize\n        return Math.round((Math.random() * (max-min) + min) / blockSize) * blockSize;\n    }\n}\n\n/**\n * Represents a food item in the game.\n * Food is the basic item that snek consumes to grow and increase the player's score.\n * @extends Item\n */\nexport class Food extends Item {\n\n    /**\n     * Gets the food type.\n     * @returns {string} food type\n     */\n    get type() { return 'FOOD' }\n\n    /**\n     * Gets the fill color of the food.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.FOOD_COLOR }\n\n    /**\n     * Gets the border color of the food.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.FOOD_BORDER_COLOR }\n}\n\n/**\n * Represents a teleport item in the game.\n * Teleport is a power-up that allows snek to pass through the walls of the game board.\n * When consumed, it gives snek the ability to \"wrap around\" the game board once.\n * @extends Item\n */\nexport class Teleport extends Item {\n\n    /**\n     * Gets the teleport type.\n     * @returns {string} teleport type\n     */\n    get type() { return 'TELEPORT' }\n\n    /**\n     * Gets the fill color of the teleport item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.TELEPORT_COLOR }\n\n    /**\n     * Gets the border color of the teleport item.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.TELEPORT_BORDER_COLOR }\n}\n\n/**\n * Represents a phase item in the game.\n * Phase is a power-up that allows snek the ability to pass through its own body once.\n * @extends Item\n */\nexport class Phase extends Item {\n\n    /**\n     * Gets the phase type.\n     * @returns {string} phase type\n     */\n    get type() { return 'PHASE' }\n\n    /**\n     * Gets the fill color of the phase item.\n     * @returns {string} fill color\n     */\n    get fillColor() { return ITEM.PHASE_COLOR }\n\n    /**\n     * Gets the border color of the phase item.\n     * @returns {string} border color\n     */\n    get borderColor() { return ITEM.PHASE_BORDER_COLOR }\n}\n\nconst ITEM_TYPES = {\n    none: null,\n    food: Food,\n    teleport: Teleport,\n    phase: Phase\n};\n\n/**\n * Options for item selection.\n * @typedef {Object} ItemSelectionOptions\n * @property {boolean} [alwaysReturnItem=false] - If true, always returns an item (never null)\n * @property {boolean} [reducePowerUpProbability=false] - If true, reduces the probability of power-ups\n */\n\n/**\n * Randomizes the selection of an item type based on game conditions.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean; }} powerUps - available power-ups and whether eqipped\n * @param {ItemSelectionOptions} [options={}] - options for item selection\n * @returns {(new (board: import('./board').Board, item: import('./snake').Snake) => Item)} selected item class or null\n */\nexport function selectRandomItem(score, powerUps, options = {}) {\n    const { alwaysReturnItem = false, reducePowerUpProbability = false } = options;\n\n    const itemChances = calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n\n    // console.log(itemChances);\n\n    const selectedItemType = pickItem(itemChances);\n    return ITEM_TYPES[selectedItemType];\n}\n\n/**\n * Picks an item based on a weighted random selection algorithm.\n * @param {{ [x: string]: any; }} chances - chances for each item\n * @returns {string} selected item key\n */\nfunction pickItem(chances) {\n    const random = Math.random();  // random value to use for selection\n    let cumulativeProbability = 0;\n\n    for (const [item, probability] of Object.entries(chances)) {\n        cumulativeProbability += probability;\n        if (random <= cumulativeProbability) {\n            return item;\n        }\n    }\n\n    // this should never happen if probabilities sum to 1\n    throw new Error('item selection failed');\n}\n\n/**\n * Calculates probability of generation for each item type.\n * Provides ability to balance the game by making power-ups less frequent in certain situations.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {{ [x: string]: number }} probabilities for each item type\n */\nfunction calculateItemProbabilities(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    // note: a power-up always drops AT its score threshold; afterwards drops get random\n    const teleportProb = calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n    const phaseProb = calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability);\n\n    let foodProb, noItemProb;\n    if (alwaysReturnItem) {\n        foodProb = 1 - teleportProb - phaseProb;\n        noItemProb = 0;\n    } else {\n        foodProb = ITEM.BASE_VOLATILE_FOOD_PROBABILITY;\n        noItemProb = 1 - teleportProb - phaseProb - foodProb;\n    }\n\n    const probabilities = {\n        none: noItemProb,\n        food: foodProb,\n        teleport: teleportProb,\n        phase: phaseProb,\n    };\n\n    const totalProb = Object.values(probabilities).reduce((sum, prob) => sum + prob, 0);\n    if (Math.abs(totalProb - 1) > 1e-10) {  // allow for small floating-point errors\n        throw new Error(`Item probabilities must sum to 1. Current sum: ${totalProb}`);\n    }\n\n    return probabilities;\n}\n\n/**\n * Calculates the probability of generating a Teleport item.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {number} probability of generating a Teleport item\n */\nfunction calculateTeleportProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    if (score === ITEM.TELEPORT_SCORE_THRESHOLD && alwaysReturnItem) return 1;\n    if (score > ITEM.TELEPORT_SCORE_THRESHOLD && !powerUps[TELEPORT_CLASSNAME]) {\n        return reducePowerUpProbability ? ITEM.BASE_TELEPORT_PROBABILITY / 10 : ITEM.BASE_TELEPORT_PROBABILITY;\n    }\n    return 0;\n}\n\n/**\n * Calculates the probability of generating a Phase item.\n * @param {number} score - current game score\n * @param {{ [x: string]: boolean }} powerUps - current power-ups\n * @param {boolean} alwaysReturnItem - whether to always return an item\n * @param {boolean} reducePowerUpProbability - whether to reduce the probability of power-ups\n * @returns {number} probability of generating a Phase item\n */\nfunction calculatePhaseProbability(score, powerUps, alwaysReturnItem, reducePowerUpProbability) {\n    if (score === ITEM.PHASE_SCORE_THRESHOLD && alwaysReturnItem) return 1;\n    if (score > ITEM.PHASE_SCORE_THRESHOLD && !powerUps[PHASE_CLASSNAME]) {\n        return reducePowerUpProbability ? ITEM.BASE_PHASE_PROBABILITY / 10 : ITEM.BASE_PHASE_PROBABILITY;\n    }\n    return 0;\n}\n","export const DIRECTION_LEFT = 'left';\nexport const DIRECTION_RIGHT = 'right';\nexport const DIRECTION_UP = 'up';\nexport const DIRECTION_DOWN = 'down';\n\n/**\n * @typedef {Object} Direction\n * @property {number} dx - change in x direction\n * @property {number} dy - change in y direction\n */\n\n/**\n * Object mapping direction strings to their corresponding Direction objects.\n * @type {Object.<string, Direction>}\n */\nexport const DIRECTIONS = {\n    [DIRECTION_LEFT]:  { dx: -1, dy: 0 },\n    [DIRECTION_RIGHT]: { dx: 1,  dy: 0 },\n    [DIRECTION_UP]:    { dx: 0,  dy: -1 },\n    [DIRECTION_DOWN]:  { dx: 0,  dy: 1 },\n};\n\n/**\n * Gets the Direction object for a given direction string.\n * @param {string} direction - direction string\n * @returns {Direction | null} Direction object or null if not found\n */\nexport function getDirection(direction) {\n    return DIRECTIONS[direction.toLowerCase()] || null;\n}\n\n/**\n * Checks if two directions are opposite to each other.\n * @param {Direction} dir1 - first direction\n * @param {Direction} dir2 - second direction\n * @returns {boolean} true if the directions are opposite; false otherwise\n */\nexport function isOppositeDirection(dir1, dir2) {\n    return dir1.dx === -dir2.dx && dir1.dy === -dir2.dy;\n}\n\n/**\n * Normalizes a direction vector to have a magnitude of 1.\n * @param {number} dx - x component of the direction\n * @param {number} dy - y component of the direction\n * @returns {Direction} normalized direction\n */\nexport function normalizeDirection(dx, dy) {\n    const magnitude = Math.max(Math.abs(dx), Math.abs(dy));\n    if (magnitude === 0) {\n        return { dx: 0, dy: 0 };\n    }\n    return { dx: dx / magnitude, dy: dy / magnitude };\n}\n","import { GAME_CONFIG } from './config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from './direction';\n\nconst { INPUT } = GAME_CONFIG;\n\n/**\n * Represents a visual indicator for motion controls.\n */\nexport class MotionControlIndicator {\n\n    /**\n     * @param {HTMLDivElement} container - container element to render the indicator in\n     * @param {Object} [options={}] - configuration options for the indicator\n     * @param {boolean} [options.showInfo=true] - whether to show additional information\n     * @param {string} [options.position='inline'] - position of the indicator ('inline' or 'corner')\n     */\n    constructor(container, options = {}) {\n        this.container = container;\n        this.options = {\n            showInfo: true,\n            position: 'inline',\n            ...options\n        };\n        this._create();\n    }\n\n    /**\n     * Updates the motion control indicator based on the current orientation and direction.\n     * @param {{ beta: number, gamma: number }} orientation - The current device orientation.\n     * @param {string|null} direction - The current direction of movement (UP, DOWN, LEFT, RIGHT, or null).\n     * @param {number} sensitivity - The current sensitivity of the motion controls.\n     */\n    update(orientation, direction, sensitivity) {\n        const { beta, gamma } = orientation;\n        const maxTilt = 30;\n        const tiltX = Math.min(Math.max(gamma, -maxTilt), maxTilt) / maxTilt;\n        const tiltY = Math.min(Math.max(beta, -maxTilt), maxTilt) / maxTilt;\n\n        const dotPx = this.options.position === 'corner' ? 40 : 60;\n        if (this.dot instanceof HTMLDivElement) {\n            this.dot.style.transform = `translate(${tiltX * dotPx}px, ${tiltY * dotPx}px)`;\n        }\n\n        if (this.arrows) {\n            this.arrows.forEach(arrow => arrow.classList.remove('active'));\n        }\n        if (direction) {\n            const activeArrow = this.container.querySelector(`.arrow.${direction.toLowerCase()}`);\n            if (activeArrow instanceof HTMLDivElement) {\n                activeArrow.classList.add('active')\n            }\n\n            if (this.options.showInfo && this.directionValue instanceof HTMLSpanElement) {\n                if (this.directionValue.textContent !== direction) {\n                    this.directionValue.classList.add('highlight');\n                    this.directionValue.textContent = direction;\n                    setTimeout(() => {\n                        if (this.directionValue instanceof HTMLSpanElement) {\n                            this.directionValue.classList.remove('highlight');\n                        }\n                    }, 300);\n                }\n            }\n        }\n\n        if (this.options.showInfo) {\n            if (this.sensitivityValue instanceof HTMLSpanElement) {\n                this.sensitivityValue.textContent = sensitivity.toFixed(2);\n            }\n            if (this.betaValue instanceof HTMLSpanElement) {\n                this.betaValue.textContent = beta.toFixed(2);\n            }\n            if (this.gammaValue instanceof HTMLSpanElement) {\n                this.gammaValue.textContent = gamma.toFixed(2);\n            }\n        }\n    }\n\n    /**\n     * Makes the motion control indicator visible, if it exists.\n     */\n    show() {\n        if (this.container) {\n            this.container.style.display = 'block';\n        }\n    }\n\n    /**\n     * Hides the motion control indicator, if it exists.\n     */\n    hide() {\n        if (this.container) {\n            this.container.style.display = 'none';\n        }\n    }\n\n    /**\n     * Creates the DOM elements for the motion control indicator.\n     * @private\n     */\n    _create() {\n        this.container.innerHTML = `\n            <div class=\"motion-indicator ${this.options.position}\">\n                <div class=\"tilt-indicator ${this.options.position}\">\n                    <div class=\"dot\"></div>\n                    <div class=\"arrow up ${this.options.position}\">\\u25B2\\uFE0E</div>\n                    <div class=\"arrow down ${this.options.position}\">\\u25BC\\uFE0E</div>\n                    <div class=\"arrow left ${this.options.position}\">\\u25C0\\uFE0E</div>\n                    <div class=\"arrow right ${this.options.position}\">\\u25B6\\uFE0E</div>\n                </div>\n                ${this.options.showInfo ? `\n                <div class=\"info\">\n                    <p>Direction: <span class=\"direction-value\">None</span></p>\n                    <p>Sensitivity: <span class=\"sensitivity-value\">1.00</span></p>\n                    <p>Beta: <span class=\"beta-value\">0.00</span>°</p>\n                    <p>Gamma: <span class=\"gamma-value\">0.00</span>°</p>\n                </div>\n                ` : ''}\n            </div>\n        `;\n\n        this.dot = this.container.querySelector('.dot');\n        this.arrows = this.container.querySelectorAll('.arrow');\n        this.directionValue = this.container.querySelector('.direction-value');\n        this.sensitivityValue = this.container.querySelector('.sensitivity-value');\n        this.betaValue = this.container.querySelector('.beta-value');\n        this.gammaValue = this.container.querySelector('.gamma-value');\n\n        this._addStyles();\n    }\n\n    /**\n     * Adds the necessary styles for the motion control indicator.\n     * @private\n     */\n    _addStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .motion-indicator {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n            .motion-indicator.corner {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                background: white;\n                padding: 10px;\n                border-radius: 10px;\n                box-shadow: 0 0 10px rgba(0,0,0,0.1);\n            }\n            .tilt-indicator {\n                width: 150px;\n                height: 150px;\n                border: 2px solid #ccc;\n                border-radius: 10px;\n                position: relative;\n                overflow: hidden;\n            }\n            .tilt-indicator.corner {\n                width: 100px;\n                height: 100px;\n            }\n            .dot {\n                width: 20px;\n                height: 20px;\n                background: blue;\n                border-radius: 50%;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                transition: transform 0.1s ease;\n            }\n            .arrow {\n                position: absolute;\n                color: #ccc;\n                font-size: 24px;\n                transition: color 0.3s ease;\n            }\n            .arrow.up { top: 10px; left: 50%; transform: translateX(-50%); }\n            .arrow.down { bottom: 10px; left: 50%; transform: translateX(-50%); }\n            .arrow.left { left: 10px; top: 50%; transform: translateY(-50%); }\n            .arrow.right { right: 10px; top: 50%; transform: translateY(-50%); }\n            .arrow.active { color: green; }\n            .arrow.up.corner { top: 5px; }\n            .arrow.down.corner { bottom: 5px; }\n            .arrow.left.corner { left: 5px; }\n            .arrow.right.corner { right: 5px; }\n            .info {\n                text-align: left;\n                margin-left: 20px;\n            }\n            .info p {\n                margin: 5px 0;\n            }\n            .direction-value {\n                display: inline-block;\n                padding: 2px 8px;\n                border-radius: 4px;\n                transition: background-color 0.3s ease;\n            }\n            .direction-value.highlight {\n                background-color: #ffd700;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n}\n\n/**\n * Calculates the motion control based on the current and last device orientation,\n * as well as the time between updates to prevent overly frequent updates.\n *\n * @param {{ beta: number, gamma: number }} currentOrientation - current device orientation\n * @param {{ beta: number, gamma: number }} lastOrientation - last device orientation\n * @param {number} currentUpdateTime - timestamp of the current update\n * @param {number} lastUpdateTime - timestamp of the last update\n *\n * @returns {string|null} direction - calculated direction (UP, DOWN, LEFT, RIGHT),\n *                        or null if no significant motion or if the update is too soon\n */\nexport function calculateMotionControl(currentOrientation, lastOrientation, currentUpdateTime, lastUpdateTime) {\n    // ensure we are not updating too frequently\n    if (currentUpdateTime - lastUpdateTime < INPUT.MOTION_THROTTLE_TIME_MS) {\n        return null;\n    }\n\n    // calculate change since last update\n    const recentChange = {\n        beta: currentOrientation.beta - lastOrientation.beta,\n        gamma: currentOrientation.gamma - lastOrientation.gamma\n    };\n\n    const direction = isSignificantMotion(recentChange) ? getDirectionFromOrientation(recentChange) : null;\n    return direction;\n\n    // if (!initialOrientation) {\n    //     return { direction: null, sensitivity: 1, orientationChange: { beta: 0, gamma: 0 } };\n    // }\n\n    // // calculate change relative to initial orientation\n    // const totalChange = {\n    //     beta: currentOrientation.beta - initialOrientation.beta,\n    //     gamma: currentOrientation.gamma - initialOrientation.gamma\n    // };\n\n    // // calculate change since last update\n    // const recentChange = {\n    //     beta: currentOrientation.beta - lastOrientation.beta,\n    //     gamma: currentOrientation.gamma - lastOrientation.gamma\n    // };\n\n    // // update sensitivity based on total change from initial position\n    // const magnitudeChange = Math.sqrt(totalChange.beta ** 2 + totalChange.gamma ** 2);\n    // const newSensitivityMultiplier = 1 + (magnitudeChange / 45);\n\n    // // apply deadzone to recent change\n    // const adjustedDeadzone = INPUT.MOTION_DEADZONE / newSensitivityMultiplier;\n    // if (Math.abs(recentChange.beta) <= adjustedDeadzone) recentChange.beta = 0;\n    // if (Math.abs(recentChange.gamma) <= adjustedDeadzone) recentChange.gamma = 0;\n\n    // // determine dominant direction based on recent change\n    // const direction = getDirectionFromOrientation(recentChange);\n\n    // return {\n    //     direction,\n    //     sensitivity: newSensitivityMultiplier,\n    //     orientationChange: recentChange\n    // };\n}\n\n/**\n * Determines if a change in device orientation is significant enough to trigger a direction change.\n * Filters out small, unintentional device movements so we respond only to deliberate motions.\n * @param {Object} orientationChange - change in device orientation\n * @param {number} orientationChange.beta - change in beta (x-axis rotation) in degrees\n * @param {number} orientationChange.gamma - change in gamma (y-axis rotation) in degrees\n    * @returns {boolean} true if the motion is considered significant; false otherwise\n * @private\n */\nfunction isSignificantMotion(orientationChange) {\n    const threshold = INPUT.MOTION_SENSITIVITY;\n    return Math.abs(orientationChange.beta) > threshold || Math.abs(orientationChange.gamma) > threshold;\n}\n\n/**\n* Determine direction based on orientation change.\n* @param {{ beta: number, gamma: number }} orientationChange - the change in device orientation\n* @returns {string | null} determined direction or null\n* @private\n*/\nfunction getDirectionFromOrientation(orientationChange) {\n    let direction = null;\n    if (Math.abs(orientationChange.beta) > Math.abs(orientationChange.gamma)) {\n        direction = orientationChange.beta < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n    } else {\n        direction = orientationChange.gamma < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return direction;\n}\n","import { GAME_CONFIG } from './config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, getDirection, isOppositeDirection, normalizeDirection } from './direction';\nimport { PHASE_CLASSNAME, Phase, TELEPORT_CLASSNAME, Teleport } from './item';\n\nconst { SNAKE } = GAME_CONFIG;\n\n/**\n * Represents snek in the game.\n */\nexport class Snake {\n\n    /**\n     * @param {number} boardWidth - width of the game board\n     * @param {number} boardHeight - height of the game board\n     * @param {number} blockSize - size of each block on the board\n     */\n    constructor(boardWidth, boardHeight, blockSize) {\n        this._blockSize = blockSize;\n\n        // calculate initial position (center of the board)\n        const centerX = Math.floor(boardWidth / (2 * blockSize)) * blockSize;\n        const centerY = Math.floor(boardHeight / (2 * blockSize)) * blockSize;\n\n        this._body = this._createBody(centerX, centerY, SNAKE.INITIAL_LENGTH);\n\n        // set initial velocity\n        this._dx = this._dxAtPause = blockSize;\n        this._dy = this._dyAtPause = 0;\n        this._isChangingDirection = false;\n\n        // set initial appearance\n        this._color = SNAKE.DEFAULT_COLOR;\n        this._borderColor = SNAKE.DEFAULT_BORDER_COLOR;\n        this._isGlowing = false;\n\n        this.powerUps = { [TELEPORT_CLASSNAME]: false, [PHASE_CLASSNAME]: false };\n\n        this._directionMap = new Map([\n            [`${blockSize},0`, DIRECTION_RIGHT],\n            [`${-blockSize},0`, DIRECTION_LEFT],\n            [`0,${-blockSize}`, DIRECTION_UP],\n            [`0,${blockSize}`, DIRECTION_DOWN]\n        ]);\n    }\n\n    /**\n     * Creates the body of snek.\n     * @param {number} centerX - x-coordinate of the center of the board\n     * @param {number} centerY - y-coordinate of the center of the board\n     * @param {number} length - number of parts composing snek body\n     * @returns {{ x: number; y: number; }[]} created snek body\n     * @private\n     */\n    _createBody(centerX, centerY, length) {\n        const body = [];\n        for (let i = 0; i < length; i++) {\n            body.push({\n                x: centerX - i * this._blockSize,\n                y: centerY\n            });\n        }\n        return body;\n    }\n\n    /**\n     * Gets snek's fill color.\n     * @returns {string} fill color\n     */\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * Gets snek's border color.\n     * @returns {string} border color\n     */\n    get borderColor() {\n        return this._borderColor;\n    }\n\n    /**\n     * Gets whether snek is glowing.\n     * @returns {boolean} true if snek is glowing; false otherwise\n     */\n    get isGlowing() {\n        return this._isGlowing;\n    }\n\n    /**\n     * Gets the position of snek's head.\n     * @returns {{ x: number; y: number }} head position\n     */\n    getHeadPosition() {\n        return { ...this._body[0] };\n    }\n\n    /**\n     * Gets the current direction of snek.\n     * @returns {string} current direction ('left', 'right', 'up', or 'down')\n     */\n    getCurrentDirection() {\n        const key = `${this._dx},${this._dy}`;\n        return this._directionMap.get(key) || 'unknown';\n    }\n\n    /**\n     * Moves snek in its current direction.\n     * @param {boolean} growing whether snek should grow\n     */\n    move(growing = false) {\n        this._advanceHead();\n        if (!growing) {\n            this._advanceTail();\n        }\n    }\n\n    /**\n     * Advances snek's head.\n     */\n    _advanceHead() {\n        // note: round to snap snek movement to grid, as defined by blockSize\n        const head = {\n            x: Math.round((this.getHeadPosition().x + this._dx) / this._blockSize) * this._blockSize,\n            y: Math.round((this.getHeadPosition().y + this._dy) / this._blockSize) * this._blockSize\n        };\n        this._body.unshift(head);\n\n        this._isChangingDirection = false;\n\n        // TODO: add to control panel\n        // console.log(`HEAD: ${head.x}, ${head.y}`);\n    }\n\n    /**\n     * Advances snek's tail (removes the last segment).\n     */\n    _advanceTail() {\n        this._body.pop();\n    }\n\n    /**\n     * Teleports snek's head to a new position.\n     * Useful for unit testing.\n     * @param {{ x: number; y: number }} newPosition new position for the head\n     */\n    teleportHead(newPosition) {\n        this._body[0] = { ...newPosition };\n    }\n\n    /**\n     * Executes a callback for each segment of snek's body.\n     * @param {(segment: { x: number; y: number }, index: number) => void} callback\n     */\n    forEachSegment(callback) {\n        this._body.forEach((segment, index) => callback({ ...segment }, index));\n    }\n\n    /**\n     * Pauses snek's movement.\n     */\n    pause() {\n        // save velocity at pause\n        this._dxAtPause = this._dx;\n        this._dyAtPause = this._dy;\n        // set velocity to 0\n        this._dx = this._dy = 0;\n    }\n\n    /**\n     * Resumes snek's movement after a pause.\n     */\n    unpause() {\n        // set velocity to state before pause\n        this._dx = this._dxAtPause;\n        this._dy = this._dyAtPause;\n    }\n\n    /**\n     * Checks if snek has eaten an item.\n     * @param {import('./item').Item} item - item to check\n     * @returns {boolean} true if snek has eaten the item; false otherwise\n     */\n    didEat(item) {\n        let head = this.getHeadPosition();\n        return head.x === item.x && head.y === item.y;\n    }\n\n    /**\n     * Equips snek with a power-up\n     * @param {import('./item').Item} item - power-up item to equip\n     */\n    equip(item) {\n        if (item instanceof Teleport) this.powerUps[TELEPORT_CLASSNAME] = true;\n        if (item instanceof Phase) {\n            this.powerUps[PHASE_CLASSNAME] = true;\n            this.setGlow(true);\n        }\n    }\n\n    /**\n     * Sets the glow effect on snek.\n     * @param {boolean} shouldGlow - whether snek should glow\n     */\n    setGlow(shouldGlow) {\n        if (shouldGlow === this.isGlowing) return;\n\n        this._isGlowing = shouldGlow;\n\n        this._borderColor = shouldGlow ? SNAKE.PHASE_BORDER_COLOR : SNAKE.DEFAULT_BORDER_COLOR;\n\n        // console.log(`[snek] shouldGlow: ${shouldGlow}; borderColor: ${this.borderColor}; isGlowing: ${this.isGlowing}`);\n    }\n\n    /**\n     * Checks if snek has collided with itself or the board boundaries.\n     * @param {number} boardWidth - width of the game board\n     * @param {number} boardHeight - height of the game board.\n     * @param {number} blockSize - size of each block on the board\n     * @returns {boolean} true if snek has collided; false otherwise\n     */\n    didCollide(boardWidth, boardHeight, blockSize) {\n        let head = this.getHeadPosition();\n\n        // loop starts at index 4 because it is impossible for the first three parts to touch each other\n        const collidesWithSelf = this._body.slice(4).some(segment => segment.x === head.x && segment.y === head.y);\n        if (collidesWithSelf) {\n            if (this.powerUps[PHASE_CLASSNAME]) {\n                // if phase powerup is equipped, decrement, ignore collision, and continue game\n                this.powerUps[PHASE_CLASSNAME] = false;\n                this.setGlow(false);\n\n                console.log('snek phased!');\n                return false;\n            }\n            return true;\n        }\n\n        // check for collisions with walls\n        const hitLeftWall = head.x < 0;\n        const hitRightWall = head.x + blockSize > boardWidth;\n        const hitTopWall = head.y < 0;\n        const hitBottomWall = head.y + blockSize > boardHeight;\n\n        const hitWall = hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;\n\n        if (!hitWall) { return false; }\n\n        // if teleport power is equipped, decrement, teleport, and continue game\n        if (this.powerUps[TELEPORT_CLASSNAME]) {\n            this.powerUps[TELEPORT_CLASSNAME] = false;\n\n            // teleport to opposite side of the board\n            if (hitLeftWall) {\n                this.teleportHead({x: boardWidth - blockSize, y: head.y});\n            } else if (hitRightWall) {\n                this.teleportHead({x: 0, y: head.y});\n            } else if (hitTopWall) {\n                this.teleportHead({x: head.x, y: boardHeight - blockSize});\n            } else if (hitBottomWall) {\n                this.teleportHead({x: head.x, y: 0});\n            }\n\n            console.log('snek teleported!');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Changes the direction of snek.\n     * @param {string} direction - new direction\n     * @returns {boolean} true if snek direction was changed; false otherwise\n     */\n    changeDirection(direction) {\n        // prevent changing direction multiple times before the next move\n        if (this._isChangingDirection) return false;\n\n        const newDirection = getDirection(direction);\n        if (!newDirection) return false;\n\n        const currentDirection = this._getCurrentDirection();\n        // prevent snek from moving back on itself\n        if (isOppositeDirection(currentDirection, newDirection)) return false;\n\n        this._setNewDirection(newDirection);\n        return true;\n    }\n\n    /**\n     * Gets the current direction of snek.\n     * @returns {import('./direction').Direction} current direction\n     * @private\n     */\n    _getCurrentDirection() {\n        // normalize the current velocity to get direction\n        return normalizeDirection(this._dx, this._dy);\n    }\n\n    /**\n     * Sets a new direction for snek.\n     * @param {import('./direction').Direction} direction - new direction\n     * @private\n     */\n    _setNewDirection(direction) {\n        this._isChangingDirection = true;\n        this._dx = direction.dx * this._blockSize;\n        this._dy = direction.dy * this._blockSize;\n    }\n}\n","import { GAME_CONFIG } from '../config';\nimport { DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP } from '../direction';\nimport { calculateMotionControl } from '../motion';\n\nconst { INPUT } = GAME_CONFIG;\n\nconst SPACE_KEY = 'Space';\nconst LEFT_KEY = 'ArrowLeft';\nconst RIGHT_KEY = 'ArrowRight';\nconst UP_KEY = 'ArrowUp';\nconst DOWN_KEY = 'ArrowDown';\n\n/**\n * global var to persist permission state across game sessions.\n * possible values: 'unknown', 'requesting', 'granted', 'denied'\n * */\nlet motionPermissionState = 'unknown';\n\n/**\n * Handles user input for the game.\n */\nexport class InputHandler {\n    /**\n     * @param {import('./game').Game} game - game instance\n     */\n    constructor(game) {\n        this._game = game;\n        this._lastOrientation = null;\n        this._lastOrientationUpdateTime = 0;\n        this._touchStart = { x: 0, y: 0 };\n        this._touchEnd = { x: 0, y: 0 };\n        this._boundMethods = this._bindMethods();\n    }\n\n    /**\n     * Creates and returns an object containing all event handler methods bound to the current instance of InputHandler.\n     * Ensures they always have the correct `this` context when called, regardless of how they are invoked.\n     * @returns {Object} object containing bound method references\n     * @private\n     */\n    _bindMethods() {\n        return {\n            handleKeyInput: this._handleKeyInput.bind(this),\n            handleDeviceMovement: this._handleDeviceMovement.bind(this),\n            handleVisibilityChange: this._handleVisibilityChange.bind(this),\n            handlePauseClick: this._handlePauseClick.bind(this),\n            requestDeviceOrientation: this._requestDeviceOrientation.bind(this),\n            enterFullScreen: this._game.board.enterFullScreen.bind(this._game.board),\n            handleTouchStart: this._handleTouchStart.bind(this),\n            handleTouchEnd: this._handleTouchEnd.bind(this),\n            handleRestart: this._handleRestart.bind(this)\n        };\n    }\n\n    /**\n     * Manages all control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     */\n    manageGameControls(shouldAdd) {\n        this._manageKeyboardControls(shouldAdd);\n        this._manageMotionControls(shouldAdd);\n        this._manageTouchControls(shouldAdd);\n        this._manageClickControls(shouldAdd);\n        this._manageVisibilityControl(shouldAdd);\n    }\n\n    /**\n     * Manages controls for restarting the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     */\n    manageRestartControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        if (shouldAdd && !this._game.motionControl.active) {\n            // remove existing keyboard listener to avoid conflicts with new restart controls\n            document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\n        }\n        document[action]('keydown', this._boundMethods.handleRestart);\n        document[action]('click', this._boundMethods.handleRestart);\n    }\n\n    /**\n     * Manages keyboard control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageKeyboardControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('keydown', this._boundMethods.handleKeyInput);\n    }\n\n    /**\n     * Manages touch control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageTouchControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        this._game.board.canvas[action]('touchstart', this._boundMethods.handleTouchStart);\n        this._game.board.canvas[action]('touchend', this._boundMethods.handleTouchEnd);\n    }\n\n    /**\n     * Manages click control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageClickControls(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('click', this._boundMethods.handlePauseClick);\n        document[action]('dblclick', this._boundMethods.enterFullScreen);\n    }\n\n    /**\n     * Set up visibility change control event listeners for the game.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageVisibilityControl(shouldAdd) {\n        const action = shouldAdd ? 'addEventListener' : 'removeEventListener';\n        document[action]('visibilitychange', this._boundMethods.handleVisibilityChange, false);\n    }\n\n    /**\n     * Set up motion control event listeners for the game, if available.\n     * @param {boolean} shouldAdd - if true, adds the event listeners; if false, removes them.\n     * @private\n     */\n    _manageMotionControls(shouldAdd) {\n        if (typeof DeviceOrientationEvent === 'undefined') return;\n        shouldAdd ? this._listenToDeviceOrientation() : window.removeEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n    }\n\n    /**\n     * Checks if device orientation events are supported and sets up the appropriate listeners or permission requests.\n     * If permission is required (e.g., on iOS 13+), it creates a button for the user to request permission.\n     * If permission is already granted or not required, it activates motion control immediately.\n     * @private\n     */\n    _listenToDeviceOrientation() {\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n            if (motionPermissionState === 'granted') {\n                this._activateMotionControl();\n            } else {\n                this._createMotionRequestButton();\n            }\n        } else {\n            window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n        }\n    }\n\n    _createMotionRequestButton() {\n        let btn = this._game.board.createMotionRequestButton();\n        if (btn) {\n            btn.classList.add('show');\n            btn.addEventListener('click', this._boundMethods.requestDeviceOrientation);\n\n            // give user time to grant permission\n            if (!this._game.state.paused) {\n                this._game.togglePause();\n            }\n\n            motionPermissionState = 'requesting';\n        }\n    }\n\n    /**\n     * Handles keyboard input.\n     * @param {KeyboardEvent} event - keyboard event\n     * @private\n     */\n    _handleKeyInput(event) {\n        const keyCommands = {\n            [LEFT_KEY]: () => this._game.snake.changeDirection(DIRECTION_LEFT),\n            [RIGHT_KEY]: () => this._game.snake.changeDirection(DIRECTION_RIGHT),\n            [UP_KEY]: () => this._game.snake.changeDirection(DIRECTION_UP),\n            [DOWN_KEY]: () => this._game.snake.changeDirection(DIRECTION_DOWN),\n            [SPACE_KEY]: () => this._game.togglePause(),\n        };\n\n        const commandFn = keyCommands[event.code];\n        if (commandFn) {\n            // TODO: do i need the old `!this._game.state.ended` check?\n            if (this._game.motionControl.active === null) {\n                console.log('key controls activated');\n            }\n\n            // disable motion control when keyboard is used\n            // (having both keyboard and motion event listeners makes the game less responsive)\n            this._deactivateMotionControl();\n\n            commandFn();\n        }\n    }\n\n    /**\n     * Handles click events for pausing the game.\n     * Disallows pause clicks while the game is requesting motion permission.\n     * @param {MouseEvent} event - The click event object\n     * @private\n     */\n    _handlePauseClick(event) {\n        if (motionPermissionState !== 'requesting') {\n            this._game.togglePause();\n        }\n    }\n\n    /**\n     * Handles restart events triggered by key press, click, or touch.\n     * @param {KeyboardEvent | MouseEvent | TouchEvent} event - event object\n     */\n    _handleRestart(event) {\n        if ((event instanceof KeyboardEvent && event.code === SPACE_KEY) ||\n            event.type === 'click' ||\n            event.type === 'touchend') {\n            this._game.restart();\n        }\n    }\n\n    /**\n     * Handles device motion input.\n     * @param {DeviceOrientationEvent} event - device orientation event\n     * @private\n     */\n    _handleDeviceMovement(event) {\n        const currentUpdateTime = Date.now();\n        const currentOrientation = {\n            beta: event.beta || 0,\n            gamma: event.gamma || 0\n        }\n\n        if (!this._lastOrientation) {\n            this._lastOrientation = { ...currentOrientation };\n        }\n\n        const direction = calculateMotionControl(\n            currentOrientation,\n            this._lastOrientation,\n            currentUpdateTime,\n            this._lastOrientationUpdateTime\n        );\n\n        // if (direction && isSignificantMotion(orientationChange)) {\n        //     // check if this is the first significant movement detected\n        //     // used to determine when to switch from keyboard to motion controls\n        //     if (this._motionAvailable === null) {\n        //         this._activateMotionControl();\n        //     }\n\n        //     this._game.snake.changeDirection(direction);\n        //     this._lastOrientation = currentOrientation;\n        // }\n\n        if (direction) {\n            // used to determine when to switch from keyboard to motion controls\n            if (this._game.motionControl.active === null) {\n                this._activateMotionControl();\n            }\n\n            this._game.snake.changeDirection(direction);\n            this._lastOrientationUpdateTime = currentUpdateTime;\n            this._lastOrientation = currentOrientation;\n        }\n\n        // update motion control state\n        this._game.updateMotionControl(\n            currentOrientation,\n            this._game.snake.getCurrentDirection(),\n            1  // TODO: sensitivity\n        );\n    }\n\n    /**\n     * Handles visibility change of the document.\n     * @private\n     */\n    _handleVisibilityChange() {\n        if (document.hidden && !this._game.state.paused) {\n            this._game.togglePause();\n        }\n    }\n\n    /**\n     * Handles the touch start event.\n     * Records the initial Y position of the touch.\n     * @param {TouchEvent} event - touch start event\n     * @private\n     */\n    _handleTouchStart(event) {\n        event.preventDefault();\n\n        const firstTouch = event.changedTouches[0];\n        // console.log({\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\n        // });\n\n        this._touchStart = { x: firstTouch.screenX, y: firstTouch.screenY };\n    }\n\n    /**\n     * Handles the touch end event.\n     * Records the final Y position of the touch and calls handleSwipeGesture.\n     * @param {TouchEvent} event - touch end event\n     * @private\n     */\n    _handleTouchEnd(event) {\n        event.preventDefault();\n\n        const firstTouch = event.changedTouches[0];\n        // console.log({\n        //     [ev.type]: (firstTouch.screenX, firstTouch.screenY)\n        // });\n\n        this._touchEnd = { x: firstTouch.screenX, y: firstTouch.screenY };\n\n        this._handleSwipeGesture();\n    }\n\n    /**\n     * Handles the gesture based on the swipe direction.\n     * Enters fullscreen on upward swipe, exits fullscreen on downward swipe,\n     * restarts the game if it has ended, or toggles pause otherwise.\n     * @private\n     */\n    _handleSwipeGesture() {\n        const verticalSwipe = this._touchStart.y - this._touchEnd.y;\n        if (verticalSwipe > INPUT.SWIPE_SENSITIVITY) {\n            // console.log(`swiped UP ${downY-upY}px`);\n            this._game.board.enterFullScreen();\n        } else if (verticalSwipe < -INPUT.SWIPE_SENSITIVITY) {\n            // console.log(`swiped DOWN ${upY-downY}px`);\n            this._game.board.exitFullScreen();\n        } else if (this._game.state.ended) {\n            this._game.restart();\n        } else if (motionPermissionState !== 'requesting') {\n            // console.log(`togglePause from handleGesture`);\n            this._game.togglePause();\n        }\n    }\n\n    /**\n     * Request device orientation permission.\n     * @private\n     */\n    _requestDeviceOrientation() {\n        // iOS 13+ requires permission\n        DeviceOrientationEvent.requestPermission()\n            .then(state => {\n                motionPermissionState = state;\n                if (state === 'granted') {\n                    this._activateMotionControl();\n                    if (this._game.state.paused) {\n                        this._game.togglePause();\n                    }\n                } else {\n                    console.log('motion permission denied');\n                }\n            })\n            .catch(console.error)\n            .finally(() => {\n                this._game.board.removeMotionRequestButton();\n            });\n    }\n\n    /**\n     * Enables motion control for the game.\n     * @private\n     */\n    _activateMotionControl() {\n        document.removeEventListener('keydown', this._boundMethods.handleKeyInput);\n        window.addEventListener('deviceorientation', this._boundMethods.handleDeviceMovement);\n\n        this._game.board.removeMotionRequestButton();\n        this._game.activateMotionControl();\n\n        console.log('motion controls activated');\n    }\n\n    /**\n     * Disables motion control for the game.\n     * @private\n     */\n    _deactivateMotionControl() {\n        this._game.board.removeMotionRequestButton();\n        window.removeEventListener('deviceorientation', this._handleDeviceMovement);\n        this._game.deactivateMotionControl();\n    }\n\n    /**\n     * Logs debug information about the current state of motion controls.\n     * This method is intended to be called periodically (e.g., in the game loop)\n     * to provide ongoing insight into the motion control system's state.\n     * @private\n     */\n    _debugMotionControl() {\n        console.log('motion control debug info', {\n            motionControlActive: this._game.motionControl.active,\n            motionPermissionState: motionPermissionState,\n            deviceOrientation: this._lastOrientation,\n            isChangingDirection: this._game.snake._isChangingDirection,\n            snakeDirection: this._game.snake.getCurrentDirection()\n        });\n    }\n\n    /**\n     * Simulates the presence of the DeviceOrientationEvent.requestPermission API.\n     * This method is useful for testing or development environments where the actual API might not be available.\n     * It creates a mock DeviceOrientationEvent object with a requestPermission method that always resolves to 'granted'.\n     * @static\n     * @private\n     */\n    static _simulateDeviceOrientationRequestPermission() {\n        // create DeviceOrientationEvent if it doesn't exist\n        if (typeof DeviceOrientationEvent === 'undefined') {\n            window.DeviceOrientationEvent = {};\n        }\n\n        // add requestPermission method\n        window.DeviceOrientationEvent.requestPermission = () => {\n            return new Promise((resolve) => {\n                resolve('granted');\n            });\n        };\n\n        // modify typeof operator for requestPermission\n        Object.defineProperty(Object.prototype, 'requestPermission', {\n            value: function() {}\n        });\n    }\n}\n\n// TODO: consider refactoring to use Command interface again if\n// key controls AND mouse/touch/motion controls can all use it\n\n/**\n * Represents a command to pause the game.\n */\nclass PauseCommand {\n\n    /**\n     * Executes the pause command.\n     * @param {import('./game').Game} game - game instance\n     */\n    execute(game) {\n        game.togglePause();\n    }\n}\n\n/**\n * Represents a command to move snek.\n */\nclass MoveCommand {\n\n    /**\n     * @param {string} direction - direction to move\n     */\n    constructor(direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * Executes the move command.\n     * @param {import('./game').Game} game - game instance\n     */\n    execute(game) {\n        game.snake.changeDirection(this.direction);\n    }\n}\n","import { GAME_CONFIG } from './config';\n\nconst { CANVAS } = GAME_CONFIG;\n\nconst PAUSE_ICON_CHAR_CODE = 0xF4BF;\nconst EXCLAMATION_ICON_CHAR_CODE = 0xF33A;\n\n/**\n * A fake \"context manager\" for pixel sharpness.\n * https://stackoverflow.com/a/8696641\n * @param {CanvasRenderingContext2D} ctx - canvas rendering context\n * @param {() => void} cb - callback function to execute within the context\n */\nfunction withStraddle(ctx, cb) {\n    const offset = 0.5;\n\n    try {\n        // turn on 'straddle' trick to avoid blurriness\n        ctx.translate(offset, offset);\n        cb();\n    } finally {\n        // turn off 'straddle' trick to avoid blurriness\n        ctx.translate(-offset, -offset);\n    }\n}\n\n/**\n * Draws the game board and background.\n * @param {import('./game/game').Game} game - game object\n */\nexport function drawGame(game) {\n    let board = game.board;\n    let ctx = board.ctx;\n\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        ctx.filter = board.activeFilter;\n\n        // set border and background colors\n        ctx.fillStyle = board.color;\n        if (board.isGlowing) {\n            // note: strokeRect doesn't do a good job of bordering the canvas,\n            // so we fall back to CSS styling\n\n            // https://stackoverflow.com/a/5670984\n            board.canvas.style.border = 'none'\n            board.canvas.style.outline = `${board.borderColor} dashed thin`;\n            board.canvas.style.boxShadow = `0 0 10px ${board.color}`;\n            board.canvas.style.transition = 'box-shadow linear 1s';\n        } else {\n            board.canvas.style.border = `2px solid ${board.borderColor}`;\n            board.canvas.style.outline = 'none';\n            board.canvas.style.boxShadow = 'none';\n            board.canvas.style.transition = 'box-shadow linear 0.5s';\n        }\n\n        ctx.fillRect(0, 0, board.canvas.width, board.canvas.height);\n\n        if (game.state.paused) {\n            let useExclamation = board.needsPermission();\n\n            const iconSize = CANVAS.GAME_TEXT_FONT_SIZE * board.ratio;\n            const iconPadding = 5 * board.ratio;\n\n            // since filters don't work on iOS safari, we need another visual aid\n            // add pause button icon https://icons.getbootstrap.com/icons/pause-btn-fill/\n            // or exclamation triangle icon if we still need permissions\n            // https://icons.getbootstrap.com/icons/exclamation-triangle-fill/\n            ctx.font = `${iconSize}px \"bootstrap-icons\"`;\n            ctx.fillStyle = useExclamation ? CANVAS.EXCLAMATION_BTN_COLOR : CANVAS.PAUSE_BTN_COLOR;\n            ctx.fillText(String.fromCharCode(\n                useExclamation ? EXCLAMATION_ICON_CHAR_CODE : PAUSE_ICON_CHAR_CODE\n            ), iconPadding, iconSize + iconPadding, board.canvas.width);\n        }\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws snek on the game board.\n * @param {import('./snake').Snake} snake - snek object\n * @param {import('./board').Board} board - game board\n */\nexport function drawSnake(snake, board) {\n    const ctx = board.ctx;\n\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        if (snake.isGlowing) {\n            // https://stackoverflow.com/a/43676108\n            ctx.lineCap = 'round';\n            ctx.shadowBlur = 18;\n            ctx.shadowColor = snake.color;\n        }\n\n        ctx.fillStyle = snake.color;\n        ctx.strokeStyle = snake.borderColor;\n\n        snake.forEachSegment((/** @type {{ x: number; y: number; }} */ segment) => {\n            ctx.fillRect(segment.x, segment.y, board.blockSize, board.blockSize);\n            ctx.strokeRect(segment.x, segment.y, board.blockSize, board.blockSize);\n        });\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws an item on the game board.\n * @param {import('./item').Item} item - item object\n * @param {import('./board').Board} board - game board\n */\nexport function drawItem(item, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    withStraddle(ctx, () => {\n        ctx.fillStyle = item.fillColor;\n        ctx.strokeStyle = item.borderColor;\n        ctx.fillRect(item.x, item.y, board.blockSize, board.blockSize);\n        ctx.strokeRect(item.x, item.y, board.blockSize, board.blockSize);\n    });\n\n    ctx.restore();\n}\n\n/**\n * Draws the current score on the game board.\n * @param {number} score - current score\n * @param {import('./board').Board} board - game board\n */\nexport function drawScore(score, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\n    ctx.fillText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) - ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\n\n    ctx.restore();\n}\n\n/**\n * Draws the high score on the game board.\n * @param {number} score - high score\n * @param {import('./board').Board} board - game board\n */\nexport function drawHighScore(score, board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.strokeStyle = CANVAS.HIGH_SCORE_TEXT_COLOR;\n    ctx.strokeText(score.toString(), board.canvas.width / 2, (board.canvas.height / 2) + ((CANVAS.GAME_TEXT_FONT_SIZE / 2) * board.ratio), board.canvas.width);\n\n    ctx.restore();\n}\n\n/**\n * Draws the game over message on the game board.\n * @param {import('./board').Board} board - game board\n */\nexport function drawGameOver(board) {\n    let ctx = board.ctx;\n    ctx.save();\n\n    ctx.font = `${CANVAS.GAME_TEXT_FONT_SIZE * board.ratio}px ${CANVAS.GAME_TEXT_FONT_FAMILY}`;\n    ctx.textAlign = 'center';\n    ctx.fillStyle = CANVAS.GAME_TEXT_COLOR;\n    ctx.fillText('DED', board.canvas.width / 2, board.canvas.height / 2, board.canvas.width);\n\n    ctx.restore();\n}\n","import * as defaultCanvas from '../canvas';\n\n// fn to create render functions with canvas as injected dependency\nexport function createRenderFunctions(canvas = defaultCanvas) {\n    /**\n     * Renders the current game state.\n     * @param {import('./game').Game} game - game object to render\n     */\n    function renderGame(game) {\n        canvas.drawGame(game);\n        canvas.drawScore(game.state.score, game.board);\n        canvas.drawHighScore(game.state.highScore, game.board);\n        canvas.drawItem(game.item, game.board);\n        canvas.drawSnake(game.snake, game.board);\n    }\n\n    /**\n     * Renders the game over state.\n     * @param {import('./game').Game} game - game object to render\n     */\n    function renderGameOver(game) {\n        game.board.setEndGameFilter();\n        canvas.drawGame(game);\n        canvas.drawItem(game.item, game.board);\n        canvas.drawSnake(game.snake, game.board);\n        canvas.drawGameOver(game.board);\n    }\n\n    return { renderGame, renderGameOver };\n}\n\n// export the default render functions\nconst { renderGame, renderGameOver } = createRenderFunctions();\nexport { renderGame, renderGameOver };\n","import { GAME_CONFIG } from '../config';\n\nconst { INPUT, STATE } = GAME_CONFIG;\n\n/**\n * Represents the state of the game.\n */\nexport class GameState {\n\n    constructor() {\n        // states\n        this._paused = false;\n        this._ended = false;\n\n        // values\n        this._score = 0;\n        this._highScore = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, 0);\n        this._speed = this._getItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, INPUT.GAME_SPEED_MS__ARROW);\n    }\n\n    /**\n     * Gets the speed of the game, aka time between frame updates, in milliseconds.\n     * @returns {number} game speed\n     */\n    get speed() {\n        return this._speed;\n    }\n\n    /**\n     * Gets the current score of the game.\n     * @returns {number} current score\n     */\n    get score() {\n        return this._score;\n    }\n\n    /**\n     * Gets the high score of all games.\n     * @returns {number} high score\n     */\n    get highScore() {\n        return this._highScore;\n    }\n\n    /**\n     * Gets whether or not the game is paused.\n     * @returns {boolean} true if game is paused; false otherwise\n     */\n    get paused() {\n        return this._paused;\n    }\n\n    /**\n     * Gets whether or not the game has ended.\n     * @returns {boolean} true if game has ended; false otherwise\n     */\n    get ended() {\n        return this._ended;\n    }\n\n    /**\n     * Updates the current score.\n     * @param {number} increment - amount to increase the score by\n     */\n    updateScore(increment) {\n        this._score += increment;\n    }\n\n    /**\n     * Updates the high score if the current score is higher.\n     */\n    updateHighScore() {\n        if (this.score > this.highScore) {\n            this._highScore = this.score;\n            this._setItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, this.score);\n        }\n    }\n\n    /**\n     * Resets the high score to 0 and persists this change to localStorage.\n     * This operation cannot be undone.\n     */\n    clearHighScore() {\n        this._highScore = 0;\n        this._setItemSafely(STATE.LOCAL_STORAGE_KEY_HIGH_SCORE, 0);\n    }\n\n    /**\n     * Sets the game speed.\n     * @param {number} speed - new game speed to use\n     */\n    setSpeed(speed) {\n        if (typeof speed !== 'number' || isNaN(speed)) {\n            return;\n        }\n        this._speed = Math.max(0, Math.round(speed));\n    }\n\n    /**\n     * Toggles the pause state of the game.\n     */\n    togglePause() {\n        this._paused = !this.paused;\n    }\n\n    /**\n     * Ends the game and saves the current game speed.\n     */\n    endGame() {\n        this._ended = true;\n        this._setItemSafely(STATE.LOCAL_STORAGE_KEY_GAME_SPEED, this.speed);\n    }\n\n    /**\n     * Safely gets an item from localStorage.\n     * @param {string} key - The key to retrieve from localStorage\n     * @param {*} defaultValue - The default value to return if retrieval fails\n     * @returns {*} The value from localStorage or the default value\n     * @private\n     */\n    _getItemSafely(key, defaultValue) {\n        try {\n            const value = localStorage.getItem(key);\n            return value !== null ? JSON.parse(value) : defaultValue;\n        } catch (error) {\n            console.warn(`Error reading from localStorage: ${error.message}`);\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Safely sets an item in localStorage.\n     * @param {string} key - The key to set in localStorage\n     * @param {*} value - The value to set\n     * @private\n     */\n    _setItemSafely(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n        } catch (error) {\n            console.warn(`Error writing to localStorage: ${error.message}`);\n        }\n    }\n}\n","import { Board } from '../board';\nimport { GAME_CONFIG } from '../config';\nimport { displayErrorMessage } from '../error';\nimport { Food, Item, Phase, TELEPORT_CLASSNAME, Teleport, selectRandomItem } from '../item';\nimport { MotionControlIndicator } from '../motion';\nimport { Snake } from '../snake';\nimport { InputHandler } from './input';\nimport { renderGame, renderGameOver } from './render';\nimport { GameState } from './state';\n\nconst { GAME } = GAME_CONFIG;\n\nconst CANVAS_ID = 'gameCanvas';\nconst CONTROL_PANEL_ID = 'controlPanel';\nconst MOTION_INDICATOR_ID = 'motionIndicator';\n\n/**\n * global var to persist indicator visibility across game sessions.\n * */\nlet motionIndicatorVisible = false;\n\n/**\n * Represents the main game logic and state.\n */\nexport class Game {\n\n    /**\n     * @param {Board} board - game board\n     * @param {Snake} snake - snek\n     * @param {Item} item - current game item\n     */\n    constructor(board, snake, item) {\n        this.board = board;\n        this.snake = snake;\n        this.item = item;\n\n        this.state = new GameState();\n        this.input = new InputHandler(this);\n\n        this._lastUpdateTimestamp = 0;\n\n        /**\n         * @type {{\n        *   active: boolean | null,\n        *   orientation: { beta: number, gamma: number },\n        *   direction: string | null,\n        *   sensitivity: number,\n        *   indicatorVisible: boolean\n        * }}\n        */\n        this.motionControl = {\n            active: null,\n            orientation: { beta: 0, gamma: 0 },\n            direction: null,\n            sensitivity: 1,\n            indicatorVisible: motionIndicatorVisible\n        };\n\n        this._boundMethods = {\n            handleClearHighScore: this._handleClearHighScore.bind(this),\n            handleToggleMotionIndicator: this._handleToggleMotionIndicator.bind(this)\n        };\n\n        this._initializeUI();\n    }\n\n    /**\n     * Runs the game loop.\n     * @param {DOMHighResTimeStamp} now - current timestamp\n     */\n    run(now) {\n        if (this._shouldUpdateFrame(now)) {\n            this._updateFrame();\n            if (this.state._ended) {\n                renderGameOver(this);\n                return;\n            } else {\n                renderGame(this);\n            }\n        }\n\n        // run game loop again\n        requestAnimationFrame((t) => this.run(t));\n    }\n\n    /**\n     * Toggles pause state of the game.\n     */\n    togglePause() {\n        this.state.togglePause();\n\n        if (this.state.paused) {\n            this.snake.pause();\n            this.board.setPauseGameFilter();\n        } else {\n            this.snake.unpause();\n            this.board.resetFilter();\n        }\n\n        // TODO: pause/unpause any game sounds\n        // this.audio.togglePause();\n\n        console.log(`game ${this.state.paused ? 'paused' : 'resumed'}`);\n    }\n\n    /**\n     * Restarts the game.\n     */\n    restart() {\n        this.input.manageRestartControls(false);\n        this._removeEventListeners();\n        console.log('game restarted');\n        runGame();\n    }\n\n    /**\n     * Determines if the current frame of the game loop should be updated.\n     * @param {DOMHighResTimeStamp} now - current timestamp\n     * @returns {boolean} true if the frame should update; false otherwise\n     * @private\n     */\n    _shouldUpdateFrame(now) {\n        if (now - this._lastUpdateTimestamp >= this.state.speed) {\n            this._lastUpdateTimestamp = now;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the current frame based on game logic.\n     * This method checks the game state and advances snek as necessary.\n     * @private\n     */\n    _updateFrame() {\n        if (this.state.ended) return;\n        if (!this.state.paused) {\n            this._advanceSnake();\n            // TODO: add to control panel\n            // this.input._debugMotionControl();\n        }\n    }\n\n    /**\n     * Snek movement, collision, and item consumption logic.\n     * @private\n     */\n    _advanceSnake() {\n        let didEatBeforeMove = this.snake.didEat(this.item);\n\n        // move snek, growing if it ate an item\n        this.snake.move(didEatBeforeMove);\n\n        if (didEatBeforeMove) {\n            console.log(`snek ate item: ${this.item.type.toUpperCase()}`);\n\n            this.state.updateScore(GAME.SCORE_INCREMENT);\n\n            // apply item effects\n            this.snake.equip(this.item);\n\n            // update board effects if necessary\n            this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\n\n            // generate a new item\n            this._generateNewItem();\n        } else {\n            // optionally regenerate item based on game conditions\n            this._maybeRegenerateItem();\n        }\n\n        // TODO: add to control panel\n        // console.log(`${this.item.type}: ${this.item.x}, ${this.item.y}`);\n\n        if (this._checkCollision()) {\n            this._end();\n        }\n    }\n\n    /**\n     * Generates a new item on the board.\n     * @private\n     */\n    _generateNewItem() {\n        let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\n            { alwaysReturnItem: true, reducePowerUpProbability: false }\n        );\n        if (itemClass !== null) {\n            this.item = new itemClass(this.board, this.snake);\n            console.log(`new item generated: ${this.item.type.toUpperCase()}`);\n        }\n    }\n\n    /**\n     * Possibly regenerates the current item based on game conditions:\n     * (1) when the player is already performing well (high score),\n     * we make the food volatile, or able to change or disappear, like power-ups are.\n     * (2) when there's already a power-up on the board, we reduce the chance of chain-spawning power-ups.\n     * @private\n     */\n    _maybeRegenerateItem() {\n        const foodIsVolatile = this.state.score >= GAME.SCORE_THRESHOLD_FOR_VOLATILE_FOOD;\n        if (foodIsVolatile || this.item instanceof Teleport || this.item instanceof Phase) {\n            let itemClass = selectRandomItem(this.state.score, this.snake.powerUps,\n                {alwaysReturnItem: false, reducePowerUpProbability: true}\n            );\n            if (itemClass !== null) {\n                this.item = new itemClass(this.board, this.snake);\n                console.log(`item regenerated: ${this.item.type.toUpperCase()}`);\n            }\n        }\n    }\n\n    /**\n     * Checks if snek has collided with the board boundaries or itself.\n     * @returns {boolean} true if a collision occurred; false otherwise\n     * @private\n     */\n    _checkCollision() {\n        // always set game board glow based on whether or not teleport powerup is equipped\n        this.board.setGlow(this.snake.powerUps[TELEPORT_CLASSNAME]);\n        return this.snake.didCollide(this.board.width, this.board.height, this.board.blockSize);\n    }\n\n    /**\n     * Ends the game and updates final state.\n     * @private\n     */\n    _end() {\n        this.state.endGame();\n        this.state.updateHighScore();\n\n        this.input.manageGameControls(false);\n        this.input.manageRestartControls(true);\n\n        console.log(`game over - final score: ${this.state.score}; high score: ${this.state.highScore}`);\n    }\n\n    /**\n     * Resets the high score to zero and logs the change.\n     * Updates the game state but does not trigger a re-render.\n     * @private\n     */\n    _clearHighScore() {\n        const oldHighScore = this.state.highScore;\n        this.state.clearHighScore();\n        console.log(`high score cleared. old high score: ${oldHighScore}`);\n    }\n\n    /**\n     * Updates the motion control state with new orientation, direction, and sensitivity values.\n     * If motion control is not already active, this will activate it.\n     * Also updates the motion indicator UI if it's visible.\n     *\n     * @param {{ beta: number, gamma: number }} orientation - current device orientation angles\n     * @param {string|null} direction - current movement direction of the snake ('left', 'right', 'up', 'down', or null)\n     * @param {number} sensitivity - current sensitivity multiplier for motion controls\n     */\n    updateMotionControl(orientation, direction, sensitivity) {\n        this.motionControl.orientation = orientation;\n        this.motionControl.sensitivity = sensitivity;\n        if (direction) {\n            this.motionControl.direction = direction;\n        }\n\n        if (!this.motionControl.active) {\n            this.activateMotionControl();\n        }\n\n        if (this.motionIndicator && this.motionControl.indicatorVisible) {\n            this.motionIndicator.update(orientation, direction, sensitivity);\n        }\n    }\n\n    /**\n     * Activates motion controls for the game.\n     * Sets the game speed to motion-appropriate speed, shows the motion indicator toggle button,\n     * and updates the motion control state to active.\n     */\n    activateMotionControl() {\n        this.motionControl.active = true;\n        this.state.setSpeed(GAME.SPEED_MS__MOTION);\n        this.board.showMotionIndicatorToggleButton();\n    }\n\n    /**\n     * Deactivates motion controls for the game.\n     * Hides the motion indicator, resets to default game speed,\n     * hides the motion indicator toggle button, and updates the motion control state.\n     */\n    deactivateMotionControl() {\n        this.motionControl.active = false;\n        this.motionControl.indicatorVisible = false;\n        if (this.motionIndicator) {\n            this.motionIndicator.hide();\n        }\n        this.state.setSpeed(GAME.SPEED_MS__ARROW);\n        this.board.hideMotionIndicatorToggleButton();\n    }\n\n    // <!-- UI HELPER METHODS BELOW -->\n    // <!-- TODO: fully refactor to be in Board instead, without circular dep (GameEngine) ? -->\n\n    /**\n     * Initializes all UI components for the game / control panel.\n     * Sets up the motion indicator, motion toggle button, and high score clear button.\n     * @private\n     */\n    _initializeUI() {\n        this._setupMotionIndicator();\n        this._setupMotionToggleButton();\n        this._setupClearHighScoreButton();\n    }\n\n    /**\n     * Sets up the motion control indicator UI component.\n     * Creates a new MotionControlIndicator if the required DOM element exists,\n     * otherwise logs a warning and continues without the indicator.\n     * @private\n     */\n    _setupMotionIndicator() {\n        const motionIndicatorDiv = document.getElementById(MOTION_INDICATOR_ID);\n        if (!(motionIndicatorDiv instanceof HTMLDivElement)) {\n            console.warn(`Div with id '${MOTION_INDICATOR_ID}' not found. Motion control indicator will not be displayed.`);\n            return;\n        }\n\n        this.motionIndicator = new MotionControlIndicator(motionIndicatorDiv, {\n            showInfo: false,\n            position: 'corner'\n        });\n\n        if (this.motionControl.indicatorVisible) {\n            this.motionIndicator.show();\n        } else {\n            this.motionIndicator.hide();\n        }\n        this.board.updateMotionIndicatorToggleButtonTitle(this.motionControl.indicatorVisible);\n    }\n\n    /**\n     * Sets up the motion indicator toggle button.\n     * Creates the button and attaches the toggle event handler.\n     * @private\n     */\n    _setupMotionToggleButton() {\n        const toggleButton = this.board.createMotionIndicatorToggleButton();\n        if (toggleButton) {\n            toggleButton.addEventListener('click', this._boundMethods.handleToggleMotionIndicator);\n        }\n    }\n\n    /**\n     * Sets up the clear high score button.\n     * Creates the button and attaches the clear score event handler.\n     * @private\n     */\n    _setupClearHighScoreButton() {\n        const clearButton = this.board.createClearHighScoreButton();\n        if (clearButton) {\n            clearButton.addEventListener('click', this._boundMethods.handleClearHighScore);\n        }\n    }\n\n    /**\n     * Handles toggling the motion indicator's visibility.\n     * Prevents default event behavior and propagation, then updates\n     * both the indicator's visibility state and the toggle button's title.\n     * @private\n     * @param {MouseEvent} event - click event object\n     */\n    _handleToggleMotionIndicator(event) {\n        this.motionControl.indicatorVisible = !this.motionControl.indicatorVisible;\n        motionIndicatorVisible = this.motionControl.indicatorVisible;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.motionIndicator && this.motionControl.indicatorVisible) {\n            this.motionIndicator.show();\n        } else if (this.motionIndicator) {\n            this.motionIndicator.hide();\n        }\n        this.board.updateMotionIndicatorToggleButtonTitle(this.motionControl.indicatorVisible);\n    }\n\n    /**\n     * Handles clearing the high score.\n     * Prevents default event behavior and propagation, then clears the high score.\n     * @private\n     * @param {MouseEvent} event - click event object\n     */\n    _handleClearHighScore(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._clearHighScore();\n    }\n\n    /**\n     * Removes all event listeners added during game initialization.\n     * @private\n     */\n    _removeEventListeners() {\n        const clearButton = this.board.getClearHighScoreButton();\n        if (clearButton) {\n            clearButton.removeEventListener('click', this._boundMethods.handleClearHighScore);\n        }\n\n        const toggleButton = this.board.getMotionIndicatorToggleButton();\n        if (toggleButton) {\n            toggleButton.removeEventListener('click', this._boundMethods.handleToggleMotionIndicator);\n        }\n    }\n}\n\n// <!-- GAME EXECUTION HELPERS BELOW -->\n\n/**\n * Initializes and runs the game.\n */\nexport function runGame() {\n    try {\n        let board = _initBoard();\n        let snake = new Snake(board.height, board.height, board.blockSize);\n        let food = new Food(board, snake);\n        let game = new Game(board, snake, food);\n\n        game.input.manageGameControls(true);\n\n        requestAnimationFrame((t) => game.run(t));\n    } catch (error) {\n        console.error('failed to initialize game:', error);\n        // display an error message to the user\n        displayErrorMessage('Failed to start the game. Please refresh the page and try again.', document.getElementById(CANVAS_ID));\n    }\n}\n\n/**\n * Initializes the game board.\n * @returns {Board} initialized game board\n * @throws {Error} ff the canvas element is not found or is not an HTMLCanvasElement\n * @private\n */\nfunction _initBoard() {\n    let canvas, ctrl_panel;\n    if (!(canvas = document.getElementById(CANVAS_ID))) {\n        throw new Error(`HTML canvas with id '${CANVAS_ID}' not found`);\n    }\n    if (!(canvas instanceof HTMLCanvasElement)) {\n        throw new Error(`#${CANVAS_ID} element is not an HTML canvas`);\n    }\n    if (!(ctrl_panel = document.getElementById(CONTROL_PANEL_ID))) {\n        console.warn(`control panel element with id '${CONTROL_PANEL_ID}' not found`);\n    }\n    if (!(ctrl_panel instanceof HTMLDivElement)) {\n        console.warn(`#${CONTROL_PANEL_ID} element is not a div`);\n        ctrl_panel = null;\n    }\n    if (ctrl_panel === null) {\n        console.warn('proceeding without control panel')\n    }\n\n    let board = new Board(canvas, ctrl_panel);\n\n    return board;\n}\n","import { runGame } from './game/game';\n\n// note: un-comment for debugging\n// import { InputHandler } from './game/input';\n// InputHandler._simulateDeviceOrientationRequestPermission();\n\nrunGame();\n"],"names":["GAME_CONFIG","BOARD","CTRL_PANEL_HEIGHT","MARGIN_SIZE","NUM_STEPS_ACROSS_CANVAS","DEFAULT_BACKGROUND_COLOR","DEFAULT_BORDER_COLOR","TELEPORT_BORDER_COLOR","TELEPORT_BACKGROUND_COLOR","FILTERS","NONE","PAUSE","ENDGAME","SNAKE","INITIAL_LENGTH","DEFAULT_COLOR","PHASE_BORDER_COLOR","ITEM","FOOD_COLOR","FOOD_BORDER_COLOR","PHASE_COLOR","TELEPORT_COLOR","PHASE_SCORE_THRESHOLD","TELEPORT_SCORE_THRESHOLD","BASE_PHASE_PROBABILITY","BASE_TELEPORT_PROBABILITY","BASE_VOLATILE_FOOD_PROBABILITY","GAME","SCORE_INCREMENT","SCORE_THRESHOLD_FOR_VOLATILE_FOOD","SPEED_MS__ARROW","SPEED_MS__MOTION","INPUT","SWIPE_SENSITIVITY","MOTION_SENSITIVITY","MOTION_THROTTLE_TIME_MS","CANVAS","GAME_TEXT_COLOR","HIGH_SCORE_TEXT_COLOR","PAUSE_BTN_COLOR","EXCLAMATION_BTN_COLOR","GAME_TEXT_FONT_FAMILY","GAME_TEXT_FONT_SIZE","STATE","LOCAL_STORAGE_KEY_HIGH_SCORE","LOCAL_STORAGE_KEY_GAME_SPEED","ERROR","MESSAGE_FONT","MESSAGE_COLOR","MESSAGE_BACKGROUND","BUTTON_IDS","Board","constructor","canvas","ctrlPanel","this","_canvas","_ctrlPanel","ctx","getContext","Error","_boardSize","_calculateBoardSize","_ratio","window","devicePixelRatio","_sizeCanvas","_sizeControlPanel","_width","width","_height","height","_blockSize","_activeFilter","_color","_borderColor","_isGlowing","resetFilter","color","borderColor","isGlowing","activeFilter","blockSize","ratio","setEndGameFilter","setPauseGameFilter","enterFullScreen","requestFullscreen","then","screen","lockOrientationUniversal","lockOrientation","mozLockOrientation","msLockOrientation","e","exitFullScreen","document","exitFullscreen","createMotionRequestButton","_createOrGetButton","getMotionRequestButton","_getButton","removeMotionRequestButton","btn","parentNode","removeChild","createMotionIndicatorToggleButton","style","getMotionIndicatorToggleButton","showMotionIndicatorToggleButton","toggleButton","classList","remove","add","hideMotionIndicatorToggleButton","updateMotionIndicatorToggleButtonTitle","isIndicatorVisible","title","createClearHighScoreButton","getClearHighScoreButton","setGlow","shouldGlow","needsPermission","requestButton","checkVisibility","gridBlockSize","Math","min","innerWidth","innerHeight","floor","id","text","options","existingBtn","createElement","type","textContent","cssText","appendChild","element","getElementById","HTMLButtonElement","displayErrorMessage","message","HTMLCanvasElement","console","error","displayErrorInDOM","save","font","fillStyle","messageWidth","measureText","messageHeight","messageX","messageY","fillRect","textAlign","textBaseline","fillText","restore","displayErrorOnCanvas","errorDiv","position","top","left","transform","backgroundColor","padding","borderRadius","zIndex","whiteSpace","maxWidth","overflowWrap","body","PHASE_CLASSNAME","TELEPORT_CLASSNAME","Item","board","snake","_x","Number","MIN_SAFE_INTEGER","_y","_generate","x","y","fillColor","_randomBlock","forEachSegment","snakeSegment","max","round","random","Food","Teleport","Phase","ITEM_TYPES","none","food","teleport","phase","selectRandomItem","score","powerUps","alwaysReturnItem","reducePowerUpProbability","itemChances","teleportProb","calculateTeleportProbability","phaseProb","calculatePhaseProbability","foodProb","noItemProb","probabilities","totalProb","Object","values","reduce","sum","prob","abs","calculateItemProbabilities","selectedItemType","chances","cumulativeProbability","item","probability","entries","pickItem","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTIONS","dx","dy","MotionControlIndicator","container","showInfo","_create","update","orientation","direction","sensitivity","beta","gamma","maxTilt","tiltX","tiltY","dotPx","dot","HTMLDivElement","arrows","forEach","arrow","activeArrow","querySelector","toLowerCase","directionValue","HTMLSpanElement","setTimeout","sensitivityValue","toFixed","betaValue","gammaValue","show","display","hide","innerHTML","querySelectorAll","_addStyles","head","calculateMotionControl","currentOrientation","lastOrientation","currentUpdateTime","lastUpdateTime","recentChange","orientationChange","threshold","isSignificantMotion","getDirectionFromOrientation","Snake","boardWidth","boardHeight","centerX","centerY","_body","_createBody","_dx","_dxAtPause","_dy","_dyAtPause","_isChangingDirection","_directionMap","Map","length","i","push","getHeadPosition","getCurrentDirection","key","get","move","growing","_advanceHead","_advanceTail","unshift","pop","teleportHead","newPosition","callback","segment","index","pause","unpause","didEat","equip","didCollide","slice","some","log","hitLeftWall","hitRightWall","hitTopWall","hitBottomWall","changeDirection","newDirection","getDirection","currentDirection","_getCurrentDirection","dir2","dir1","_setNewDirection","magnitude","normalizeDirection","SPACE_KEY","LEFT_KEY","RIGHT_KEY","UP_KEY","DOWN_KEY","motionPermissionState","InputHandler","game","_game","_lastOrientation","_lastOrientationUpdateTime","_touchStart","_touchEnd","_boundMethods","_bindMethods","handleKeyInput","_handleKeyInput","bind","handleDeviceMovement","_handleDeviceMovement","handleVisibilityChange","_handleVisibilityChange","handlePauseClick","_handlePauseClick","requestDeviceOrientation","_requestDeviceOrientation","handleTouchStart","_handleTouchStart","handleTouchEnd","_handleTouchEnd","handleRestart","_handleRestart","manageGameControls","shouldAdd","_manageKeyboardControls","_manageMotionControls","_manageTouchControls","_manageClickControls","_manageVisibilityControl","manageRestartControls","action","motionControl","active","removeEventListener","DeviceOrientationEvent","_listenToDeviceOrientation","requestPermission","_activateMotionControl","_createMotionRequestButton","addEventListener","state","paused","togglePause","event","commandFn","code","_deactivateMotionControl","KeyboardEvent","restart","Date","now","updateMotionControl","hidden","preventDefault","firstTouch","changedTouches","screenX","screenY","_handleSwipeGesture","verticalSwipe","ended","catch","finally","activateMotionControl","deactivateMotionControl","_debugMotionControl","motionControlActive","deviceOrientation","isChangingDirection","snakeDirection","_simulateDeviceOrientationRequestPermission","Promise","resolve","defineProperty","prototype","value","withStraddle","cb","offset","translate","filter","border","outline","boxShadow","transition","useExclamation","iconSize","iconPadding","String","fromCharCode","lineCap","shadowBlur","shadowColor","strokeStyle","strokeRect","toString","strokeText","renderGame","renderGameOver","defaultCanvas","drawGame","drawScore","drawHighScore","highScore","drawItem","drawSnake","drawGameOver","createRenderFunctions","GameState","_paused","_ended","_score","_highScore","_getItemSafely","_speed","GAME_SPEED_MS__ARROW","speed","updateScore","increment","updateHighScore","_setItemSafely","clearHighScore","setSpeed","isNaN","endGame","defaultValue","localStorage","getItem","JSON","parse","warn","setItem","stringify","CANVAS_ID","CONTROL_PANEL_ID","MOTION_INDICATOR_ID","motionIndicatorVisible","Game","input","_lastUpdateTimestamp","indicatorVisible","handleClearHighScore","_handleClearHighScore","handleToggleMotionIndicator","_handleToggleMotionIndicator","_initializeUI","run","_shouldUpdateFrame","_updateFrame","requestAnimationFrame","t","_removeEventListeners","runGame","_advanceSnake","didEatBeforeMove","toUpperCase","_generateNewItem","_maybeRegenerateItem","_checkCollision","_end","itemClass","_clearHighScore","oldHighScore","motionIndicator","_setupMotionIndicator","_setupMotionToggleButton","_setupClearHighScoreButton","motionIndicatorDiv","clearButton","stopPropagation","ctrl_panel","_initBoard"],"mappings":"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"}